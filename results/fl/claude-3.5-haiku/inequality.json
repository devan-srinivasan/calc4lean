[
    {
        "name": "ln268",
        "result": "{\"name\": \"ln268\", \"problem\": \"example (x: \\u211d) (p q : \\u211d \\u2192 \\u211d) (h0 : p 0 = q 0 \\u2227 q 0 > 0) (hf': \\u2200 y:\\u211d, (deriv p y) * (deriv q y) = 18) (hqDeriv: Differentiable \\u211d q) (hpDeriv: Differentiable \\u211d p) (hP: \\u2200 y:\\u211d, deriv p y > 0) (hD: x \\u2208 Icc (0: \\u211d) (1: \\u211d)): p x + 2 * q x > 12 * x := by\\n\", \"proof\": [\"let f := (\\u03bb x \\u21a6 p x + 2 * q x - 12 * x)\\nlet D := Icc (0: \\u211d) (1: \\u211d)\\nhave gt_zero: f 0 > 0 := by\\n  simp [f, h0.left]\\n  rw [\\u2190 one_add_mul]\\n  apply mul_pos\\n  \\u00b7 norm_num\\n  \\u00b7 exact h0.right\\nhave monotonic: MonotoneOn f D := by\\n  have hfDifferentiableInReal : Differentiable \\u211d f := by\\n      exact ((hpDeriv).add (hqDeriv.const_mul _)).sub (differentiable_id.const_mul _)\\n  have hfDifferentiable: DifferentiableOn \\u211d f (interior D) := by\\n    exact hfDifferentiableInReal.differentiableOn.mono interior_subset\\n  have hfContinuous: ContinuousOn f D:= by\\n    exact hfDifferentiableInReal.continuous.continuousOn\\n  have interior_increasing: \\u2200 x2 \\u2208 interior D, deriv f x2 \\u2265 0 := by\\n    intros x2 hx2\\n    let hpX2 := hP x2\\n    have reciprocal_deriv: deriv q x2 = 18 / deriv p x2 := by\\n      have hf'_iff: deriv p x2 * deriv q x2 = 18 \\u2194 deriv q x2 = 18 / deriv p x2 := by\\n        field_simp [hpX2]\\n        ring\\n      exact hf'_iff.mp (hf' x2)\\n    rw [deriv_sub]\\n    rw [deriv_add]\\n    rw [deriv_const_mul]\\n    rw [reciprocal_deriv]\\n    rw [deriv_const_mul]\\n    rw [deriv_id'']\\n    have sq_iff : 0 \\u2264 deriv p x2 * (deriv p x2 + 2 * (18 / deriv p x2) - 12) \\u2194\\n      0 \\u2264 deriv p x2 + 2 * (18 / deriv p x2) - 12 := by\\n      apply mul_nonneg_iff_of_pos_left (hP x2)\\n    have quad_eq : deriv p x2 * (deriv p x2 + 2 * (18 / deriv p x2) - 12)\\n            = deriv p x2 ^ 2 + 2 * 18 - 12 * deriv p x2 := by\\n      field_simp [hpX2]\\n      ring\\n    have quad_sq : deriv p x2 ^ 2 + 2 * 18 - 12 * deriv p x2 = (deriv p x2 - 6) ^ 2 := by ring\\n    have simplify: deriv p x2 + 2 * (18 / deriv p x2) - 12 * (fun x2 \\u21a6 1) x = deriv p x2 + 2 * (18 / deriv p x2) - 12 := by ring\\n    rw [quad_eq, quad_sq] at sq_iff\\n    rw [simplify]\\n    exact sq_iff.mp (by apply sq_nonneg)\\n    exact differentiableAt_id\\n    exact hqDeriv x2\\n    exact hpDeriv x2\\n    exact DifferentiableAt.const_mul (hqDeriv x2) _\\n    exact DifferentiableAt.add (hpDeriv x2) (DifferentiableAt.const_mul (hqDeriv x2) _)\\n    exact DifferentiableAt.const_mul differentiableAt_id _\\n  apply monotoneOn_of_deriv_nonneg (convex_Icc (0: \\u211d) 1) (hfContinuous) (hfDifferentiable) (interior_increasing)\\nhave f_pos: f x > 0 := by\\n  have x_pos: x \\u2265 0 := by\\n    apply (mem_Icc.mp hD).1\\n  have fx_gt_f_zero: f x \\u2265 f 0 := by\\n    apply monotonic (left_mem_Icc.mpr (by norm_num)) hD\\n    exact x_pos\\n  apply lt_of_lt_of_le gt_zero fx_gt_f_zero\\nhave equiv: p x + 2 * q x > 12 * x \\u2194 p x + 2 * q x - 12 * x > 0 := by constructor <;> intro h <;> linarith\\nrw [equiv]\\nexact f_pos\"], \"complete\": true, \"out\": [], \"informal_hints\": \"\"}"
    },
    {
        "name": "ln333",
        "result": "{\"name\": \"ln333\", \"problem\": \"example (x: \\u211d) (p q : \\u211d \\u2192 \\u211d) (h0 : p 0 = q 0 \\u2227 q 0 > 0) (hf': \\u2200 y:\\u211d, (deriv p y) * (deriv q y) = 8) (hqDeriv: Differentiable \\u211d q) (hpDeriv: Differentiable \\u211d p) (hP: \\u2200 y:\\u211d, deriv p y > 0) (hD: x \\u2208 Icc (0: \\u211d) (1: \\u211d)): p x + 2 * q x > 8 * x := by\\n\", \"proof\": [\"let f := (\\u03bb x \\u21a6 p x + 2 * q x - 8 * x)\\nlet D := Icc (0: \\u211d) (1: \\u211d)\\nhave gt_zero: f 0 > 0 := by\\n  simp [f, h0.left]\\n  rw [\\u2190 one_add_mul]\\n  apply mul_pos\\n  \\u00b7 norm_num\\n  \\u00b7 exact h0.right\\nhave monotonic: MonotoneOn f D := by\\n  have hfDifferentiableInReal : Differentiable \\u211d f := by\\n      exact ((hpDeriv).add (hqDeriv.const_mul _)).sub (differentiable_id.const_mul _)\\n  have hfDifferentiable: DifferentiableOn \\u211d f (interior D) := by\\n    exact hfDifferentiableInReal.differentiableOn.mono interior_subset\\n  have hfContinuous: ContinuousOn f D:= by\\n    exact hfDifferentiableInReal.continuous.continuousOn\\n  have interior_increasing: \\u2200 x2 \\u2208 interior D, deriv f x2 \\u2265 0 := by\\n    intros x2 hx2\\n    let hpX2 := hP x2\\n    have reciprocal_deriv: deriv q x2 = 8 / deriv p x2 := by\\n      have hf'_iff: deriv p x2 * deriv q x2 = 8 \\u2194 deriv q x2 = 8 / deriv p x2 := by\\n        field_simp [hpX2]\\n        ring\\n      exact hf'_iff.mp (hf' x2)\\n    rw [deriv_sub]\\n    rw [deriv_add]\\n    rw [deriv_const_mul]\\n    rw [reciprocal_deriv]\\n    rw [deriv_const_mul]\\n    rw [deriv_id'']\\n    have sq_iff : 0 \\u2264 deriv p x2 * (deriv p x2 + 2 * (8 / deriv p x2) - 8) \\u2194\\n      0 \\u2264 deriv p x2 + 2 * (8 / deriv p x2) - 8 := by\\n      apply mul_nonneg_iff_of_pos_left (hP x2)\\n    have quad_eq : deriv p x2 * (deriv p x2 + 2 * (8 / deriv p x2) - 8)\\n            = deriv p x2 ^ 2 + 2 * 8 - 8 * deriv p x2 := by\\n      field_simp [hpX2]\\n      ring\\n    have quad_sq : deriv p x2 ^ 2 + 2 * 8 - 8 * deriv p x2 = (deriv p x2 - 4) ^ 2 := by ring\\n    have simplify: deriv p x2 + 2 * (8 / deriv p x2) - 8 * (fun x2 \\u21a6 1) x = deriv p x2 + 2 * (8 / deriv p x2) - 8 := by ring\\n    rw [quad_eq, quad_sq] at sq_iff\\n    rw [simplify]\\n    exact sq_iff.mp (by apply sq_nonneg)\\n    exact differentiableAt_id\\n    exact hqDeriv x2\\n    exact hpDeriv x2\\n    exact DifferentiableAt.const_mul (hqDeriv x2) _\\n    exact DifferentiableAt.add (hpDeriv x2) (DifferentiableAt.const_mul (hqDeriv x2) _)\\n    exact DifferentiableAt.const_mul differentiableAt_id _\\n  apply monotoneOn_of_deriv_nonneg (convex_Icc (0: \\u211d) 1) (hfContinuous) (hfDifferentiable) (interior_increasing)\\nhave f_pos: f x > 0 := by\\n  have x_pos: x \\u2265 0 := by\\n    apply (mem_Icc.mp hD).1\\n  have fx_gt_f_zero: f x \\u2265 f 0 := by\\n    apply monotonic (left_mem_Icc.mpr (by norm_num)) hD\\n    exact x_pos\\n  apply lt_of_lt_of_le gt_zero fx_gt_f_zero\\nhave equiv: p x + 2 * q x > 8 * x \\u2194 p x + 2 * q x - 8 * x > 0 := by constructor <;> intro h <;> linarith\\nrw [equiv]\\nexact f_pos\"], \"complete\": true, \"out\": [], \"informal_hints\": \"\"}"
    },
    {
        "name": "ln398",
        "result": "{\"name\": \"ln398\", \"problem\": \"example (x: \\u211d) (p q : \\u211d \\u2192 \\u211d) (h0 : p 0 = q 0 \\u2227 q 0 > 0) (hf': \\u2200 y:\\u211d, (deriv p y) * (deriv q y) = 98) (hqDeriv: Differentiable \\u211d q) (hpDeriv: Differentiable \\u211d p) (hP: \\u2200 y:\\u211d, deriv p y > 0) (hD: x \\u2208 Icc (0: \\u211d) (1: \\u211d)): p x + 2 * q x > 28 * x := by\\n\", \"proof\": [\"let f := (\\u03bb x \\u21a6 p x + 2 * q x - 28 * x)\\nlet D := Icc (0: \\u211d) (1: \\u211d)\\nhave gt_zero: f 0 > 0 := by\\n  simp [f, h0.left]\\n  rw [\\u2190 one_add_mul]\\n  apply mul_pos\\n  \\u00b7 norm_num\\n  \\u00b7 exact h0.right\\nhave monotonic: MonotoneOn f D := by\\n  have hfDifferentiableInReal : Differentiable \\u211d f := by\\n      exact ((hpDeriv).add (hqDeriv.const_mul _)).sub (differentiable_id.const_mul _)\\n  have hfDifferentiable: DifferentiableOn \\u211d f (interior D) := by\\n    exact hfDifferentiableInReal.differentiableOn.mono interior_subset\\n  have hfContinuous: ContinuousOn f D:= by\\n    exact hfDifferentiableInReal.continuous.continuousOn\\n  have interior_increasing: \\u2200 x2 \\u2208 interior D, deriv f x2 \\u2265 0 := by\\n    intros x2 hx2\\n    let hpX2 := hP x2\\n    have reciprocal_deriv: deriv q x2 = 98 / deriv p x2 := by\\n      have hf'_iff: deriv p x2 * deriv q x2 = 98 \\u2194 deriv q x2 = 98 / deriv p x2 := by\\n        field_simp [hpX2]\\n        ring\\n      exact hf'_iff.mp (hf' x2)\\n    rw [deriv_sub]\\n    rw [deriv_add]\\n    rw [deriv_const_mul]\\n    rw [reciprocal_deriv]\\n    rw [deriv_const_mul]\\n    rw [deriv_id'']\\n    have sq_iff : 0 \\u2264 deriv p x2 * (deriv p x2 + 2 * (98 / deriv p x2) - 28) \\u2194\\n      0 \\u2264 deriv p x2 + 2 * (98 / deriv p x2) - 28 := by\\n      apply mul_nonneg_iff_of_pos_left (hP x2)\\n    have quad_eq : deriv p x2 * (deriv p x2 + 2 * (98 / deriv p x2) - 28)\\n            = deriv p x2 ^ 2 + 2 * 98 - 28 * deriv p x2 := by\\n      field_simp [hpX2]\\n      ring\\n    have quad_sq : deriv p x2 ^ 2 + 2 * 98 - 28 * deriv p x2 = (deriv p x2 - 14) ^ 2 := by ring\\n    have simplify: deriv p x2 + 2 * (98 / deriv p x2) - 28 * (fun x2 \\u21a6 1) x = deriv p x2 + 2 * (98 / deriv p x2) - 28 := by ring\\n    rw [quad_eq, quad_sq] at sq_iff\\n    rw [simplify]\\n    exact sq_iff.mp (by apply sq_nonneg)\\n    exact differentiableAt_id\\n    exact hqDeriv x2\\n    exact hpDeriv x2\\n    exact DifferentiableAt.const_mul (hqDeriv x2) _\\n    exact DifferentiableAt.add (hpDeriv x2) (DifferentiableAt.const_mul (hqDeriv x2) _)\\n    exact DifferentiableAt.const_mul differentiableAt_id _\\n  apply monotoneOn_of_deriv_nonneg (convex_Icc (0: \\u211d) 1) (hfContinuous) (hfDifferentiable) (interior_increasing)\\nhave f_pos: f x > 0 := by\\n  have x_pos: x \\u2265 0 := by\\n    apply (mem_Icc.mp hD).1\\n  have fx_gt_f_zero: f x \\u2265 f 0 := by\\n    apply monotonic (left_mem_Icc.mpr (by norm_num)) hD\\n    exact x_pos\\n  apply lt_of_lt_of_le gt_zero fx_gt_f_zero\\nhave equiv: p x + 2 * q x > 28 * x \\u2194 p x + 2 * q x - 28 * x > 0 := by constructor <;> intro h <;> linarith\\nrw [equiv]\\nexact f_pos\"], \"complete\": true, \"out\": [], \"informal_hints\": \"\"}"
    },
    {
        "name": "ln463",
        "result": "{\"name\": \"ln463\", \"problem\": \"example (x: \\u211d) (p q : \\u211d \\u2192 \\u211d) (h0 : p 0 = q 0 \\u2227 q 0 > 0) (hf': \\u2200 y:\\u211d, (deriv p y) * (deriv q y) = 75) (hqDeriv: Differentiable \\u211d q) (hpDeriv: Differentiable \\u211d p) (hP: \\u2200 y:\\u211d, deriv p y > 0) (hD: x \\u2208 Icc (0: \\u211d) (1: \\u211d)): p x + 3 * q x > 30 * x := by\\n\", \"proof\": [\"let f := (\\u03bb x \\u21a6 p x + 3 * q x - 30 * x)\\nlet D := Icc (0: \\u211d) (1: \\u211d)\\nhave gt_zero: f 0 > 0 := by\\n  simp [f, h0.left]\\n  rw [\\u2190 one_add_mul]\\n  apply mul_pos\\n  \\u00b7 norm_num\\n  \\u00b7 exact h0.right\\nhave monotonic: MonotoneOn f D := by\\n  have hfDifferentiableInReal : Differentiable \\u211d f := by\\n      exact ((hpDeriv).add (hqDeriv.const_mul _)).sub (differentiable_id.const_mul _)\\n  have hfDifferentiable: DifferentiableOn \\u211d f (interior D) := by\\n    exact hfDifferentiableInReal.differentiableOn.mono interior_subset\\n  have hfContinuous: ContinuousOn f D:= by\\n    exact hfDifferentiableInReal.continuous.continuousOn\\n  have interior_increasing: \\u2200 x2 \\u2208 interior D, deriv f x2 \\u2265 0 := by\\n    intros x2 hx2\\n    let hpX2 := hP x2\\n    have reciprocal_deriv: deriv q x2 = 75 / deriv p x2 := by\\n      have hf'_iff: deriv p x2 * deriv q x2 = 75 \\u2194 deriv q x2 = 75 / deriv p x2 := by\\n        field_simp [hpX2]\\n        ring\\n      exact hf'_iff.mp (hf' x2)\\n    rw [deriv_sub]\\n    rw [deriv_add]\\n    rw [deriv_const_mul]\\n    rw [reciprocal_deriv]\\n    rw [deriv_const_mul]\\n    rw [deriv_id'']\\n    have sq_iff : 0 \\u2264 deriv p x2 * (deriv p x2 + 3 * (75 / deriv p x2) - 30) \\u2194\\n      0 \\u2264 deriv p x2 + 3 * (75 / deriv p x2) - 30 := by\\n      apply mul_nonneg_iff_of_pos_left (hP x2)\\n    have quad_eq : deriv p x2 * (deriv p x2 + 3 * (75 / deriv p x2) - 30)\\n            = deriv p x2 ^ 2 + 3 * 75 - 30 * deriv p x2 := by\\n      field_simp [hpX2]\\n      ring\\n    have quad_sq : deriv p x2 ^ 2 + 3 * 75 - 30 * deriv p x2 = (deriv p x2 - 15) ^ 2 := by ring\\n    have simplify: deriv p x2 + 3 * (75 / deriv p x2) - 30 * (fun x2 \\u21a6 1) x = deriv p x2 + 3 * (75 / deriv p x2) - 30 := by ring\\n    rw [quad_eq, quad_sq] at sq_iff\\n    rw [simplify]\\n    exact sq_iff.mp (by apply sq_nonneg)\\n    exact differentiableAt_id\\n    exact hqDeriv x2\\n    exact hpDeriv x2\\n    exact DifferentiableAt.const_mul (hqDeriv x2) _\\n    exact DifferentiableAt.add (hpDeriv x2) (DifferentiableAt.const_mul (hqDeriv x2) _)\\n    exact DifferentiableAt.const_mul differentiableAt_id _\\n  apply monotoneOn_of_deriv_nonneg (convex_Icc (0: \\u211d) 1) (hfContinuous) (hfDifferentiable) (interior_increasing)\\nhave f_pos: f x > 0 := by\\n  have x_pos: x \\u2265 0 := by\\n    apply (mem_Icc.mp hD).1\\n  have fx_gt_f_zero: f x \\u2265 f 0 := by\\n    apply monotonic (left_mem_Icc.mpr (by norm_num)) hD\\n    exact x_pos\\n  apply lt_of_lt_of_le gt_zero fx_gt_f_zero\\nhave equiv: p x + 3 * q x > 30 * x \\u2194 p x + 3 * q x - 30 * x > 0 := by constructor <;> intro h <;> linarith\\nrw [equiv]\\nexact f_pos\"], \"complete\": true, \"out\": [], \"informal_hints\": \"\"}"
    },
    {
        "name": "ln528",
        "result": "{\"name\": \"ln528\", \"problem\": \"example (x: \\u211d) (p q : \\u211d \\u2192 \\u211d) (h0 : p 0 = q 0 \\u2227 q 0 > 0) (hf': \\u2200 y:\\u211d, (deriv p y) * (deriv q y) = 75) (hqDeriv: Differentiable \\u211d q) (hpDeriv: Differentiable \\u211d p) (hP: \\u2200 y:\\u211d, deriv p y > 0) (hD: x \\u2208 Icc (0: \\u211d) (1: \\u211d)): p x + 3 * q x > 30 * x := by\\n\", \"proof\": [\"let f := (\\u03bb x \\u21a6 p x + 3 * q x - 30 * x)\\nlet D := Icc (0: \\u211d) (1: \\u211d)\\nhave gt_zero: f 0 > 0 := by\\n  simp [f, h0.left]\\n  rw [\\u2190 one_add_mul]\\n  apply mul_pos\\n  \\u00b7 norm_num\\n  \\u00b7 exact h0.right\\nhave monotonic: MonotoneOn f D := by\\n  have hfDifferentiableInReal : Differentiable \\u211d f := by\\n      exact ((hpDeriv).add (hqDeriv.const_mul _)).sub (differentiable_id.const_mul _)\\n  have hfDifferentiable: DifferentiableOn \\u211d f (interior D) := by\\n    exact hfDifferentiableInReal.differentiableOn.mono interior_subset\\n  have hfContinuous: ContinuousOn f D:= by\\n    exact hfDifferentiableInReal.continuous.continuousOn\\n  have interior_increasing: \\u2200 x2 \\u2208 interior D, deriv f x2 \\u2265 0 := by\\n    intros x2 hx2\\n    let hpX2 := hP x2\\n    have reciprocal_deriv: deriv q x2 = 75 / deriv p x2 := by\\n      have hf'_iff: deriv p x2 * deriv q x2 = 75 \\u2194 deriv q x2 = 75 / deriv p x2 := by\\n        field_simp [hpX2]\\n        ring\\n      exact hf'_iff.mp (hf' x2)\\n    rw [deriv_sub]\\n    rw [deriv_add]\\n    rw [deriv_const_mul]\\n    rw [reciprocal_deriv]\\n    rw [deriv_const_mul]\\n    rw [deriv_id'']\\n    have sq_iff : 0 \\u2264 deriv p x2 * (deriv p x2 + 3 * (75 / deriv p x2) - 30) \\u2194\\n      0 \\u2264 deriv p x2 + 3 * (75 / deriv p x2) - 30 := by\\n      apply mul_nonneg_iff_of_pos_left (hP x2)\\n    have quad_eq : deriv p x2 * (deriv p x2 + 3 * (75 / deriv p x2) - 30)\\n            = deriv p x2 ^ 2 + 3 * 75 - 30 * deriv p x2 := by\\n      field_simp [hpX2]\\n      ring\\n    have quad_sq : deriv p x2 ^ 2 + 3 * 75 - 30 * deriv p x2 = (deriv p x2 - 15) ^ 2 := by ring\\n    have simplify: deriv p x2 + 3 * (75 / deriv p x2) - 30 * (fun x2 \\u21a6 1) x = deriv p x2 + 3 * (75 / deriv p x2) - 30 := by ring\\n    rw [quad_eq, quad_sq] at sq_iff\\n    rw [simplify]\\n    exact sq_iff.mp (by apply sq_nonneg)\\n    exact differentiableAt_id\\n    exact hqDeriv x2\\n    exact hpDeriv x2\\n    exact DifferentiableAt.const_mul (hqDeriv x2) _\\n    exact DifferentiableAt.add (hpDeriv x2) (DifferentiableAt.const_mul (hqDeriv x2) _)\\n    exact DifferentiableAt.const_mul differentiableAt_id _\\n  apply monotoneOn_of_deriv_nonneg (convex_Icc (0: \\u211d) 1) (hfContinuous) (hfDifferentiable) (interior_increasing)\\nhave f_pos: f x > 0 := by\\n  have x_pos: x \\u2265 0 := by\\n    apply (mem_Icc.mp hD).1\\n  have fx_gt_f_zero: f x \\u2265 f 0 := by\\n    apply monotonic (left_mem_Icc.mpr (by norm_num)) hD\\n    exact x_pos\\n  apply lt_of_lt_of_le gt_zero fx_gt_f_zero\\nhave equiv: p x + 3 * q x > 30 * x \\u2194 p x + 3 * q x - 30 * x > 0 := by constructor <;> intro h <;> linarith\\nrw [equiv]\\nexact f_pos\"], \"complete\": true, \"out\": [], \"informal_hints\": \"\"}"
    },
    {
        "name": "ln593",
        "result": "{\"name\": \"ln593\", \"problem\": \"example (x: \\u211d) (p q : \\u211d \\u2192 \\u211d) (h0 : p 0 = q 0 \\u2227 q 0 > 0) (hf': \\u2200 y:\\u211d, (deriv p y) * (deriv q y) = 75) (hqDeriv: Differentiable \\u211d q) (hpDeriv: Differentiable \\u211d p) (hP: \\u2200 y:\\u211d, deriv p y > 0) (hD: x \\u2208 Icc (0: \\u211d) (1: \\u211d)): p x + 3 * q x > 30 * x := by\\n\", \"proof\": [\"let f := (\\u03bb x \\u21a6 p x + 3 * q x - 30 * x)\\nlet D := Icc (0: \\u211d) (1: \\u211d)\\nhave gt_zero: f 0 > 0 := by\\n  simp [f, h0.left]\\n  rw [\\u2190 one_add_mul]\\n  apply mul_pos\\n  \\u00b7 norm_num\\n  \\u00b7 exact h0.right\\nhave monotonic: MonotoneOn f D := by\\n  have hfDifferentiableInReal : Differentiable \\u211d f := by\\n      exact ((hpDeriv).add (hqDeriv.const_mul _)).sub (differentiable_id.const_mul _)\\n  have hfDifferentiable: DifferentiableOn \\u211d f (interior D) := by\\n    exact hfDifferentiableInReal.differentiableOn.mono interior_subset\\n  have hfContinuous: ContinuousOn f D:= by\\n    exact hfDifferentiableInReal.continuous.continuousOn\\n  have interior_increasing: \\u2200 x2 \\u2208 interior D, deriv f x2 \\u2265 0 := by\\n    intros x2 hx2\\n    let hpX2 := hP x2\\n    have reciprocal_deriv: deriv q x2 = 75 / deriv p x2 := by\\n      have hf'_iff: deriv p x2 * deriv q x2 = 75 \\u2194 deriv q x2 = 75 / deriv p x2 := by\\n        field_simp [hpX2]\\n        ring\\n      exact hf'_iff.mp (hf' x2)\\n    rw [deriv_sub]\\n    rw [deriv_add]\\n    rw [deriv_const_mul]\\n    rw [reciprocal_deriv]\\n    rw [deriv_const_mul]\\n    rw [deriv_id'']\\n    have sq_iff : 0 \\u2264 deriv p x2 * (deriv p x2 + 3 * (75 / deriv p x2) - 30) \\u2194\\n      0 \\u2264 deriv p x2 + 3 * (75 / deriv p x2) - 30 := by\\n      apply mul_nonneg_iff_of_pos_left (hP x2)\\n    have quad_eq : deriv p x2 * (deriv p x2 + 3 * (75 / deriv p x2) - 30)\\n            = deriv p x2 ^ 2 + 3 * 75 - 30 * deriv p x2 := by\\n      field_simp [hpX2]\\n      ring\\n    have quad_sq : deriv p x2 ^ 2 + 3 * 75 - 30 * deriv p x2 = (deriv p x2 - 10) ^ 2 := by ring\\n    have simplify: deriv p x2 + 3 * (75 / deriv p x2) - 30 * (fun x2 \\u21a6 1) x = deriv p x2 + 3 * (75 / deriv p x2) - 30 := by ring\\n    rw [quad_eq, quad_sq] at sq_iff\\n    rw [simplify]\\n    exact sq_iff.mp (by apply sq_nonneg)\\n    exact differentiableAt_id\\n    exact hqDeriv x2\\n    exact hpDeriv x2\\n    exact DifferentiableAt.const_mul (hqDeriv x2) _\\n    exact DifferentiableAt.add (hpDeriv x2) (DifferentiableAt.const_mul (hqDeriv x2) _)\\n    exact DifferentiableAt.const_mul differentiableAt_id _\\n  apply monotoneOn_of_deriv_nonneg (convex_Icc (0: \\u211d) 1) (hfContinuous) (hfDifferentiable) (interior_increasing)\\nhave f_pos: f x > 0 := by\\n  have x_pos: x \\u2265 0 := by\\n    apply (mem_Icc.mp hD).1\\n  have fx_gt_f_zero: f x \\u2265 f 0 := by\\n    apply monotonic (left_mem_Icc.mpr (by norm_num)) hD\\n    exact x_pos\\n  apply lt_of_lt_of_le gt_zero fx_gt_f_zero\\nhave equiv: p x + 3 * q x > 30 * x \\u2194 p x + 3 * q x - 30 * x > 0 := by constructor <;> intro h <;> linarith\\nrw [equiv]\\nexact f_pos\"], \"complete\": true, \"out\": [], \"informal_hints\": \"\"}"
    }
]