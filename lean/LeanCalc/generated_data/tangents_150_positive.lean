
import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.Calculus.FDeriv.Add
import Mathlib.Analysis.Calculus.FDeriv.Mul
import Mathlib.Analysis.Calculus.FDeriv.Basic
import Mathlib.Tactic

open Real
open Set

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  11 * p.1 ^ 4 + 3 * p.1 ^ 5 +  15 * p.2 + 4 * p.2 ^ 2 - c) (x-12, y-4) (12, 4) = 0) → (12 * ( 44 * (x-12) ^ 3 + 15 * (x-12) ^ 4) + 4 * ( 15 + 8 * (y-4)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  11 * p.1 ^ 4 + 3 * p.1 ^ 5) (x - 12, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 + 4 * p.2 ^ 2) (x - 12, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       11 * p.1 ^ 4 + 3 * p.1 ^ 5 +  15 * p.2 + 4 * p.2 ^ 2) (x - 12, y - 4)
      =
      fderiv ℝ (fun p =>  11 * p.1 ^ 4 + 3 * p.1 ^ 5) (x - 12, y - 4) +
      fderiv ℝ (fun p =>  15 * p.2 + 4 * p.2 ^ 2) (x - 12, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  11 * p.1 ^ 4 + 3 * p.1 ^ 5) (x - 12, y - 4)) (12, 4) = 12 * ( 44 * (x-12) ^ 3 + 15 * (x-12) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  11 * p.1 ^ 4 + 3 * p.1 ^ 5) = (fun x =>  11 * x ^ 4 + 3 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 + 4 * p.2 ^ 2) (x - 12, y - 4)) (12, 4) = 4 * ( 15 + 8 * (y-4))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 + 4 * p.2 ^ 2) = (fun x =>  15 * x + 4 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 4) (12, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  3 * p.1 + 9 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 11 * p.1 ^ 5 + 11 * p.1 ^ 6 + 6 * p.1 ^ 7 +  6 * p.2 + 3 * p.2 ^ 2 + 7 * p.2 ^ 3 + 16 * p.2 ^ 4 - c) (x-12, y-11) (12, 11) = 0) → (12 * ( 3 + 18 * (x-12) + 9 * (x-12) ^ 2 + 20 * (x-12) ^ 3 + 55 * (x-12) ^ 4 + 66 * (x-12) ^ 5 + 42 * (x-12) ^ 6) + 11 * ( 6 + 6 * (y-11) + 21 * (y-11) ^ 2 + 64 * (y-11) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  3 * p.1 + 9 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 11 * p.1 ^ 5 + 11 * p.1 ^ 6 + 6 * p.1 ^ 7) (x - 12, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  6 * p.2 + 3 * p.2 ^ 2 + 7 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 12, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       3 * p.1 + 9 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 11 * p.1 ^ 5 + 11 * p.1 ^ 6 + 6 * p.1 ^ 7 +  6 * p.2 + 3 * p.2 ^ 2 + 7 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 12, y - 11)
      =
      fderiv ℝ (fun p =>  3 * p.1 + 9 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 11 * p.1 ^ 5 + 11 * p.1 ^ 6 + 6 * p.1 ^ 7) (x - 12, y - 11) +
      fderiv ℝ (fun p =>  6 * p.2 + 3 * p.2 ^ 2 + 7 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 12, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  3 * p.1 + 9 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 11 * p.1 ^ 5 + 11 * p.1 ^ 6 + 6 * p.1 ^ 7) (x - 12, y - 11)) (12, 11) = 12 * ( 3 + 18 * (x-12) + 9 * (x-12) ^ 2 + 20 * (x-12) ^ 3 + 55 * (x-12) ^ 4 + 66 * (x-12) ^ 5 + 42 * (x-12) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  3 * p.1 + 9 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 11 * p.1 ^ 5 + 11 * p.1 ^ 6 + 6 * p.1 ^ 7) = (fun x =>  3 * x + 9 * x ^ 2 + 3 * x ^ 3 + 5 * x ^ 4 + 11 * x ^ 5 + 11 * x ^ 6 + 6 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  6 * p.2 + 3 * p.2 ^ 2 + 7 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 12, y - 11)) (12, 11) = 11 * ( 6 + 6 * (y-11) + 21 * (y-11) ^ 2 + 64 * (y-11) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  6 * p.2 + 3 * p.2 ^ 2 + 7 * p.2 ^ 3 + 16 * p.2 ^ 4) = (fun x =>  6 * x + 3 * x ^ 2 + 7 * x ^ 3 + 16 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 11) (12, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 18 * p.1 ^ 2 + 13 * p.1 ^ 3 + 2 * p.1 ^ 4 +  14 * p.2 + 2 * p.2 ^ 2 + 11 * p.2 ^ 3 - c) (x-15, y-3) (15, 3) = 0) → (15 * ( 13 + 36 * (x-15) + 39 * (x-15) ^ 2 + 8 * (x-15) ^ 3) + 3 * ( 14 + 4 * (y-3) + 33 * (y-3) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 18 * p.1 ^ 2 + 13 * p.1 ^ 3 + 2 * p.1 ^ 4) (x - 15, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 2 * p.2 ^ 2 + 11 * p.2 ^ 3) (x - 15, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 18 * p.1 ^ 2 + 13 * p.1 ^ 3 + 2 * p.1 ^ 4 +  14 * p.2 + 2 * p.2 ^ 2 + 11 * p.2 ^ 3) (x - 15, y - 3)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 18 * p.1 ^ 2 + 13 * p.1 ^ 3 + 2 * p.1 ^ 4) (x - 15, y - 3) +
      fderiv ℝ (fun p =>  14 * p.2 + 2 * p.2 ^ 2 + 11 * p.2 ^ 3) (x - 15, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 18 * p.1 ^ 2 + 13 * p.1 ^ 3 + 2 * p.1 ^ 4) (x - 15, y - 3)) (15, 3) = 15 * ( 13 + 36 * (x-15) + 39 * (x-15) ^ 2 + 8 * (x-15) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 18 * p.1 ^ 2 + 13 * p.1 ^ 3 + 2 * p.1 ^ 4) = (fun x =>  13 * x + 18 * x ^ 2 + 13 * x ^ 3 + 2 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 2 * p.2 ^ 2 + 11 * p.2 ^ 3) (x - 15, y - 3)) (15, 3) = 3 * ( 14 + 4 * (y-3) + 33 * (y-3) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 2 * p.2 ^ 2 + 11 * p.2 ^ 3) = (fun x =>  14 * x + 2 * x ^ 2 + 11 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 3) (15, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 + 15 * p.1 ^ 2 + 12 * p.1 ^ 3 + 17 * p.1 ^ 4 +  16 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 5 + 17 * p.2 ^ 7 - c) (x-14, y-7) (14, 7) = 0) → (14 * ( 2 + 30 * (x-14) + 36 * (x-14) ^ 2 + 68 * (x-14) ^ 3) + 7 * ( 32 * (y-7) + 54 * (y-7) ^ 2 + 25 * (y-7) ^ 4 + 119 * (y-7) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 + 15 * p.1 ^ 2 + 12 * p.1 ^ 3 + 17 * p.1 ^ 4) (x - 14, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  16 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 5 + 17 * p.2 ^ 7) (x - 14, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 + 15 * p.1 ^ 2 + 12 * p.1 ^ 3 + 17 * p.1 ^ 4 +  16 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 5 + 17 * p.2 ^ 7) (x - 14, y - 7)
      =
      fderiv ℝ (fun p =>  2 * p.1 + 15 * p.1 ^ 2 + 12 * p.1 ^ 3 + 17 * p.1 ^ 4) (x - 14, y - 7) +
      fderiv ℝ (fun p =>  16 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 5 + 17 * p.2 ^ 7) (x - 14, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 + 15 * p.1 ^ 2 + 12 * p.1 ^ 3 + 17 * p.1 ^ 4) (x - 14, y - 7)) (14, 7) = 14 * ( 2 + 30 * (x-14) + 36 * (x-14) ^ 2 + 68 * (x-14) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 + 15 * p.1 ^ 2 + 12 * p.1 ^ 3 + 17 * p.1 ^ 4) = (fun x =>  2 * x + 15 * x ^ 2 + 12 * x ^ 3 + 17 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  16 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 5 + 17 * p.2 ^ 7) (x - 14, y - 7)) (14, 7) = 7 * ( 32 * (y-7) + 54 * (y-7) ^ 2 + 25 * (y-7) ^ 4 + 119 * (y-7) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  16 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 5 + 17 * p.2 ^ 7) = (fun x =>  16 * x ^ 2 + 18 * x ^ 3 + 5 * x ^ 5 + 17 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 14, y - 7) (14, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 12 * p.1 ^ 2 + 15 * p.1 ^ 4 + 18 * p.1 ^ 5 +  6 * p.2 + 9 * p.2 ^ 2 + 16 * p.2 ^ 3 - c) (x-18, y-5) (18, 5) = 0) → (18 * ( 12 + 24 * (x-18) + 60 * (x-18) ^ 3 + 90 * (x-18) ^ 4) + 5 * ( 6 + 18 * (y-5) + 48 * (y-5) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 12 * p.1 ^ 2 + 15 * p.1 ^ 4 + 18 * p.1 ^ 5) (x - 18, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  6 * p.2 + 9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 18, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 12 * p.1 ^ 2 + 15 * p.1 ^ 4 + 18 * p.1 ^ 5 +  6 * p.2 + 9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 18, y - 5)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 12 * p.1 ^ 2 + 15 * p.1 ^ 4 + 18 * p.1 ^ 5) (x - 18, y - 5) +
      fderiv ℝ (fun p =>  6 * p.2 + 9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 18, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 12 * p.1 ^ 2 + 15 * p.1 ^ 4 + 18 * p.1 ^ 5) (x - 18, y - 5)) (18, 5) = 18 * ( 12 + 24 * (x-18) + 60 * (x-18) ^ 3 + 90 * (x-18) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 12 * p.1 ^ 2 + 15 * p.1 ^ 4 + 18 * p.1 ^ 5) = (fun x =>  12 * x + 12 * x ^ 2 + 15 * x ^ 4 + 18 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  6 * p.2 + 9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 18, y - 5)) (18, 5) = 5 * ( 6 + 18 * (y-5) + 48 * (y-5) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  6 * p.2 + 9 * p.2 ^ 2 + 16 * p.2 ^ 3) = (fun x =>  6 * x + 9 * x ^ 2 + 16 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 5) (18, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 + 8 * p.1 ^ 2 +  19 * p.2 + 13 * p.2 ^ 2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 5 + 4 * p.2 ^ 6 - c) (x-4, y-13) (4, 13) = 0) → (4 * ( 9 + 16 * (x-4)) + 13 * ( 19 + 26 * (y-13) + 6 * (y-13) ^ 2 + 95 * (y-13) ^ 4 + 24 * (y-13) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 + 8 * p.1 ^ 2) (x - 4, y - 13))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 + 13 * p.2 ^ 2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 5 + 4 * p.2 ^ 6) (x - 4, y - 13)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 + 8 * p.1 ^ 2 +  19 * p.2 + 13 * p.2 ^ 2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 5 + 4 * p.2 ^ 6) (x - 4, y - 13)
      =
      fderiv ℝ (fun p =>  9 * p.1 + 8 * p.1 ^ 2) (x - 4, y - 13) +
      fderiv ℝ (fun p =>  19 * p.2 + 13 * p.2 ^ 2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 5 + 4 * p.2 ^ 6) (x - 4, y - 13) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 + 8 * p.1 ^ 2) (x - 4, y - 13)) (4, 13) = 4 * ( 9 + 16 * (x-4))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 + 8 * p.1 ^ 2) = (fun x =>  9 * x + 8 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 + 13 * p.2 ^ 2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 5 + 4 * p.2 ^ 6) (x - 4, y - 13)) (4, 13) = 13 * ( 19 + 26 * (y-13) + 6 * (y-13) ^ 2 + 95 * (y-13) ^ 4 + 24 * (y-13) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 + 13 * p.2 ^ 2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 5 + 4 * p.2 ^ 6) = (fun x =>  19 * x + 13 * x ^ 2 + 2 * x ^ 3 + 19 * x ^ 5 + 4 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 4, y - 13) (4, 13) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 ^ 2 + 12 * p.1 ^ 5 +  14 * p.2 + 5 * p.2 ^ 2 - c) (x-20, y-4) (20, 4) = 0) → (20 * ( 18 * (x-20) + 60 * (x-20) ^ 4) + 4 * ( 14 + 10 * (y-4)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 ^ 2 + 12 * p.1 ^ 5) (x - 20, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 ^ 2 + 12 * p.1 ^ 5 +  14 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 4)
      =
      fderiv ℝ (fun p =>  9 * p.1 ^ 2 + 12 * p.1 ^ 5) (x - 20, y - 4) +
      fderiv ℝ (fun p =>  14 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 ^ 2 + 12 * p.1 ^ 5) (x - 20, y - 4)) (20, 4) = 20 * ( 18 * (x-20) + 60 * (x-20) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 ^ 2 + 12 * p.1 ^ 5) = (fun x =>  9 * x ^ 2 + 12 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 4)) (20, 4) = 4 * ( 14 + 10 * (y-4))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 5 * p.2 ^ 2) = (fun x =>  14 * x + 5 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 4) (20, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 ^ 2 + 15 * p.1 ^ 3 +  4 * p.2 ^ 2 + 20 * p.2 ^ 3 + 18 * p.2 ^ 4 + 2 * p.2 ^ 5 + 5 * p.2 ^ 6 - c) (x-11, y-5) (11, 5) = 0) → (11 * ( 4 * (x-11) + 45 * (x-11) ^ 2) + 5 * ( 8 * (y-5) + 60 * (y-5) ^ 2 + 72 * (y-5) ^ 3 + 10 * (y-5) ^ 4 + 30 * (y-5) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 ^ 2 + 15 * p.1 ^ 3) (x - 11, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 ^ 2 + 20 * p.2 ^ 3 + 18 * p.2 ^ 4 + 2 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 11, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 ^ 2 + 15 * p.1 ^ 3 +  4 * p.2 ^ 2 + 20 * p.2 ^ 3 + 18 * p.2 ^ 4 + 2 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 11, y - 5)
      =
      fderiv ℝ (fun p =>  2 * p.1 ^ 2 + 15 * p.1 ^ 3) (x - 11, y - 5) +
      fderiv ℝ (fun p =>  4 * p.2 ^ 2 + 20 * p.2 ^ 3 + 18 * p.2 ^ 4 + 2 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 11, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 ^ 2 + 15 * p.1 ^ 3) (x - 11, y - 5)) (11, 5) = 11 * ( 4 * (x-11) + 45 * (x-11) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 ^ 2 + 15 * p.1 ^ 3) = (fun x =>  2 * x ^ 2 + 15 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 ^ 2 + 20 * p.2 ^ 3 + 18 * p.2 ^ 4 + 2 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 11, y - 5)) (11, 5) = 5 * ( 8 * (y-5) + 60 * (y-5) ^ 2 + 72 * (y-5) ^ 3 + 10 * (y-5) ^ 4 + 30 * (y-5) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 ^ 2 + 20 * p.2 ^ 3 + 18 * p.2 ^ 4 + 2 * p.2 ^ 5 + 5 * p.2 ^ 6) = (fun x =>  4 * x ^ 2 + 20 * x ^ 3 + 18 * x ^ 4 + 2 * x ^ 5 + 5 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 11, y - 5) (11, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 ^ 3 + 16 * p.1 ^ 4 +  14 * p.2 ^ 2 + 11 * p.2 ^ 4 + 9 * p.2 ^ 5 - c) (x-13, y-3) (13, 3) = 0) → (13 * ( 36 * (x-13) ^ 2 + 64 * (x-13) ^ 3) + 3 * ( 28 * (y-3) + 44 * (y-3) ^ 3 + 45 * (y-3) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 ^ 3 + 16 * p.1 ^ 4) (x - 13, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 ^ 2 + 11 * p.2 ^ 4 + 9 * p.2 ^ 5) (x - 13, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 ^ 3 + 16 * p.1 ^ 4 +  14 * p.2 ^ 2 + 11 * p.2 ^ 4 + 9 * p.2 ^ 5) (x - 13, y - 3)
      =
      fderiv ℝ (fun p =>  12 * p.1 ^ 3 + 16 * p.1 ^ 4) (x - 13, y - 3) +
      fderiv ℝ (fun p =>  14 * p.2 ^ 2 + 11 * p.2 ^ 4 + 9 * p.2 ^ 5) (x - 13, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 ^ 3 + 16 * p.1 ^ 4) (x - 13, y - 3)) (13, 3) = 13 * ( 36 * (x-13) ^ 2 + 64 * (x-13) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 ^ 3 + 16 * p.1 ^ 4) = (fun x =>  12 * x ^ 3 + 16 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 ^ 2 + 11 * p.2 ^ 4 + 9 * p.2 ^ 5) (x - 13, y - 3)) (13, 3) = 3 * ( 28 * (y-3) + 44 * (y-3) ^ 3 + 45 * (y-3) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 ^ 2 + 11 * p.2 ^ 4 + 9 * p.2 ^ 5) = (fun x =>  14 * x ^ 2 + 11 * x ^ 4 + 9 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 3) (13, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 8 * p.1 ^ 2 + 11 * p.1 ^ 3 +  14 * p.2 ^ 2 + 2 * p.2 ^ 3 + 10 * p.2 ^ 5 + 14 * p.2 ^ 6 - c) (x-20, y-12) (20, 12) = 0) → (20 * ( 12 + 16 * (x-20) + 33 * (x-20) ^ 2) + 12 * ( 28 * (y-12) + 6 * (y-12) ^ 2 + 50 * (y-12) ^ 4 + 84 * (y-12) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 8 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 20, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 ^ 2 + 2 * p.2 ^ 3 + 10 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 20, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 8 * p.1 ^ 2 + 11 * p.1 ^ 3 +  14 * p.2 ^ 2 + 2 * p.2 ^ 3 + 10 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 20, y - 12)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 8 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 20, y - 12) +
      fderiv ℝ (fun p =>  14 * p.2 ^ 2 + 2 * p.2 ^ 3 + 10 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 20, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 8 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 20, y - 12)) (20, 12) = 20 * ( 12 + 16 * (x-20) + 33 * (x-20) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 8 * p.1 ^ 2 + 11 * p.1 ^ 3) = (fun x =>  12 * x + 8 * x ^ 2 + 11 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 ^ 2 + 2 * p.2 ^ 3 + 10 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 20, y - 12)) (20, 12) = 12 * ( 28 * (y-12) + 6 * (y-12) ^ 2 + 50 * (y-12) ^ 4 + 84 * (y-12) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 ^ 2 + 2 * p.2 ^ 3 + 10 * p.2 ^ 5 + 14 * p.2 ^ 6) = (fun x =>  14 * x ^ 2 + 2 * x ^ 3 + 10 * x ^ 5 + 14 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 12) (20, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 8 * p.1 ^ 3 + 19 * p.1 ^ 4 +  19 * p.2 + 2 * p.2 ^ 2 + 10 * p.2 ^ 3 - c) (x-18, y-13) (18, 13) = 0) → (18 * ( 16 + 24 * (x-18) ^ 2 + 76 * (x-18) ^ 3) + 13 * ( 19 + 4 * (y-13) + 30 * (y-13) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 8 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 18, y - 13))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 + 2 * p.2 ^ 2 + 10 * p.2 ^ 3) (x - 18, y - 13)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 8 * p.1 ^ 3 + 19 * p.1 ^ 4 +  19 * p.2 + 2 * p.2 ^ 2 + 10 * p.2 ^ 3) (x - 18, y - 13)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 8 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 18, y - 13) +
      fderiv ℝ (fun p =>  19 * p.2 + 2 * p.2 ^ 2 + 10 * p.2 ^ 3) (x - 18, y - 13) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 8 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 18, y - 13)) (18, 13) = 18 * ( 16 + 24 * (x-18) ^ 2 + 76 * (x-18) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 8 * p.1 ^ 3 + 19 * p.1 ^ 4) = (fun x =>  16 * x + 8 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 + 2 * p.2 ^ 2 + 10 * p.2 ^ 3) (x - 18, y - 13)) (18, 13) = 13 * ( 19 + 4 * (y-13) + 30 * (y-13) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 + 2 * p.2 ^ 2 + 10 * p.2 ^ 3) = (fun x =>  19 * x + 2 * x ^ 2 + 10 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 13) (18, 13) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 + 19 * p.1 ^ 2 +  19 * p.2 ^ 3 + 2 * p.2 ^ 4 - c) (x-10, y-6) (10, 6) = 0) → (10 * ( 9 + 38 * (x-10)) + 6 * ( 57 * (y-6) ^ 2 + 8 * (y-6) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 + 19 * p.1 ^ 2) (x - 10, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 ^ 3 + 2 * p.2 ^ 4) (x - 10, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 + 19 * p.1 ^ 2 +  19 * p.2 ^ 3 + 2 * p.2 ^ 4) (x - 10, y - 6)
      =
      fderiv ℝ (fun p =>  9 * p.1 + 19 * p.1 ^ 2) (x - 10, y - 6) +
      fderiv ℝ (fun p =>  19 * p.2 ^ 3 + 2 * p.2 ^ 4) (x - 10, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 + 19 * p.1 ^ 2) (x - 10, y - 6)) (10, 6) = 10 * ( 9 + 38 * (x-10))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 + 19 * p.1 ^ 2) = (fun x =>  9 * x + 19 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 ^ 3 + 2 * p.2 ^ 4) (x - 10, y - 6)) (10, 6) = 6 * ( 57 * (y-6) ^ 2 + 8 * (y-6) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 ^ 3 + 2 * p.2 ^ 4) = (fun x =>  19 * x ^ 3 + 2 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 10, y - 6) (10, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 + 19 * p.1 ^ 2 + 10 * p.1 ^ 3 + 20 * p.1 ^ 4 +  12 * p.2 + 9 * p.2 ^ 2 + 10 * p.2 ^ 3 + 19 * p.2 ^ 4 + 4 * p.2 ^ 5 + 8 * p.2 ^ 6 - c) (x-12, y-14) (12, 14) = 0) → (12 * ( 18 + 38 * (x-12) + 30 * (x-12) ^ 2 + 80 * (x-12) ^ 3) + 14 * ( 12 + 18 * (y-14) + 30 * (y-14) ^ 2 + 76 * (y-14) ^ 3 + 20 * (y-14) ^ 4 + 48 * (y-14) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 + 19 * p.1 ^ 2 + 10 * p.1 ^ 3 + 20 * p.1 ^ 4) (x - 12, y - 14))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 10 * p.2 ^ 3 + 19 * p.2 ^ 4 + 4 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 12, y - 14)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 + 19 * p.1 ^ 2 + 10 * p.1 ^ 3 + 20 * p.1 ^ 4 +  12 * p.2 + 9 * p.2 ^ 2 + 10 * p.2 ^ 3 + 19 * p.2 ^ 4 + 4 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 12, y - 14)
      =
      fderiv ℝ (fun p =>  18 * p.1 + 19 * p.1 ^ 2 + 10 * p.1 ^ 3 + 20 * p.1 ^ 4) (x - 12, y - 14) +
      fderiv ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 10 * p.2 ^ 3 + 19 * p.2 ^ 4 + 4 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 12, y - 14) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 + 19 * p.1 ^ 2 + 10 * p.1 ^ 3 + 20 * p.1 ^ 4) (x - 12, y - 14)) (12, 14) = 12 * ( 18 + 38 * (x-12) + 30 * (x-12) ^ 2 + 80 * (x-12) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 + 19 * p.1 ^ 2 + 10 * p.1 ^ 3 + 20 * p.1 ^ 4) = (fun x =>  18 * x + 19 * x ^ 2 + 10 * x ^ 3 + 20 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 10 * p.2 ^ 3 + 19 * p.2 ^ 4 + 4 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 12, y - 14)) (12, 14) = 14 * ( 12 + 18 * (y-14) + 30 * (y-14) ^ 2 + 76 * (y-14) ^ 3 + 20 * (y-14) ^ 4 + 48 * (y-14) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 9 * p.2 ^ 2 + 10 * p.2 ^ 3 + 19 * p.2 ^ 4 + 4 * p.2 ^ 5 + 8 * p.2 ^ 6) = (fun x =>  12 * x + 9 * x ^ 2 + 10 * x ^ 3 + 19 * x ^ 4 + 4 * x ^ 5 + 8 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 14) (12, 14) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 ^ 2 + 20 * p.1 ^ 3 + 19 * p.1 ^ 4 +  5 * p.2 + 5 * p.2 ^ 2 - c) (x-5, y-19) (5, 19) = 0) → (5 * ( 40 * (x-5) + 60 * (x-5) ^ 2 + 76 * (x-5) ^ 3) + 19 * ( 5 + 10 * (y-19)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 ^ 2 + 20 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 5, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  5 * p.2 + 5 * p.2 ^ 2) (x - 5, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 ^ 2 + 20 * p.1 ^ 3 + 19 * p.1 ^ 4 +  5 * p.2 + 5 * p.2 ^ 2) (x - 5, y - 19)
      =
      fderiv ℝ (fun p =>  20 * p.1 ^ 2 + 20 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 5, y - 19) +
      fderiv ℝ (fun p =>  5 * p.2 + 5 * p.2 ^ 2) (x - 5, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 ^ 2 + 20 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 5, y - 19)) (5, 19) = 5 * ( 40 * (x-5) + 60 * (x-5) ^ 2 + 76 * (x-5) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 ^ 2 + 20 * p.1 ^ 3 + 19 * p.1 ^ 4) = (fun x =>  20 * x ^ 2 + 20 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  5 * p.2 + 5 * p.2 ^ 2) (x - 5, y - 19)) (5, 19) = 19 * ( 5 + 10 * (y-19))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  5 * p.2 + 5 * p.2 ^ 2) = (fun x =>  5 * x + 5 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 5, y - 19) (5, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 ^ 2 + 12 * p.1 ^ 3 + 19 * p.1 ^ 4 +  5 * p.2 + 4 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6 - c) (x-17, y-12) (17, 12) = 0) → (17 * ( 36 * (x-17) + 36 * (x-17) ^ 2 + 76 * (x-17) ^ 3) + 12 * ( 5 + 16 * (y-12) ^ 3 + 30 * (y-12) ^ 4 + 36 * (y-12) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 ^ 2 + 12 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 17, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  5 * p.2 + 4 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 17, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 ^ 2 + 12 * p.1 ^ 3 + 19 * p.1 ^ 4 +  5 * p.2 + 4 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 17, y - 12)
      =
      fderiv ℝ (fun p =>  18 * p.1 ^ 2 + 12 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 17, y - 12) +
      fderiv ℝ (fun p =>  5 * p.2 + 4 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 17, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 ^ 2 + 12 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 17, y - 12)) (17, 12) = 17 * ( 36 * (x-17) + 36 * (x-17) ^ 2 + 76 * (x-17) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 ^ 2 + 12 * p.1 ^ 3 + 19 * p.1 ^ 4) = (fun x =>  18 * x ^ 2 + 12 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  5 * p.2 + 4 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 17, y - 12)) (17, 12) = 12 * ( 5 + 16 * (y-12) ^ 3 + 30 * (y-12) ^ 4 + 36 * (y-12) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  5 * p.2 + 4 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) = (fun x =>  5 * x + 4 * x ^ 4 + 6 * x ^ 5 + 6 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 12) (17, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 7 * p.1 ^ 2 +  2 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 7 * p.2 ^ 6 - c) (x-9, y-11) (9, 11) = 0) → (9 * ( 16 + 14 * (x-9)) + 11 * ( 2 + 4 * (y-11) + 68 * (y-11) ^ 3 + 42 * (y-11) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 7 * p.1 ^ 2) (x - 9, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  2 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 7 * p.2 ^ 6) (x - 9, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 7 * p.1 ^ 2 +  2 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 7 * p.2 ^ 6) (x - 9, y - 11)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 7 * p.1 ^ 2) (x - 9, y - 11) +
      fderiv ℝ (fun p =>  2 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 7 * p.2 ^ 6) (x - 9, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 7 * p.1 ^ 2) (x - 9, y - 11)) (9, 11) = 9 * ( 16 + 14 * (x-9))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 7 * p.1 ^ 2) = (fun x =>  16 * x + 7 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  2 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 7 * p.2 ^ 6) (x - 9, y - 11)) (9, 11) = 11 * ( 2 + 4 * (y-11) + 68 * (y-11) ^ 3 + 42 * (y-11) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  2 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 7 * p.2 ^ 6) = (fun x =>  2 * x + 2 * x ^ 2 + 17 * x ^ 4 + 7 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 11) (9, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 7 * p.1 ^ 2 + 16 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 + 10 * p.1 ^ 6 +  9 * p.2 ^ 4 + 9 * p.2 ^ 5 + 17 * p.2 ^ 6 + 9 * p.2 ^ 7 - c) (x-8, y-11) (8, 11) = 0) → (8 * ( 5 + 14 * (x-8) + 48 * (x-8) ^ 2 + 64 * (x-8) ^ 3 + 30 * (x-8) ^ 4 + 60 * (x-8) ^ 5) + 11 * ( 36 * (y-11) ^ 3 + 45 * (y-11) ^ 4 + 102 * (y-11) ^ 5 + 63 * (y-11) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 7 * p.1 ^ 2 + 16 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 8, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 ^ 4 + 9 * p.2 ^ 5 + 17 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 8, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 7 * p.1 ^ 2 + 16 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 + 10 * p.1 ^ 6 +  9 * p.2 ^ 4 + 9 * p.2 ^ 5 + 17 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 8, y - 11)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 7 * p.1 ^ 2 + 16 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 8, y - 11) +
      fderiv ℝ (fun p =>  9 * p.2 ^ 4 + 9 * p.2 ^ 5 + 17 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 8, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 7 * p.1 ^ 2 + 16 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 8, y - 11)) (8, 11) = 8 * ( 5 + 14 * (x-8) + 48 * (x-8) ^ 2 + 64 * (x-8) ^ 3 + 30 * (x-8) ^ 4 + 60 * (x-8) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 7 * p.1 ^ 2 + 16 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 + 10 * p.1 ^ 6) = (fun x =>  5 * x + 7 * x ^ 2 + 16 * x ^ 3 + 16 * x ^ 4 + 6 * x ^ 5 + 10 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 ^ 4 + 9 * p.2 ^ 5 + 17 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 8, y - 11)) (8, 11) = 11 * ( 36 * (y-11) ^ 3 + 45 * (y-11) ^ 4 + 102 * (y-11) ^ 5 + 63 * (y-11) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 ^ 4 + 9 * p.2 ^ 5 + 17 * p.2 ^ 6 + 9 * p.2 ^ 7) = (fun x =>  9 * x ^ 4 + 9 * x ^ 5 + 17 * x ^ 6 + 9 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 11) (8, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 2 * p.1 ^ 3 +  17 * p.2 + 18 * p.2 ^ 2 - c) (x-7, y-4) (7, 4) = 0) → (7 * ( 15 + 6 * (x-7) ^ 2) + 4 * ( 17 + 36 * (y-4)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 2 * p.1 ^ 3) (x - 7, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  17 * p.2 + 18 * p.2 ^ 2) (x - 7, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 2 * p.1 ^ 3 +  17 * p.2 + 18 * p.2 ^ 2) (x - 7, y - 4)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 2 * p.1 ^ 3) (x - 7, y - 4) +
      fderiv ℝ (fun p =>  17 * p.2 + 18 * p.2 ^ 2) (x - 7, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 2 * p.1 ^ 3) (x - 7, y - 4)) (7, 4) = 7 * ( 15 + 6 * (x-7) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 2 * p.1 ^ 3) = (fun x =>  15 * x + 2 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  17 * p.2 + 18 * p.2 ^ 2) (x - 7, y - 4)) (7, 4) = 4 * ( 17 + 36 * (y-4))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  17 * p.2 + 18 * p.2 ^ 2) = (fun x =>  17 * x + 18 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 4) (7, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 4 * p.1 ^ 2 + 6 * p.1 ^ 4 + 7 * p.1 ^ 5 + 11 * p.1 ^ 7 +  14 * p.2 + 18 * p.2 ^ 2 - c) (x-17, y-5) (17, 5) = 0) → (17 * ( 8 + 8 * (x-17) + 24 * (x-17) ^ 3 + 35 * (x-17) ^ 4 + 77 * (x-17) ^ 6) + 5 * ( 14 + 36 * (y-5)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 4 * p.1 ^ 2 + 6 * p.1 ^ 4 + 7 * p.1 ^ 5 + 11 * p.1 ^ 7) (x - 17, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 18 * p.2 ^ 2) (x - 17, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 4 * p.1 ^ 2 + 6 * p.1 ^ 4 + 7 * p.1 ^ 5 + 11 * p.1 ^ 7 +  14 * p.2 + 18 * p.2 ^ 2) (x - 17, y - 5)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 4 * p.1 ^ 2 + 6 * p.1 ^ 4 + 7 * p.1 ^ 5 + 11 * p.1 ^ 7) (x - 17, y - 5) +
      fderiv ℝ (fun p =>  14 * p.2 + 18 * p.2 ^ 2) (x - 17, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 4 * p.1 ^ 2 + 6 * p.1 ^ 4 + 7 * p.1 ^ 5 + 11 * p.1 ^ 7) (x - 17, y - 5)) (17, 5) = 17 * ( 8 + 8 * (x-17) + 24 * (x-17) ^ 3 + 35 * (x-17) ^ 4 + 77 * (x-17) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 4 * p.1 ^ 2 + 6 * p.1 ^ 4 + 7 * p.1 ^ 5 + 11 * p.1 ^ 7) = (fun x =>  8 * x + 4 * x ^ 2 + 6 * x ^ 4 + 7 * x ^ 5 + 11 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 18 * p.2 ^ 2) (x - 17, y - 5)) (17, 5) = 5 * ( 14 + 36 * (y-5))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 18 * p.2 ^ 2) = (fun x =>  14 * x + 18 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 5) (17, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 + 20 * p.1 ^ 2 +  17 * p.2 + 12 * p.2 ^ 2 - c) (x-10, y-18) (10, 18) = 0) → (10 * ( 6 + 40 * (x-10)) + 18 * ( 17 + 24 * (y-18)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 + 20 * p.1 ^ 2) (x - 10, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  17 * p.2 + 12 * p.2 ^ 2) (x - 10, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 + 20 * p.1 ^ 2 +  17 * p.2 + 12 * p.2 ^ 2) (x - 10, y - 18)
      =
      fderiv ℝ (fun p =>  6 * p.1 + 20 * p.1 ^ 2) (x - 10, y - 18) +
      fderiv ℝ (fun p =>  17 * p.2 + 12 * p.2 ^ 2) (x - 10, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 + 20 * p.1 ^ 2) (x - 10, y - 18)) (10, 18) = 10 * ( 6 + 40 * (x-10))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 + 20 * p.1 ^ 2) = (fun x =>  6 * x + 20 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  17 * p.2 + 12 * p.2 ^ 2) (x - 10, y - 18)) (10, 18) = 18 * ( 17 + 24 * (y-18))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  17 * p.2 + 12 * p.2 ^ 2) = (fun x =>  17 * x + 12 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 10, y - 18) (10, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 + 9 * p.1 ^ 5 +  14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 16 * p.2 ^ 4 - c) (x-15, y-19) (15, 19) = 0) → (15 * ( 7 + 45 * (x-15) ^ 4) + 19 * ( 28 * (y-19) + 51 * (y-19) ^ 2 + 64 * (y-19) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 + 9 * p.1 ^ 5) (x - 15, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 15, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 + 9 * p.1 ^ 5 +  14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 15, y - 19)
      =
      fderiv ℝ (fun p =>  7 * p.1 + 9 * p.1 ^ 5) (x - 15, y - 19) +
      fderiv ℝ (fun p =>  14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 15, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 + 9 * p.1 ^ 5) (x - 15, y - 19)) (15, 19) = 15 * ( 7 + 45 * (x-15) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 + 9 * p.1 ^ 5) = (fun x =>  7 * x + 9 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 16 * p.2 ^ 4) (x - 15, y - 19)) (15, 19) = 19 * ( 28 * (y-19) + 51 * (y-19) ^ 2 + 64 * (y-19) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 16 * p.2 ^ 4) = (fun x =>  14 * x ^ 2 + 17 * x ^ 3 + 16 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 19) (15, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 17 * p.1 ^ 2 + 8 * p.1 ^ 3 + 4 * p.1 ^ 4 +  19 * p.2 ^ 2 + 20 * p.2 ^ 3 - c) (x-19, y-20) (19, 20) = 0) → (19 * ( 16 + 34 * (x-19) + 24 * (x-19) ^ 2 + 16 * (x-19) ^ 3) + 20 * ( 38 * (y-20) + 60 * (y-20) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 17 * p.1 ^ 2 + 8 * p.1 ^ 3 + 4 * p.1 ^ 4) (x - 19, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 ^ 2 + 20 * p.2 ^ 3) (x - 19, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 17 * p.1 ^ 2 + 8 * p.1 ^ 3 + 4 * p.1 ^ 4 +  19 * p.2 ^ 2 + 20 * p.2 ^ 3) (x - 19, y - 20)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 17 * p.1 ^ 2 + 8 * p.1 ^ 3 + 4 * p.1 ^ 4) (x - 19, y - 20) +
      fderiv ℝ (fun p =>  19 * p.2 ^ 2 + 20 * p.2 ^ 3) (x - 19, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 17 * p.1 ^ 2 + 8 * p.1 ^ 3 + 4 * p.1 ^ 4) (x - 19, y - 20)) (19, 20) = 19 * ( 16 + 34 * (x-19) + 24 * (x-19) ^ 2 + 16 * (x-19) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 17 * p.1 ^ 2 + 8 * p.1 ^ 3 + 4 * p.1 ^ 4) = (fun x =>  16 * x + 17 * x ^ 2 + 8 * x ^ 3 + 4 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 ^ 2 + 20 * p.2 ^ 3) (x - 19, y - 20)) (19, 20) = 20 * ( 38 * (y-20) + 60 * (y-20) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 ^ 2 + 20 * p.2 ^ 3) = (fun x =>  19 * x ^ 2 + 20 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 20) (19, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 ^ 4 + 17 * p.1 ^ 6 +  4 * p.2 + 17 * p.2 ^ 2 - c) (x-9, y-6) (9, 6) = 0) → (9 * ( 24 * (x-9) ^ 3 + 102 * (x-9) ^ 5) + 6 * ( 4 + 34 * (y-6)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 ^ 4 + 17 * p.1 ^ 6) (x - 9, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 17 * p.2 ^ 2) (x - 9, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 ^ 4 + 17 * p.1 ^ 6 +  4 * p.2 + 17 * p.2 ^ 2) (x - 9, y - 6)
      =
      fderiv ℝ (fun p =>  6 * p.1 ^ 4 + 17 * p.1 ^ 6) (x - 9, y - 6) +
      fderiv ℝ (fun p =>  4 * p.2 + 17 * p.2 ^ 2) (x - 9, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 ^ 4 + 17 * p.1 ^ 6) (x - 9, y - 6)) (9, 6) = 9 * ( 24 * (x-9) ^ 3 + 102 * (x-9) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 ^ 4 + 17 * p.1 ^ 6) = (fun x =>  6 * x ^ 4 + 17 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 17 * p.2 ^ 2) (x - 9, y - 6)) (9, 6) = 6 * ( 4 + 34 * (y-6))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 17 * p.2 ^ 2) = (fun x =>  4 * x + 17 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 6) (9, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 + 18 * p.1 ^ 2 +  18 * p.2 ^ 2 + 4 * p.2 ^ 3 + 8 * p.2 ^ 4 - c) (x-17, y-6) (17, 6) = 0) → (17 * ( 4 + 36 * (x-17)) + 6 * ( 36 * (y-6) + 12 * (y-6) ^ 2 + 32 * (y-6) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 + 18 * p.1 ^ 2) (x - 17, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 ^ 2 + 4 * p.2 ^ 3 + 8 * p.2 ^ 4) (x - 17, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 + 18 * p.1 ^ 2 +  18 * p.2 ^ 2 + 4 * p.2 ^ 3 + 8 * p.2 ^ 4) (x - 17, y - 6)
      =
      fderiv ℝ (fun p =>  4 * p.1 + 18 * p.1 ^ 2) (x - 17, y - 6) +
      fderiv ℝ (fun p =>  18 * p.2 ^ 2 + 4 * p.2 ^ 3 + 8 * p.2 ^ 4) (x - 17, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 + 18 * p.1 ^ 2) (x - 17, y - 6)) (17, 6) = 17 * ( 4 + 36 * (x-17))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 + 18 * p.1 ^ 2) = (fun x =>  4 * x + 18 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 ^ 2 + 4 * p.2 ^ 3 + 8 * p.2 ^ 4) (x - 17, y - 6)) (17, 6) = 6 * ( 36 * (y-6) + 12 * (y-6) ^ 2 + 32 * (y-6) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 ^ 2 + 4 * p.2 ^ 3 + 8 * p.2 ^ 4) = (fun x =>  18 * x ^ 2 + 4 * x ^ 3 + 8 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 6) (17, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 + 13 * p.1 ^ 2 + 7 * p.1 ^ 4 +  11 * p.2 + 3 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 4 + 8 * p.2 ^ 5 + 13 * p.2 ^ 6 - c) (x-13, y-8) (13, 8) = 0) → (13 * ( 20 + 26 * (x-13) + 28 * (x-13) ^ 3) + 8 * ( 11 + 6 * (y-8) + 54 * (y-8) ^ 2 + 20 * (y-8) ^ 3 + 40 * (y-8) ^ 4 + 78 * (y-8) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 + 13 * p.1 ^ 2 + 7 * p.1 ^ 4) (x - 13, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 + 3 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 4 + 8 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 13, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 + 13 * p.1 ^ 2 + 7 * p.1 ^ 4 +  11 * p.2 + 3 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 4 + 8 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 13, y - 8)
      =
      fderiv ℝ (fun p =>  20 * p.1 + 13 * p.1 ^ 2 + 7 * p.1 ^ 4) (x - 13, y - 8) +
      fderiv ℝ (fun p =>  11 * p.2 + 3 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 4 + 8 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 13, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 + 13 * p.1 ^ 2 + 7 * p.1 ^ 4) (x - 13, y - 8)) (13, 8) = 13 * ( 20 + 26 * (x-13) + 28 * (x-13) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 + 13 * p.1 ^ 2 + 7 * p.1 ^ 4) = (fun x =>  20 * x + 13 * x ^ 2 + 7 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 + 3 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 4 + 8 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 13, y - 8)) (13, 8) = 8 * ( 11 + 6 * (y-8) + 54 * (y-8) ^ 2 + 20 * (y-8) ^ 3 + 40 * (y-8) ^ 4 + 78 * (y-8) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 + 3 * p.2 ^ 2 + 18 * p.2 ^ 3 + 5 * p.2 ^ 4 + 8 * p.2 ^ 5 + 13 * p.2 ^ 6) = (fun x =>  11 * x + 3 * x ^ 2 + 18 * x ^ 3 + 5 * x ^ 4 + 8 * x ^ 5 + 13 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 8) (13, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 ^ 3 + 7 * p.1 ^ 5 +  11 * p.2 + 9 * p.2 ^ 3 + 2 * p.2 ^ 4 + 3 * p.2 ^ 5 + 10 * p.2 ^ 6 + 2 * p.2 ^ 7 - c) (x-18, y-3) (18, 3) = 0) → (18 * ( 48 * (x-18) ^ 2 + 35 * (x-18) ^ 4) + 3 * ( 11 + 27 * (y-3) ^ 2 + 8 * (y-3) ^ 3 + 15 * (y-3) ^ 4 + 60 * (y-3) ^ 5 + 14 * (y-3) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 ^ 3 + 7 * p.1 ^ 5) (x - 18, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 + 9 * p.2 ^ 3 + 2 * p.2 ^ 4 + 3 * p.2 ^ 5 + 10 * p.2 ^ 6 + 2 * p.2 ^ 7) (x - 18, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 ^ 3 + 7 * p.1 ^ 5 +  11 * p.2 + 9 * p.2 ^ 3 + 2 * p.2 ^ 4 + 3 * p.2 ^ 5 + 10 * p.2 ^ 6 + 2 * p.2 ^ 7) (x - 18, y - 3)
      =
      fderiv ℝ (fun p =>  16 * p.1 ^ 3 + 7 * p.1 ^ 5) (x - 18, y - 3) +
      fderiv ℝ (fun p =>  11 * p.2 + 9 * p.2 ^ 3 + 2 * p.2 ^ 4 + 3 * p.2 ^ 5 + 10 * p.2 ^ 6 + 2 * p.2 ^ 7) (x - 18, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 ^ 3 + 7 * p.1 ^ 5) (x - 18, y - 3)) (18, 3) = 18 * ( 48 * (x-18) ^ 2 + 35 * (x-18) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 ^ 3 + 7 * p.1 ^ 5) = (fun x =>  16 * x ^ 3 + 7 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 + 9 * p.2 ^ 3 + 2 * p.2 ^ 4 + 3 * p.2 ^ 5 + 10 * p.2 ^ 6 + 2 * p.2 ^ 7) (x - 18, y - 3)) (18, 3) = 3 * ( 11 + 27 * (y-3) ^ 2 + 8 * (y-3) ^ 3 + 15 * (y-3) ^ 4 + 60 * (y-3) ^ 5 + 14 * (y-3) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 + 9 * p.2 ^ 3 + 2 * p.2 ^ 4 + 3 * p.2 ^ 5 + 10 * p.2 ^ 6 + 2 * p.2 ^ 7) = (fun x =>  11 * x + 9 * x ^ 3 + 2 * x ^ 4 + 3 * x ^ 5 + 10 * x ^ 6 + 2 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 3) (18, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  3 * p.1 + 16 * p.1 ^ 2 +  16 * p.2 + 3 * p.2 ^ 2 - c) (x-7, y-10) (7, 10) = 0) → (7 * ( 3 + 32 * (x-7)) + 10 * ( 16 + 6 * (y-10)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  3 * p.1 + 16 * p.1 ^ 2) (x - 7, y - 10))
  (hp2: DifferentiableAt ℝ (fun p =>  16 * p.2 + 3 * p.2 ^ 2) (x - 7, y - 10)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       3 * p.1 + 16 * p.1 ^ 2 +  16 * p.2 + 3 * p.2 ^ 2) (x - 7, y - 10)
      =
      fderiv ℝ (fun p =>  3 * p.1 + 16 * p.1 ^ 2) (x - 7, y - 10) +
      fderiv ℝ (fun p =>  16 * p.2 + 3 * p.2 ^ 2) (x - 7, y - 10) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  3 * p.1 + 16 * p.1 ^ 2) (x - 7, y - 10)) (7, 10) = 7 * ( 3 + 32 * (x-7))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  3 * p.1 + 16 * p.1 ^ 2) = (fun x =>  3 * x + 16 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  16 * p.2 + 3 * p.2 ^ 2) (x - 7, y - 10)) (7, 10) = 10 * ( 16 + 6 * (y-10))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  16 * p.2 + 3 * p.2 ^ 2) = (fun x =>  16 * x + 3 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 10) (7, 10) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 + 16 * p.1 ^ 2 +  20 * p.2 + 16 * p.2 ^ 3 + 5 * p.2 ^ 4 + 20 * p.2 ^ 5 + 13 * p.2 ^ 6 - c) (x-8, y-19) (8, 19) = 0) → (8 * ( 6 + 32 * (x-8)) + 19 * ( 20 + 48 * (y-19) ^ 2 + 20 * (y-19) ^ 3 + 100 * (y-19) ^ 4 + 78 * (y-19) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 + 16 * p.1 ^ 2) (x - 8, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 16 * p.2 ^ 3 + 5 * p.2 ^ 4 + 20 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 8, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 + 16 * p.1 ^ 2 +  20 * p.2 + 16 * p.2 ^ 3 + 5 * p.2 ^ 4 + 20 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 8, y - 19)
      =
      fderiv ℝ (fun p =>  6 * p.1 + 16 * p.1 ^ 2) (x - 8, y - 19) +
      fderiv ℝ (fun p =>  20 * p.2 + 16 * p.2 ^ 3 + 5 * p.2 ^ 4 + 20 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 8, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 + 16 * p.1 ^ 2) (x - 8, y - 19)) (8, 19) = 8 * ( 6 + 32 * (x-8))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 + 16 * p.1 ^ 2) = (fun x =>  6 * x + 16 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 16 * p.2 ^ 3 + 5 * p.2 ^ 4 + 20 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 8, y - 19)) (8, 19) = 19 * ( 20 + 48 * (y-19) ^ 2 + 20 * (y-19) ^ 3 + 100 * (y-19) ^ 4 + 78 * (y-19) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 16 * p.2 ^ 3 + 5 * p.2 ^ 4 + 20 * p.2 ^ 5 + 13 * p.2 ^ 6) = (fun x =>  20 * x + 16 * x ^ 3 + 5 * x ^ 4 + 20 * x ^ 5 + 13 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 19) (8, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  3 * p.1 + 17 * p.1 ^ 2 +  14 * p.2 + 10 * p.2 ^ 2 - c) (x-13, y-19) (13, 19) = 0) → (13 * ( 3 + 34 * (x-13)) + 19 * ( 14 + 20 * (y-19)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  3 * p.1 + 17 * p.1 ^ 2) (x - 13, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 10 * p.2 ^ 2) (x - 13, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       3 * p.1 + 17 * p.1 ^ 2 +  14 * p.2 + 10 * p.2 ^ 2) (x - 13, y - 19)
      =
      fderiv ℝ (fun p =>  3 * p.1 + 17 * p.1 ^ 2) (x - 13, y - 19) +
      fderiv ℝ (fun p =>  14 * p.2 + 10 * p.2 ^ 2) (x - 13, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  3 * p.1 + 17 * p.1 ^ 2) (x - 13, y - 19)) (13, 19) = 13 * ( 3 + 34 * (x-13))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  3 * p.1 + 17 * p.1 ^ 2) = (fun x =>  3 * x + 17 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 10 * p.2 ^ 2) (x - 13, y - 19)) (13, 19) = 19 * ( 14 + 20 * (y-19))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 10 * p.2 ^ 2) = (fun x =>  14 * x + 10 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 19) (13, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 3 * p.1 ^ 2 +  15 * p.2 + 6 * p.2 ^ 2 + 13 * p.2 ^ 3 - c) (x-20, y-8) (20, 8) = 0) → (20 * ( 16 + 6 * (x-20)) + 8 * ( 15 + 12 * (y-8) + 39 * (y-8) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 3 * p.1 ^ 2) (x - 20, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 + 6 * p.2 ^ 2 + 13 * p.2 ^ 3) (x - 20, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 3 * p.1 ^ 2 +  15 * p.2 + 6 * p.2 ^ 2 + 13 * p.2 ^ 3) (x - 20, y - 8)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 3 * p.1 ^ 2) (x - 20, y - 8) +
      fderiv ℝ (fun p =>  15 * p.2 + 6 * p.2 ^ 2 + 13 * p.2 ^ 3) (x - 20, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 3 * p.1 ^ 2) (x - 20, y - 8)) (20, 8) = 20 * ( 16 + 6 * (x-20))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 3 * p.1 ^ 2) = (fun x =>  16 * x + 3 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 + 6 * p.2 ^ 2 + 13 * p.2 ^ 3) (x - 20, y - 8)) (20, 8) = 8 * ( 15 + 12 * (y-8) + 39 * (y-8) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 + 6 * p.2 ^ 2 + 13 * p.2 ^ 3) = (fun x =>  15 * x + 6 * x ^ 2 + 13 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 8) (20, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 + 3 * p.1 ^ 2 + 11 * p.1 ^ 3 +  9 * p.2 ^ 3 + 6 * p.2 ^ 4 - c) (x-15, y-9) (15, 9) = 0) → (15 * ( 4 + 6 * (x-15) + 33 * (x-15) ^ 2) + 9 * ( 27 * (y-9) ^ 2 + 24 * (y-9) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 + 3 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 15, y - 9))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 15, y - 9)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 + 3 * p.1 ^ 2 + 11 * p.1 ^ 3 +  9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 15, y - 9)
      =
      fderiv ℝ (fun p =>  4 * p.1 + 3 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 15, y - 9) +
      fderiv ℝ (fun p =>  9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 15, y - 9) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 + 3 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 15, y - 9)) (15, 9) = 15 * ( 4 + 6 * (x-15) + 33 * (x-15) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 + 3 * p.1 ^ 2 + 11 * p.1 ^ 3) = (fun x =>  4 * x + 3 * x ^ 2 + 11 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 15, y - 9)) (15, 9) = 9 * ( 27 * (y-9) ^ 2 + 24 * (y-9) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 ^ 3 + 6 * p.2 ^ 4) = (fun x =>  9 * x ^ 3 + 6 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 9) (15, 9) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 16 * p.1 ^ 6 +  12 * p.2 + 14 * p.2 ^ 2 - c) (x-12, y-15) (12, 15) = 0) → (12 * ( 13 + 96 * (x-12) ^ 5) + 15 * ( 12 + 28 * (y-15)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 16 * p.1 ^ 6) (x - 12, y - 15))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 14 * p.2 ^ 2) (x - 12, y - 15)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 16 * p.1 ^ 6 +  12 * p.2 + 14 * p.2 ^ 2) (x - 12, y - 15)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 16 * p.1 ^ 6) (x - 12, y - 15) +
      fderiv ℝ (fun p =>  12 * p.2 + 14 * p.2 ^ 2) (x - 12, y - 15) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 16 * p.1 ^ 6) (x - 12, y - 15)) (12, 15) = 12 * ( 13 + 96 * (x-12) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 16 * p.1 ^ 6) = (fun x =>  13 * x + 16 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 14 * p.2 ^ 2) (x - 12, y - 15)) (12, 15) = 15 * ( 12 + 28 * (y-15))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 14 * p.2 ^ 2) = (fun x =>  12 * x + 14 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 15) (12, 15) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 10 * p.1 ^ 2 +  4 * p.2 + 6 * p.2 ^ 2 + 5 * p.2 ^ 3 + 20 * p.2 ^ 4 + 17 * p.2 ^ 5 - c) (x-16, y-15) (16, 15) = 0) → (16 * ( 16 + 20 * (x-16)) + 15 * ( 4 + 12 * (y-15) + 15 * (y-15) ^ 2 + 80 * (y-15) ^ 3 + 85 * (y-15) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 10 * p.1 ^ 2) (x - 16, y - 15))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 6 * p.2 ^ 2 + 5 * p.2 ^ 3 + 20 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 16, y - 15)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 10 * p.1 ^ 2 +  4 * p.2 + 6 * p.2 ^ 2 + 5 * p.2 ^ 3 + 20 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 16, y - 15)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 10 * p.1 ^ 2) (x - 16, y - 15) +
      fderiv ℝ (fun p =>  4 * p.2 + 6 * p.2 ^ 2 + 5 * p.2 ^ 3 + 20 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 16, y - 15) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 10 * p.1 ^ 2) (x - 16, y - 15)) (16, 15) = 16 * ( 16 + 20 * (x-16))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 10 * p.1 ^ 2) = (fun x =>  16 * x + 10 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 6 * p.2 ^ 2 + 5 * p.2 ^ 3 + 20 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 16, y - 15)) (16, 15) = 15 * ( 4 + 12 * (y-15) + 15 * (y-15) ^ 2 + 80 * (y-15) ^ 3 + 85 * (y-15) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 6 * p.2 ^ 2 + 5 * p.2 ^ 3 + 20 * p.2 ^ 4 + 17 * p.2 ^ 5) = (fun x =>  4 * x + 6 * x ^ 2 + 5 * x ^ 3 + 20 * x ^ 4 + 17 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 15) (16, 15) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 ^ 2 + 3 * p.1 ^ 3 +  11 * p.2 ^ 2 + 4 * p.2 ^ 3 + 20 * p.2 ^ 4 + 15 * p.2 ^ 5 - c) (x-12, y-7) (12, 7) = 0) → (12 * ( 14 * (x-12) + 9 * (x-12) ^ 2) + 7 * ( 22 * (y-7) + 12 * (y-7) ^ 2 + 80 * (y-7) ^ 3 + 75 * (y-7) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 ^ 2 + 3 * p.1 ^ 3) (x - 12, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 ^ 2 + 4 * p.2 ^ 3 + 20 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 12, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 ^ 2 + 3 * p.1 ^ 3 +  11 * p.2 ^ 2 + 4 * p.2 ^ 3 + 20 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 12, y - 7)
      =
      fderiv ℝ (fun p =>  7 * p.1 ^ 2 + 3 * p.1 ^ 3) (x - 12, y - 7) +
      fderiv ℝ (fun p =>  11 * p.2 ^ 2 + 4 * p.2 ^ 3 + 20 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 12, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 ^ 2 + 3 * p.1 ^ 3) (x - 12, y - 7)) (12, 7) = 12 * ( 14 * (x-12) + 9 * (x-12) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 ^ 2 + 3 * p.1 ^ 3) = (fun x =>  7 * x ^ 2 + 3 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 ^ 2 + 4 * p.2 ^ 3 + 20 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 12, y - 7)) (12, 7) = 7 * ( 22 * (y-7) + 12 * (y-7) ^ 2 + 80 * (y-7) ^ 3 + 75 * (y-7) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 ^ 2 + 4 * p.2 ^ 3 + 20 * p.2 ^ 4 + 15 * p.2 ^ 5) = (fun x =>  11 * x ^ 2 + 4 * x ^ 3 + 20 * x ^ 4 + 15 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 7) (12, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 7 * p.1 ^ 3 +  20 * p.2 + 12 * p.2 ^ 2 + 5 * p.2 ^ 4 - c) (x-8, y-6) (8, 6) = 0) → (8 * ( 15 + 21 * (x-8) ^ 2) + 6 * ( 20 + 24 * (y-6) + 20 * (y-6) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 7 * p.1 ^ 3) (x - 8, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 12 * p.2 ^ 2 + 5 * p.2 ^ 4) (x - 8, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 7 * p.1 ^ 3 +  20 * p.2 + 12 * p.2 ^ 2 + 5 * p.2 ^ 4) (x - 8, y - 6)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 7 * p.1 ^ 3) (x - 8, y - 6) +
      fderiv ℝ (fun p =>  20 * p.2 + 12 * p.2 ^ 2 + 5 * p.2 ^ 4) (x - 8, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 7 * p.1 ^ 3) (x - 8, y - 6)) (8, 6) = 8 * ( 15 + 21 * (x-8) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 7 * p.1 ^ 3) = (fun x =>  15 * x + 7 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 12 * p.2 ^ 2 + 5 * p.2 ^ 4) (x - 8, y - 6)) (8, 6) = 6 * ( 20 + 24 * (y-6) + 20 * (y-6) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 12 * p.2 ^ 2 + 5 * p.2 ^ 4) = (fun x =>  20 * x + 12 * x ^ 2 + 5 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 6) (8, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 + 15 * p.1 ^ 3 + 11 * p.1 ^ 4 + 5 * p.1 ^ 6 + 13 * p.1 ^ 7 +  6 * p.2 + 13 * p.2 ^ 2 + 18 * p.2 ^ 4 + 20 * p.2 ^ 5 - c) (x-18, y-16) (18, 16) = 0) → (18 * ( 9 + 45 * (x-18) ^ 2 + 44 * (x-18) ^ 3 + 30 * (x-18) ^ 5 + 91 * (x-18) ^ 6) + 16 * ( 6 + 26 * (y-16) + 72 * (y-16) ^ 3 + 100 * (y-16) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 + 15 * p.1 ^ 3 + 11 * p.1 ^ 4 + 5 * p.1 ^ 6 + 13 * p.1 ^ 7) (x - 18, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  6 * p.2 + 13 * p.2 ^ 2 + 18 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 18, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 + 15 * p.1 ^ 3 + 11 * p.1 ^ 4 + 5 * p.1 ^ 6 + 13 * p.1 ^ 7 +  6 * p.2 + 13 * p.2 ^ 2 + 18 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 18, y - 16)
      =
      fderiv ℝ (fun p =>  9 * p.1 + 15 * p.1 ^ 3 + 11 * p.1 ^ 4 + 5 * p.1 ^ 6 + 13 * p.1 ^ 7) (x - 18, y - 16) +
      fderiv ℝ (fun p =>  6 * p.2 + 13 * p.2 ^ 2 + 18 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 18, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 + 15 * p.1 ^ 3 + 11 * p.1 ^ 4 + 5 * p.1 ^ 6 + 13 * p.1 ^ 7) (x - 18, y - 16)) (18, 16) = 18 * ( 9 + 45 * (x-18) ^ 2 + 44 * (x-18) ^ 3 + 30 * (x-18) ^ 5 + 91 * (x-18) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 + 15 * p.1 ^ 3 + 11 * p.1 ^ 4 + 5 * p.1 ^ 6 + 13 * p.1 ^ 7) = (fun x =>  9 * x + 15 * x ^ 3 + 11 * x ^ 4 + 5 * x ^ 6 + 13 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  6 * p.2 + 13 * p.2 ^ 2 + 18 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 18, y - 16)) (18, 16) = 16 * ( 6 + 26 * (y-16) + 72 * (y-16) ^ 3 + 100 * (y-16) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  6 * p.2 + 13 * p.2 ^ 2 + 18 * p.2 ^ 4 + 20 * p.2 ^ 5) = (fun x =>  6 * x + 13 * x ^ 2 + 18 * x ^ 4 + 20 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 16) (18, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 6 * p.1 ^ 2 + 18 * p.1 ^ 3 +  15 * p.2 ^ 2 + 10 * p.2 ^ 3 + 12 * p.2 ^ 4 - c) (x-13, y-4) (13, 4) = 0) → (13 * ( 16 + 12 * (x-13) + 54 * (x-13) ^ 2) + 4 * ( 30 * (y-4) + 30 * (y-4) ^ 2 + 48 * (y-4) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 6 * p.1 ^ 2 + 18 * p.1 ^ 3) (x - 13, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 ^ 2 + 10 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 13, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 6 * p.1 ^ 2 + 18 * p.1 ^ 3 +  15 * p.2 ^ 2 + 10 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 13, y - 4)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 6 * p.1 ^ 2 + 18 * p.1 ^ 3) (x - 13, y - 4) +
      fderiv ℝ (fun p =>  15 * p.2 ^ 2 + 10 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 13, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 6 * p.1 ^ 2 + 18 * p.1 ^ 3) (x - 13, y - 4)) (13, 4) = 13 * ( 16 + 12 * (x-13) + 54 * (x-13) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 6 * p.1 ^ 2 + 18 * p.1 ^ 3) = (fun x =>  16 * x + 6 * x ^ 2 + 18 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 ^ 2 + 10 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 13, y - 4)) (13, 4) = 4 * ( 30 * (y-4) + 30 * (y-4) ^ 2 + 48 * (y-4) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 ^ 2 + 10 * p.2 ^ 3 + 12 * p.2 ^ 4) = (fun x =>  15 * x ^ 2 + 10 * x ^ 3 + 12 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 4) (13, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  14 * p.1 + 18 * p.1 ^ 2 + 10 * p.1 ^ 3 +  13 * p.2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 4 - c) (x-13, y-17) (13, 17) = 0) → (13 * ( 14 + 36 * (x-13) + 30 * (x-13) ^ 2) + 17 * ( 13 + 6 * (y-17) ^ 2 + 76 * (y-17) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  14 * p.1 + 18 * p.1 ^ 2 + 10 * p.1 ^ 3) (x - 13, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  13 * p.2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 13, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       14 * p.1 + 18 * p.1 ^ 2 + 10 * p.1 ^ 3 +  13 * p.2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 13, y - 17)
      =
      fderiv ℝ (fun p =>  14 * p.1 + 18 * p.1 ^ 2 + 10 * p.1 ^ 3) (x - 13, y - 17) +
      fderiv ℝ (fun p =>  13 * p.2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 13, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  14 * p.1 + 18 * p.1 ^ 2 + 10 * p.1 ^ 3) (x - 13, y - 17)) (13, 17) = 13 * ( 14 + 36 * (x-13) + 30 * (x-13) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  14 * p.1 + 18 * p.1 ^ 2 + 10 * p.1 ^ 3) = (fun x =>  14 * x + 18 * x ^ 2 + 10 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  13 * p.2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 13, y - 17)) (13, 17) = 17 * ( 13 + 6 * (y-17) ^ 2 + 76 * (y-17) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  13 * p.2 + 2 * p.2 ^ 3 + 19 * p.2 ^ 4) = (fun x =>  13 * x + 2 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 17) (13, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  17 * p.1 + 5 * p.1 ^ 3 + 18 * p.1 ^ 4 + 17 * p.1 ^ 6 + 4 * p.1 ^ 7 +  11 * p.2 + 20 * p.2 ^ 2 + 10 * p.2 ^ 3 + 18 * p.2 ^ 4 + 7 * p.2 ^ 5 + 20 * p.2 ^ 6 + 6 * p.2 ^ 7 - c) (x-3, y-7) (3, 7) = 0) → (3 * ( 17 + 15 * (x-3) ^ 2 + 72 * (x-3) ^ 3 + 102 * (x-3) ^ 5 + 28 * (x-3) ^ 6) + 7 * ( 11 + 40 * (y-7) + 30 * (y-7) ^ 2 + 72 * (y-7) ^ 3 + 35 * (y-7) ^ 4 + 120 * (y-7) ^ 5 + 42 * (y-7) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  17 * p.1 + 5 * p.1 ^ 3 + 18 * p.1 ^ 4 + 17 * p.1 ^ 6 + 4 * p.1 ^ 7) (x - 3, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 + 20 * p.2 ^ 2 + 10 * p.2 ^ 3 + 18 * p.2 ^ 4 + 7 * p.2 ^ 5 + 20 * p.2 ^ 6 + 6 * p.2 ^ 7) (x - 3, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       17 * p.1 + 5 * p.1 ^ 3 + 18 * p.1 ^ 4 + 17 * p.1 ^ 6 + 4 * p.1 ^ 7 +  11 * p.2 + 20 * p.2 ^ 2 + 10 * p.2 ^ 3 + 18 * p.2 ^ 4 + 7 * p.2 ^ 5 + 20 * p.2 ^ 6 + 6 * p.2 ^ 7) (x - 3, y - 7)
      =
      fderiv ℝ (fun p =>  17 * p.1 + 5 * p.1 ^ 3 + 18 * p.1 ^ 4 + 17 * p.1 ^ 6 + 4 * p.1 ^ 7) (x - 3, y - 7) +
      fderiv ℝ (fun p =>  11 * p.2 + 20 * p.2 ^ 2 + 10 * p.2 ^ 3 + 18 * p.2 ^ 4 + 7 * p.2 ^ 5 + 20 * p.2 ^ 6 + 6 * p.2 ^ 7) (x - 3, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  17 * p.1 + 5 * p.1 ^ 3 + 18 * p.1 ^ 4 + 17 * p.1 ^ 6 + 4 * p.1 ^ 7) (x - 3, y - 7)) (3, 7) = 3 * ( 17 + 15 * (x-3) ^ 2 + 72 * (x-3) ^ 3 + 102 * (x-3) ^ 5 + 28 * (x-3) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  17 * p.1 + 5 * p.1 ^ 3 + 18 * p.1 ^ 4 + 17 * p.1 ^ 6 + 4 * p.1 ^ 7) = (fun x =>  17 * x + 5 * x ^ 3 + 18 * x ^ 4 + 17 * x ^ 6 + 4 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 + 20 * p.2 ^ 2 + 10 * p.2 ^ 3 + 18 * p.2 ^ 4 + 7 * p.2 ^ 5 + 20 * p.2 ^ 6 + 6 * p.2 ^ 7) (x - 3, y - 7)) (3, 7) = 7 * ( 11 + 40 * (y-7) + 30 * (y-7) ^ 2 + 72 * (y-7) ^ 3 + 35 * (y-7) ^ 4 + 120 * (y-7) ^ 5 + 42 * (y-7) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 + 20 * p.2 ^ 2 + 10 * p.2 ^ 3 + 18 * p.2 ^ 4 + 7 * p.2 ^ 5 + 20 * p.2 ^ 6 + 6 * p.2 ^ 7) = (fun x =>  11 * x + 20 * x ^ 2 + 10 * x ^ 3 + 18 * x ^ 4 + 7 * x ^ 5 + 20 * x ^ 6 + 6 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 7) (3, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 19 * p.1 ^ 2 + 4 * p.1 ^ 3 + 5 * p.1 ^ 4 +  10 * p.2 + 8 * p.2 ^ 2 - c) (x-3, y-17) (3, 17) = 0) → (3 * ( 8 + 38 * (x-3) + 12 * (x-3) ^ 2 + 20 * (x-3) ^ 3) + 17 * ( 10 + 16 * (y-17)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 19 * p.1 ^ 2 + 4 * p.1 ^ 3 + 5 * p.1 ^ 4) (x - 3, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 + 8 * p.2 ^ 2) (x - 3, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 19 * p.1 ^ 2 + 4 * p.1 ^ 3 + 5 * p.1 ^ 4 +  10 * p.2 + 8 * p.2 ^ 2) (x - 3, y - 17)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 19 * p.1 ^ 2 + 4 * p.1 ^ 3 + 5 * p.1 ^ 4) (x - 3, y - 17) +
      fderiv ℝ (fun p =>  10 * p.2 + 8 * p.2 ^ 2) (x - 3, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 19 * p.1 ^ 2 + 4 * p.1 ^ 3 + 5 * p.1 ^ 4) (x - 3, y - 17)) (3, 17) = 3 * ( 8 + 38 * (x-3) + 12 * (x-3) ^ 2 + 20 * (x-3) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 19 * p.1 ^ 2 + 4 * p.1 ^ 3 + 5 * p.1 ^ 4) = (fun x =>  8 * x + 19 * x ^ 2 + 4 * x ^ 3 + 5 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 + 8 * p.2 ^ 2) (x - 3, y - 17)) (3, 17) = 17 * ( 10 + 16 * (y-17))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 + 8 * p.2 ^ 2) = (fun x =>  10 * x + 8 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 17) (3, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 8 * p.1 ^ 2 +  18 * p.2 + 16 * p.2 ^ 2 + 5 * p.2 ^ 3 + 11 * p.2 ^ 5 - c) (x-8, y-11) (8, 11) = 0) → (8 * ( 13 + 16 * (x-8)) + 11 * ( 18 + 32 * (y-11) + 15 * (y-11) ^ 2 + 55 * (y-11) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 8 * p.1 ^ 2) (x - 8, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 + 16 * p.2 ^ 2 + 5 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 8, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 8 * p.1 ^ 2 +  18 * p.2 + 16 * p.2 ^ 2 + 5 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 8, y - 11)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 8 * p.1 ^ 2) (x - 8, y - 11) +
      fderiv ℝ (fun p =>  18 * p.2 + 16 * p.2 ^ 2 + 5 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 8, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 8 * p.1 ^ 2) (x - 8, y - 11)) (8, 11) = 8 * ( 13 + 16 * (x-8))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 8 * p.1 ^ 2) = (fun x =>  13 * x + 8 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 + 16 * p.2 ^ 2 + 5 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 8, y - 11)) (8, 11) = 11 * ( 18 + 32 * (y-11) + 15 * (y-11) ^ 2 + 55 * (y-11) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 + 16 * p.2 ^ 2 + 5 * p.2 ^ 3 + 11 * p.2 ^ 5) = (fun x =>  18 * x + 16 * x ^ 2 + 5 * x ^ 3 + 11 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 11) (8, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 + 14 * p.1 ^ 2 + 11 * p.1 ^ 3 + 16 * p.1 ^ 6 + 12 * p.1 ^ 7 +  9 * p.2 ^ 2 + 16 * p.2 ^ 3 - c) (x-5, y-6) (5, 6) = 0) → (5 * ( 2 + 28 * (x-5) + 33 * (x-5) ^ 2 + 96 * (x-5) ^ 5 + 84 * (x-5) ^ 6) + 6 * ( 18 * (y-6) + 48 * (y-6) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 + 14 * p.1 ^ 2 + 11 * p.1 ^ 3 + 16 * p.1 ^ 6 + 12 * p.1 ^ 7) (x - 5, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 5, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 + 14 * p.1 ^ 2 + 11 * p.1 ^ 3 + 16 * p.1 ^ 6 + 12 * p.1 ^ 7 +  9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 5, y - 6)
      =
      fderiv ℝ (fun p =>  2 * p.1 + 14 * p.1 ^ 2 + 11 * p.1 ^ 3 + 16 * p.1 ^ 6 + 12 * p.1 ^ 7) (x - 5, y - 6) +
      fderiv ℝ (fun p =>  9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 5, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 + 14 * p.1 ^ 2 + 11 * p.1 ^ 3 + 16 * p.1 ^ 6 + 12 * p.1 ^ 7) (x - 5, y - 6)) (5, 6) = 5 * ( 2 + 28 * (x-5) + 33 * (x-5) ^ 2 + 96 * (x-5) ^ 5 + 84 * (x-5) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 + 14 * p.1 ^ 2 + 11 * p.1 ^ 3 + 16 * p.1 ^ 6 + 12 * p.1 ^ 7) = (fun x =>  2 * x + 14 * x ^ 2 + 11 * x ^ 3 + 16 * x ^ 6 + 12 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 5, y - 6)) (5, 6) = 6 * ( 18 * (y-6) + 48 * (y-6) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 ^ 2 + 16 * p.2 ^ 3) = (fun x =>  9 * x ^ 2 + 16 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 5, y - 6) (5, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 16 * p.1 ^ 3 +  12 * p.2 + 12 * p.2 ^ 3 - c) (x-7, y-5) (7, 5) = 0) → (7 * ( 12 + 48 * (x-7) ^ 2) + 5 * ( 12 + 36 * (y-5) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 16 * p.1 ^ 3) (x - 7, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 12 * p.2 ^ 3) (x - 7, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 16 * p.1 ^ 3 +  12 * p.2 + 12 * p.2 ^ 3) (x - 7, y - 5)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 16 * p.1 ^ 3) (x - 7, y - 5) +
      fderiv ℝ (fun p =>  12 * p.2 + 12 * p.2 ^ 3) (x - 7, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 16 * p.1 ^ 3) (x - 7, y - 5)) (7, 5) = 7 * ( 12 + 48 * (x-7) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 16 * p.1 ^ 3) = (fun x =>  12 * x + 16 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 12 * p.2 ^ 3) (x - 7, y - 5)) (7, 5) = 5 * ( 12 + 36 * (y-5) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 12 * p.2 ^ 3) = (fun x =>  12 * x + 12 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 5) (7, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 + 16 * p.1 ^ 3 +  9 * p.2 + 14 * p.2 ^ 2 - c) (x-8, y-6) (8, 6) = 0) → (8 * ( 7 + 48 * (x-8) ^ 2) + 6 * ( 9 + 28 * (y-6)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 + 16 * p.1 ^ 3) (x - 8, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 + 14 * p.2 ^ 2) (x - 8, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 + 16 * p.1 ^ 3 +  9 * p.2 + 14 * p.2 ^ 2) (x - 8, y - 6)
      =
      fderiv ℝ (fun p =>  7 * p.1 + 16 * p.1 ^ 3) (x - 8, y - 6) +
      fderiv ℝ (fun p =>  9 * p.2 + 14 * p.2 ^ 2) (x - 8, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 + 16 * p.1 ^ 3) (x - 8, y - 6)) (8, 6) = 8 * ( 7 + 48 * (x-8) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 + 16 * p.1 ^ 3) = (fun x =>  7 * x + 16 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 + 14 * p.2 ^ 2) (x - 8, y - 6)) (8, 6) = 6 * ( 9 + 28 * (y-6))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 + 14 * p.2 ^ 2) = (fun x =>  9 * x + 14 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 6) (8, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  17 * p.1 + 6 * p.1 ^ 2 + 17 * p.1 ^ 3 + 18 * p.1 ^ 5 + 14 * p.1 ^ 6 + 5 * p.1 ^ 7 +  11 * p.2 + 11 * p.2 ^ 2 + 12 * p.2 ^ 4 - c) (x-18, y-2) (18, 2) = 0) → (18 * ( 17 + 12 * (x-18) + 51 * (x-18) ^ 2 + 90 * (x-18) ^ 4 + 84 * (x-18) ^ 5 + 35 * (x-18) ^ 6) + 2 * ( 11 + 22 * (y-2) + 48 * (y-2) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  17 * p.1 + 6 * p.1 ^ 2 + 17 * p.1 ^ 3 + 18 * p.1 ^ 5 + 14 * p.1 ^ 6 + 5 * p.1 ^ 7) (x - 18, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 + 11 * p.2 ^ 2 + 12 * p.2 ^ 4) (x - 18, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       17 * p.1 + 6 * p.1 ^ 2 + 17 * p.1 ^ 3 + 18 * p.1 ^ 5 + 14 * p.1 ^ 6 + 5 * p.1 ^ 7 +  11 * p.2 + 11 * p.2 ^ 2 + 12 * p.2 ^ 4) (x - 18, y - 2)
      =
      fderiv ℝ (fun p =>  17 * p.1 + 6 * p.1 ^ 2 + 17 * p.1 ^ 3 + 18 * p.1 ^ 5 + 14 * p.1 ^ 6 + 5 * p.1 ^ 7) (x - 18, y - 2) +
      fderiv ℝ (fun p =>  11 * p.2 + 11 * p.2 ^ 2 + 12 * p.2 ^ 4) (x - 18, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  17 * p.1 + 6 * p.1 ^ 2 + 17 * p.1 ^ 3 + 18 * p.1 ^ 5 + 14 * p.1 ^ 6 + 5 * p.1 ^ 7) (x - 18, y - 2)) (18, 2) = 18 * ( 17 + 12 * (x-18) + 51 * (x-18) ^ 2 + 90 * (x-18) ^ 4 + 84 * (x-18) ^ 5 + 35 * (x-18) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  17 * p.1 + 6 * p.1 ^ 2 + 17 * p.1 ^ 3 + 18 * p.1 ^ 5 + 14 * p.1 ^ 6 + 5 * p.1 ^ 7) = (fun x =>  17 * x + 6 * x ^ 2 + 17 * x ^ 3 + 18 * x ^ 5 + 14 * x ^ 6 + 5 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 + 11 * p.2 ^ 2 + 12 * p.2 ^ 4) (x - 18, y - 2)) (18, 2) = 2 * ( 11 + 22 * (y-2) + 48 * (y-2) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 + 11 * p.2 ^ 2 + 12 * p.2 ^ 4) = (fun x =>  11 * x + 11 * x ^ 2 + 12 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 2) (18, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 + 11 * p.1 ^ 2 + 8 * p.1 ^ 3 + 10 * p.1 ^ 4 +  18 * p.2 + 3 * p.2 ^ 2 - c) (x-8, y-6) (8, 6) = 0) → (8 * ( 18 + 22 * (x-8) + 24 * (x-8) ^ 2 + 40 * (x-8) ^ 3) + 6 * ( 18 + 6 * (y-6)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 + 11 * p.1 ^ 2 + 8 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 8, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 + 3 * p.2 ^ 2) (x - 8, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 + 11 * p.1 ^ 2 + 8 * p.1 ^ 3 + 10 * p.1 ^ 4 +  18 * p.2 + 3 * p.2 ^ 2) (x - 8, y - 6)
      =
      fderiv ℝ (fun p =>  18 * p.1 + 11 * p.1 ^ 2 + 8 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 8, y - 6) +
      fderiv ℝ (fun p =>  18 * p.2 + 3 * p.2 ^ 2) (x - 8, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 + 11 * p.1 ^ 2 + 8 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 8, y - 6)) (8, 6) = 8 * ( 18 + 22 * (x-8) + 24 * (x-8) ^ 2 + 40 * (x-8) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 + 11 * p.1 ^ 2 + 8 * p.1 ^ 3 + 10 * p.1 ^ 4) = (fun x =>  18 * x + 11 * x ^ 2 + 8 * x ^ 3 + 10 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 + 3 * p.2 ^ 2) (x - 8, y - 6)) (8, 6) = 6 * ( 18 + 6 * (y-6))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 + 3 * p.2 ^ 2) = (fun x =>  18 * x + 3 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 6) (8, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 ^ 2 + 11 * p.1 ^ 3 +  18 * p.2 + 18 * p.2 ^ 2 - c) (x-4, y-5) (4, 5) = 0) → (4 * ( 10 * (x-4) + 33 * (x-4) ^ 2) + 5 * ( 18 + 36 * (y-5)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 4, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 + 18 * p.2 ^ 2) (x - 4, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 ^ 2 + 11 * p.1 ^ 3 +  18 * p.2 + 18 * p.2 ^ 2) (x - 4, y - 5)
      =
      fderiv ℝ (fun p =>  5 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 4, y - 5) +
      fderiv ℝ (fun p =>  18 * p.2 + 18 * p.2 ^ 2) (x - 4, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 4, y - 5)) (4, 5) = 4 * ( 10 * (x-4) + 33 * (x-4) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 ^ 2 + 11 * p.1 ^ 3) = (fun x =>  5 * x ^ 2 + 11 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 + 18 * p.2 ^ 2) (x - 4, y - 5)) (4, 5) = 5 * ( 18 + 36 * (y-5))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 + 18 * p.2 ^ 2) = (fun x =>  18 * x + 18 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 4, y - 5) (4, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 14 * p.1 ^ 2 +  19 * p.2 + 12 * p.2 ^ 2 + 11 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 5 + 15 * p.2 ^ 6 + 13 * p.2 ^ 7 - c) (x-19, y-8) (19, 8) = 0) → (19 * ( 13 + 28 * (x-19)) + 8 * ( 19 + 24 * (y-8) + 33 * (y-8) ^ 2 + 44 * (y-8) ^ 3 + 80 * (y-8) ^ 4 + 90 * (y-8) ^ 5 + 91 * (y-8) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 14 * p.1 ^ 2) (x - 19, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 + 12 * p.2 ^ 2 + 11 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 5 + 15 * p.2 ^ 6 + 13 * p.2 ^ 7) (x - 19, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 14 * p.1 ^ 2 +  19 * p.2 + 12 * p.2 ^ 2 + 11 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 5 + 15 * p.2 ^ 6 + 13 * p.2 ^ 7) (x - 19, y - 8)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 14 * p.1 ^ 2) (x - 19, y - 8) +
      fderiv ℝ (fun p =>  19 * p.2 + 12 * p.2 ^ 2 + 11 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 5 + 15 * p.2 ^ 6 + 13 * p.2 ^ 7) (x - 19, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 14 * p.1 ^ 2) (x - 19, y - 8)) (19, 8) = 19 * ( 13 + 28 * (x-19))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 14 * p.1 ^ 2) = (fun x =>  13 * x + 14 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 + 12 * p.2 ^ 2 + 11 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 5 + 15 * p.2 ^ 6 + 13 * p.2 ^ 7) (x - 19, y - 8)) (19, 8) = 8 * ( 19 + 24 * (y-8) + 33 * (y-8) ^ 2 + 44 * (y-8) ^ 3 + 80 * (y-8) ^ 4 + 90 * (y-8) ^ 5 + 91 * (y-8) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 + 12 * p.2 ^ 2 + 11 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 5 + 15 * p.2 ^ 6 + 13 * p.2 ^ 7) = (fun x =>  19 * x + 12 * x ^ 2 + 11 * x ^ 3 + 11 * x ^ 4 + 16 * x ^ 5 + 15 * x ^ 6 + 13 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 8) (19, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  19 * p.1 + 3 * p.1 ^ 2 +  4 * p.2 + 13 * p.2 ^ 2 + 8 * p.2 ^ 3 + 16 * p.2 ^ 4 + 19 * p.2 ^ 5 - c) (x-2, y-5) (2, 5) = 0) → (2 * ( 19 + 6 * (x-2)) + 5 * ( 4 + 26 * (y-5) + 24 * (y-5) ^ 2 + 64 * (y-5) ^ 3 + 95 * (y-5) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  19 * p.1 + 3 * p.1 ^ 2) (x - 2, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 13 * p.2 ^ 2 + 8 * p.2 ^ 3 + 16 * p.2 ^ 4 + 19 * p.2 ^ 5) (x - 2, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       19 * p.1 + 3 * p.1 ^ 2 +  4 * p.2 + 13 * p.2 ^ 2 + 8 * p.2 ^ 3 + 16 * p.2 ^ 4 + 19 * p.2 ^ 5) (x - 2, y - 5)
      =
      fderiv ℝ (fun p =>  19 * p.1 + 3 * p.1 ^ 2) (x - 2, y - 5) +
      fderiv ℝ (fun p =>  4 * p.2 + 13 * p.2 ^ 2 + 8 * p.2 ^ 3 + 16 * p.2 ^ 4 + 19 * p.2 ^ 5) (x - 2, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  19 * p.1 + 3 * p.1 ^ 2) (x - 2, y - 5)) (2, 5) = 2 * ( 19 + 6 * (x-2))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  19 * p.1 + 3 * p.1 ^ 2) = (fun x =>  19 * x + 3 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 13 * p.2 ^ 2 + 8 * p.2 ^ 3 + 16 * p.2 ^ 4 + 19 * p.2 ^ 5) (x - 2, y - 5)) (2, 5) = 5 * ( 4 + 26 * (y-5) + 24 * (y-5) ^ 2 + 64 * (y-5) ^ 3 + 95 * (y-5) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 13 * p.2 ^ 2 + 8 * p.2 ^ 3 + 16 * p.2 ^ 4 + 19 * p.2 ^ 5) = (fun x =>  4 * x + 13 * x ^ 2 + 8 * x ^ 3 + 16 * x ^ 4 + 19 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 2, y - 5) (2, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 ^ 3 + 6 * p.1 ^ 7 +  11 * p.2 + 2 * p.2 ^ 3 - c) (x-9, y-9) (9, 9) = 0) → (9 * ( 60 * (x-9) ^ 2 + 42 * (x-9) ^ 6) + 9 * ( 11 + 6 * (y-9) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 ^ 3 + 6 * p.1 ^ 7) (x - 9, y - 9))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 + 2 * p.2 ^ 3) (x - 9, y - 9)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 ^ 3 + 6 * p.1 ^ 7 +  11 * p.2 + 2 * p.2 ^ 3) (x - 9, y - 9)
      =
      fderiv ℝ (fun p =>  20 * p.1 ^ 3 + 6 * p.1 ^ 7) (x - 9, y - 9) +
      fderiv ℝ (fun p =>  11 * p.2 + 2 * p.2 ^ 3) (x - 9, y - 9) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 ^ 3 + 6 * p.1 ^ 7) (x - 9, y - 9)) (9, 9) = 9 * ( 60 * (x-9) ^ 2 + 42 * (x-9) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 ^ 3 + 6 * p.1 ^ 7) = (fun x =>  20 * x ^ 3 + 6 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 + 2 * p.2 ^ 3) (x - 9, y - 9)) (9, 9) = 9 * ( 11 + 6 * (y-9) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 + 2 * p.2 ^ 3) = (fun x =>  11 * x + 2 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 9) (9, 9) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 16 * p.1 ^ 4 + 8 * p.1 ^ 5 +  14 * p.2 + 12 * p.2 ^ 2 - c) (x-12, y-11) (12, 11) = 0) → (12 * ( 16 + 64 * (x-12) ^ 3 + 40 * (x-12) ^ 4) + 11 * ( 14 + 24 * (y-11)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 16 * p.1 ^ 4 + 8 * p.1 ^ 5) (x - 12, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 12 * p.2 ^ 2) (x - 12, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 16 * p.1 ^ 4 + 8 * p.1 ^ 5 +  14 * p.2 + 12 * p.2 ^ 2) (x - 12, y - 11)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 16 * p.1 ^ 4 + 8 * p.1 ^ 5) (x - 12, y - 11) +
      fderiv ℝ (fun p =>  14 * p.2 + 12 * p.2 ^ 2) (x - 12, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 16 * p.1 ^ 4 + 8 * p.1 ^ 5) (x - 12, y - 11)) (12, 11) = 12 * ( 16 + 64 * (x-12) ^ 3 + 40 * (x-12) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 16 * p.1 ^ 4 + 8 * p.1 ^ 5) = (fun x =>  16 * x + 16 * x ^ 4 + 8 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 12 * p.2 ^ 2) (x - 12, y - 11)) (12, 11) = 11 * ( 14 + 24 * (y-11))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 12 * p.2 ^ 2) = (fun x =>  14 * x + 12 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 11) (12, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 + 20 * p.1 ^ 2 + 4 * p.1 ^ 5 + 18 * p.1 ^ 7 +  10 * p.2 + 18 * p.2 ^ 2 + 3 * p.2 ^ 3 + 5 * p.2 ^ 4 + 6 * p.2 ^ 5 - c) (x-5, y-19) (5, 19) = 0) → (5 * ( 7 + 40 * (x-5) + 20 * (x-5) ^ 4 + 126 * (x-5) ^ 6) + 19 * ( 10 + 36 * (y-19) + 9 * (y-19) ^ 2 + 20 * (y-19) ^ 3 + 30 * (y-19) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 + 20 * p.1 ^ 2 + 4 * p.1 ^ 5 + 18 * p.1 ^ 7) (x - 5, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 + 18 * p.2 ^ 2 + 3 * p.2 ^ 3 + 5 * p.2 ^ 4 + 6 * p.2 ^ 5) (x - 5, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 + 20 * p.1 ^ 2 + 4 * p.1 ^ 5 + 18 * p.1 ^ 7 +  10 * p.2 + 18 * p.2 ^ 2 + 3 * p.2 ^ 3 + 5 * p.2 ^ 4 + 6 * p.2 ^ 5) (x - 5, y - 19)
      =
      fderiv ℝ (fun p =>  7 * p.1 + 20 * p.1 ^ 2 + 4 * p.1 ^ 5 + 18 * p.1 ^ 7) (x - 5, y - 19) +
      fderiv ℝ (fun p =>  10 * p.2 + 18 * p.2 ^ 2 + 3 * p.2 ^ 3 + 5 * p.2 ^ 4 + 6 * p.2 ^ 5) (x - 5, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 + 20 * p.1 ^ 2 + 4 * p.1 ^ 5 + 18 * p.1 ^ 7) (x - 5, y - 19)) (5, 19) = 5 * ( 7 + 40 * (x-5) + 20 * (x-5) ^ 4 + 126 * (x-5) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 + 20 * p.1 ^ 2 + 4 * p.1 ^ 5 + 18 * p.1 ^ 7) = (fun x =>  7 * x + 20 * x ^ 2 + 4 * x ^ 5 + 18 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 + 18 * p.2 ^ 2 + 3 * p.2 ^ 3 + 5 * p.2 ^ 4 + 6 * p.2 ^ 5) (x - 5, y - 19)) (5, 19) = 19 * ( 10 + 36 * (y-19) + 9 * (y-19) ^ 2 + 20 * (y-19) ^ 3 + 30 * (y-19) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 + 18 * p.2 ^ 2 + 3 * p.2 ^ 3 + 5 * p.2 ^ 4 + 6 * p.2 ^ 5) = (fun x =>  10 * x + 18 * x ^ 2 + 3 * x ^ 3 + 5 * x ^ 4 + 6 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 5, y - 19) (5, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 10 * p.1 ^ 5 + 10 * p.1 ^ 6 +  12 * p.2 + 16 * p.2 ^ 2 + 16 * p.2 ^ 4 - c) (x-15, y-6) (15, 6) = 0) → (15 * ( 10 * (x-15) + 9 * (x-15) ^ 2 + 52 * (x-15) ^ 3 + 50 * (x-15) ^ 4 + 60 * (x-15) ^ 5) + 6 * ( 12 + 32 * (y-6) + 64 * (y-6) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 10 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 15, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 16 * p.2 ^ 2 + 16 * p.2 ^ 4) (x - 15, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 10 * p.1 ^ 5 + 10 * p.1 ^ 6 +  12 * p.2 + 16 * p.2 ^ 2 + 16 * p.2 ^ 4) (x - 15, y - 6)
      =
      fderiv ℝ (fun p =>  5 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 10 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 15, y - 6) +
      fderiv ℝ (fun p =>  12 * p.2 + 16 * p.2 ^ 2 + 16 * p.2 ^ 4) (x - 15, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 10 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 15, y - 6)) (15, 6) = 15 * ( 10 * (x-15) + 9 * (x-15) ^ 2 + 52 * (x-15) ^ 3 + 50 * (x-15) ^ 4 + 60 * (x-15) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 10 * p.1 ^ 5 + 10 * p.1 ^ 6) = (fun x =>  5 * x ^ 2 + 3 * x ^ 3 + 13 * x ^ 4 + 10 * x ^ 5 + 10 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 16 * p.2 ^ 2 + 16 * p.2 ^ 4) (x - 15, y - 6)) (15, 6) = 6 * ( 12 + 32 * (y-6) + 64 * (y-6) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 16 * p.2 ^ 2 + 16 * p.2 ^ 4) = (fun x =>  12 * x + 16 * x ^ 2 + 16 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 6) (15, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 9 * p.1 ^ 2 +  8 * p.2 + 12 * p.2 ^ 3 + 17 * p.2 ^ 4 - c) (x-10, y-8) (10, 8) = 0) → (10 * ( 13 + 18 * (x-10)) + 8 * ( 8 + 36 * (y-8) ^ 2 + 68 * (y-8) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 9 * p.1 ^ 2) (x - 10, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 12 * p.2 ^ 3 + 17 * p.2 ^ 4) (x - 10, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 9 * p.1 ^ 2 +  8 * p.2 + 12 * p.2 ^ 3 + 17 * p.2 ^ 4) (x - 10, y - 8)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 9 * p.1 ^ 2) (x - 10, y - 8) +
      fderiv ℝ (fun p =>  8 * p.2 + 12 * p.2 ^ 3 + 17 * p.2 ^ 4) (x - 10, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 9 * p.1 ^ 2) (x - 10, y - 8)) (10, 8) = 10 * ( 13 + 18 * (x-10))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 9 * p.1 ^ 2) = (fun x =>  13 * x + 9 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 12 * p.2 ^ 3 + 17 * p.2 ^ 4) (x - 10, y - 8)) (10, 8) = 8 * ( 8 + 36 * (y-8) ^ 2 + 68 * (y-8) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 12 * p.2 ^ 3 + 17 * p.2 ^ 4) = (fun x =>  8 * x + 12 * x ^ 3 + 17 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 10, y - 8) (10, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  19 * p.1 + 19 * p.1 ^ 2 + 6 * p.1 ^ 4 + 19 * p.1 ^ 5 +  10 * p.2 + 20 * p.2 ^ 4 - c) (x-6, y-16) (6, 16) = 0) → (6 * ( 19 + 38 * (x-6) + 24 * (x-6) ^ 3 + 95 * (x-6) ^ 4) + 16 * ( 10 + 80 * (y-16) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  19 * p.1 + 19 * p.1 ^ 2 + 6 * p.1 ^ 4 + 19 * p.1 ^ 5) (x - 6, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 + 20 * p.2 ^ 4) (x - 6, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       19 * p.1 + 19 * p.1 ^ 2 + 6 * p.1 ^ 4 + 19 * p.1 ^ 5 +  10 * p.2 + 20 * p.2 ^ 4) (x - 6, y - 16)
      =
      fderiv ℝ (fun p =>  19 * p.1 + 19 * p.1 ^ 2 + 6 * p.1 ^ 4 + 19 * p.1 ^ 5) (x - 6, y - 16) +
      fderiv ℝ (fun p =>  10 * p.2 + 20 * p.2 ^ 4) (x - 6, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  19 * p.1 + 19 * p.1 ^ 2 + 6 * p.1 ^ 4 + 19 * p.1 ^ 5) (x - 6, y - 16)) (6, 16) = 6 * ( 19 + 38 * (x-6) + 24 * (x-6) ^ 3 + 95 * (x-6) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  19 * p.1 + 19 * p.1 ^ 2 + 6 * p.1 ^ 4 + 19 * p.1 ^ 5) = (fun x =>  19 * x + 19 * x ^ 2 + 6 * x ^ 4 + 19 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 + 20 * p.2 ^ 4) (x - 6, y - 16)) (6, 16) = 16 * ( 10 + 80 * (y-16) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 + 20 * p.2 ^ 4) = (fun x =>  10 * x + 20 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 6, y - 16) (6, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 + 6 * p.1 ^ 3 + 18 * p.1 ^ 4 + 11 * p.1 ^ 7 +  8 * p.2 + 18 * p.2 ^ 2 + 4 * p.2 ^ 3 - c) (x-17, y-4) (17, 4) = 0) → (17 * ( 2 + 18 * (x-17) ^ 2 + 72 * (x-17) ^ 3 + 77 * (x-17) ^ 6) + 4 * ( 8 + 36 * (y-4) + 12 * (y-4) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 + 6 * p.1 ^ 3 + 18 * p.1 ^ 4 + 11 * p.1 ^ 7) (x - 17, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 18 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 17, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 + 6 * p.1 ^ 3 + 18 * p.1 ^ 4 + 11 * p.1 ^ 7 +  8 * p.2 + 18 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 17, y - 4)
      =
      fderiv ℝ (fun p =>  2 * p.1 + 6 * p.1 ^ 3 + 18 * p.1 ^ 4 + 11 * p.1 ^ 7) (x - 17, y - 4) +
      fderiv ℝ (fun p =>  8 * p.2 + 18 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 17, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 + 6 * p.1 ^ 3 + 18 * p.1 ^ 4 + 11 * p.1 ^ 7) (x - 17, y - 4)) (17, 4) = 17 * ( 2 + 18 * (x-17) ^ 2 + 72 * (x-17) ^ 3 + 77 * (x-17) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 + 6 * p.1 ^ 3 + 18 * p.1 ^ 4 + 11 * p.1 ^ 7) = (fun x =>  2 * x + 6 * x ^ 3 + 18 * x ^ 4 + 11 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 18 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 17, y - 4)) (17, 4) = 4 * ( 8 + 36 * (y-4) + 12 * (y-4) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 18 * p.2 ^ 2 + 4 * p.2 ^ 3) = (fun x =>  8 * x + 18 * x ^ 2 + 4 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 4) (17, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 + 20 * p.1 ^ 2 + 15 * p.1 ^ 3 + 10 * p.1 ^ 4 + 11 * p.1 ^ 5 + 18 * p.1 ^ 6 +  6 * p.2 + 13 * p.2 ^ 5 - c) (x-11, y-7) (11, 7) = 0) → (11 * ( 4 + 40 * (x-11) + 45 * (x-11) ^ 2 + 40 * (x-11) ^ 3 + 55 * (x-11) ^ 4 + 108 * (x-11) ^ 5) + 7 * ( 6 + 65 * (y-7) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 + 20 * p.1 ^ 2 + 15 * p.1 ^ 3 + 10 * p.1 ^ 4 + 11 * p.1 ^ 5 + 18 * p.1 ^ 6) (x - 11, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  6 * p.2 + 13 * p.2 ^ 5) (x - 11, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 + 20 * p.1 ^ 2 + 15 * p.1 ^ 3 + 10 * p.1 ^ 4 + 11 * p.1 ^ 5 + 18 * p.1 ^ 6 +  6 * p.2 + 13 * p.2 ^ 5) (x - 11, y - 7)
      =
      fderiv ℝ (fun p =>  4 * p.1 + 20 * p.1 ^ 2 + 15 * p.1 ^ 3 + 10 * p.1 ^ 4 + 11 * p.1 ^ 5 + 18 * p.1 ^ 6) (x - 11, y - 7) +
      fderiv ℝ (fun p =>  6 * p.2 + 13 * p.2 ^ 5) (x - 11, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 + 20 * p.1 ^ 2 + 15 * p.1 ^ 3 + 10 * p.1 ^ 4 + 11 * p.1 ^ 5 + 18 * p.1 ^ 6) (x - 11, y - 7)) (11, 7) = 11 * ( 4 + 40 * (x-11) + 45 * (x-11) ^ 2 + 40 * (x-11) ^ 3 + 55 * (x-11) ^ 4 + 108 * (x-11) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 + 20 * p.1 ^ 2 + 15 * p.1 ^ 3 + 10 * p.1 ^ 4 + 11 * p.1 ^ 5 + 18 * p.1 ^ 6) = (fun x =>  4 * x + 20 * x ^ 2 + 15 * x ^ 3 + 10 * x ^ 4 + 11 * x ^ 5 + 18 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  6 * p.2 + 13 * p.2 ^ 5) (x - 11, y - 7)) (11, 7) = 7 * ( 6 + 65 * (y-7) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  6 * p.2 + 13 * p.2 ^ 5) = (fun x =>  6 * x + 13 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 11, y - 7) (11, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 13 * p.1 ^ 2 + 20 * p.1 ^ 3 + 12 * p.1 ^ 4 + 4 * p.1 ^ 5 + 7 * p.1 ^ 6 + 18 * p.1 ^ 7 +  7 * p.2 + 20 * p.2 ^ 2 + 8 * p.2 ^ 4 - c) (x-7, y-15) (7, 15) = 0) → (7 * ( 5 + 26 * (x-7) + 60 * (x-7) ^ 2 + 48 * (x-7) ^ 3 + 20 * (x-7) ^ 4 + 42 * (x-7) ^ 5 + 126 * (x-7) ^ 6) + 15 * ( 7 + 40 * (y-15) + 32 * (y-15) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 13 * p.1 ^ 2 + 20 * p.1 ^ 3 + 12 * p.1 ^ 4 + 4 * p.1 ^ 5 + 7 * p.1 ^ 6 + 18 * p.1 ^ 7) (x - 7, y - 15))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 20 * p.2 ^ 2 + 8 * p.2 ^ 4) (x - 7, y - 15)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 13 * p.1 ^ 2 + 20 * p.1 ^ 3 + 12 * p.1 ^ 4 + 4 * p.1 ^ 5 + 7 * p.1 ^ 6 + 18 * p.1 ^ 7 +  7 * p.2 + 20 * p.2 ^ 2 + 8 * p.2 ^ 4) (x - 7, y - 15)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 13 * p.1 ^ 2 + 20 * p.1 ^ 3 + 12 * p.1 ^ 4 + 4 * p.1 ^ 5 + 7 * p.1 ^ 6 + 18 * p.1 ^ 7) (x - 7, y - 15) +
      fderiv ℝ (fun p =>  7 * p.2 + 20 * p.2 ^ 2 + 8 * p.2 ^ 4) (x - 7, y - 15) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 13 * p.1 ^ 2 + 20 * p.1 ^ 3 + 12 * p.1 ^ 4 + 4 * p.1 ^ 5 + 7 * p.1 ^ 6 + 18 * p.1 ^ 7) (x - 7, y - 15)) (7, 15) = 7 * ( 5 + 26 * (x-7) + 60 * (x-7) ^ 2 + 48 * (x-7) ^ 3 + 20 * (x-7) ^ 4 + 42 * (x-7) ^ 5 + 126 * (x-7) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 13 * p.1 ^ 2 + 20 * p.1 ^ 3 + 12 * p.1 ^ 4 + 4 * p.1 ^ 5 + 7 * p.1 ^ 6 + 18 * p.1 ^ 7) = (fun x =>  5 * x + 13 * x ^ 2 + 20 * x ^ 3 + 12 * x ^ 4 + 4 * x ^ 5 + 7 * x ^ 6 + 18 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 20 * p.2 ^ 2 + 8 * p.2 ^ 4) (x - 7, y - 15)) (7, 15) = 15 * ( 7 + 40 * (y-15) + 32 * (y-15) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 20 * p.2 ^ 2 + 8 * p.2 ^ 4) = (fun x =>  7 * x + 20 * x ^ 2 + 8 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 15) (7, 15) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  14 * p.1 + 9 * p.1 ^ 2 +  7 * p.2 + 11 * p.2 ^ 2 + 18 * p.2 ^ 3 + 2 * p.2 ^ 4 + 10 * p.2 ^ 5 - c) (x-15, y-19) (15, 19) = 0) → (15 * ( 14 + 18 * (x-15)) + 19 * ( 7 + 22 * (y-19) + 54 * (y-19) ^ 2 + 8 * (y-19) ^ 3 + 50 * (y-19) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  14 * p.1 + 9 * p.1 ^ 2) (x - 15, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 11 * p.2 ^ 2 + 18 * p.2 ^ 3 + 2 * p.2 ^ 4 + 10 * p.2 ^ 5) (x - 15, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       14 * p.1 + 9 * p.1 ^ 2 +  7 * p.2 + 11 * p.2 ^ 2 + 18 * p.2 ^ 3 + 2 * p.2 ^ 4 + 10 * p.2 ^ 5) (x - 15, y - 19)
      =
      fderiv ℝ (fun p =>  14 * p.1 + 9 * p.1 ^ 2) (x - 15, y - 19) +
      fderiv ℝ (fun p =>  7 * p.2 + 11 * p.2 ^ 2 + 18 * p.2 ^ 3 + 2 * p.2 ^ 4 + 10 * p.2 ^ 5) (x - 15, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  14 * p.1 + 9 * p.1 ^ 2) (x - 15, y - 19)) (15, 19) = 15 * ( 14 + 18 * (x-15))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  14 * p.1 + 9 * p.1 ^ 2) = (fun x =>  14 * x + 9 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 11 * p.2 ^ 2 + 18 * p.2 ^ 3 + 2 * p.2 ^ 4 + 10 * p.2 ^ 5) (x - 15, y - 19)) (15, 19) = 19 * ( 7 + 22 * (y-19) + 54 * (y-19) ^ 2 + 8 * (y-19) ^ 3 + 50 * (y-19) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 11 * p.2 ^ 2 + 18 * p.2 ^ 3 + 2 * p.2 ^ 4 + 10 * p.2 ^ 5) = (fun x =>  7 * x + 11 * x ^ 2 + 18 * x ^ 3 + 2 * x ^ 4 + 10 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 19) (15, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  11 * p.1 + 14 * p.1 ^ 2 + 7 * p.1 ^ 3 +  17 * p.2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 15 * p.2 ^ 6 - c) (x-12, y-18) (12, 18) = 0) → (12 * ( 11 + 28 * (x-12) + 21 * (x-12) ^ 2) + 18 * ( 17 + 9 * (y-18) ^ 2 + 15 * (y-18) ^ 4 + 90 * (y-18) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  11 * p.1 + 14 * p.1 ^ 2 + 7 * p.1 ^ 3) (x - 12, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  17 * p.2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 12, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       11 * p.1 + 14 * p.1 ^ 2 + 7 * p.1 ^ 3 +  17 * p.2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 12, y - 18)
      =
      fderiv ℝ (fun p =>  11 * p.1 + 14 * p.1 ^ 2 + 7 * p.1 ^ 3) (x - 12, y - 18) +
      fderiv ℝ (fun p =>  17 * p.2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 12, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  11 * p.1 + 14 * p.1 ^ 2 + 7 * p.1 ^ 3) (x - 12, y - 18)) (12, 18) = 12 * ( 11 + 28 * (x-12) + 21 * (x-12) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  11 * p.1 + 14 * p.1 ^ 2 + 7 * p.1 ^ 3) = (fun x =>  11 * x + 14 * x ^ 2 + 7 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  17 * p.2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 12, y - 18)) (12, 18) = 18 * ( 17 + 9 * (y-18) ^ 2 + 15 * (y-18) ^ 4 + 90 * (y-18) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  17 * p.2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 15 * p.2 ^ 6) = (fun x =>  17 * x + 3 * x ^ 3 + 3 * x ^ 5 + 15 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 18) (12, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 19 * p.1 ^ 2 +  14 * p.2 + 5 * p.2 ^ 2 - c) (x-3, y-11) (3, 11) = 0) → (3 * ( 5 + 38 * (x-3)) + 11 * ( 14 + 10 * (y-11)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 19 * p.1 ^ 2) (x - 3, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 5 * p.2 ^ 2) (x - 3, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 19 * p.1 ^ 2 +  14 * p.2 + 5 * p.2 ^ 2) (x - 3, y - 11)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 19 * p.1 ^ 2) (x - 3, y - 11) +
      fderiv ℝ (fun p =>  14 * p.2 + 5 * p.2 ^ 2) (x - 3, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 19 * p.1 ^ 2) (x - 3, y - 11)) (3, 11) = 3 * ( 5 + 38 * (x-3))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 19 * p.1 ^ 2) = (fun x =>  5 * x + 19 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 5 * p.2 ^ 2) (x - 3, y - 11)) (3, 11) = 11 * ( 14 + 10 * (y-11))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 5 * p.2 ^ 2) = (fun x =>  14 * x + 5 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 11) (3, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 16 * p.1 ^ 2 + 8 * p.1 ^ 3 + 14 * p.1 ^ 4 + 8 * p.1 ^ 5 + 10 * p.1 ^ 6 +  3 * p.2 + 5 * p.2 ^ 2 - c) (x-20, y-6) (20, 6) = 0) → (20 * ( 8 + 32 * (x-20) + 24 * (x-20) ^ 2 + 56 * (x-20) ^ 3 + 40 * (x-20) ^ 4 + 60 * (x-20) ^ 5) + 6 * ( 3 + 10 * (y-6)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 16 * p.1 ^ 2 + 8 * p.1 ^ 3 + 14 * p.1 ^ 4 + 8 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 20, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  3 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 16 * p.1 ^ 2 + 8 * p.1 ^ 3 + 14 * p.1 ^ 4 + 8 * p.1 ^ 5 + 10 * p.1 ^ 6 +  3 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 6)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 16 * p.1 ^ 2 + 8 * p.1 ^ 3 + 14 * p.1 ^ 4 + 8 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 20, y - 6) +
      fderiv ℝ (fun p =>  3 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 16 * p.1 ^ 2 + 8 * p.1 ^ 3 + 14 * p.1 ^ 4 + 8 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 20, y - 6)) (20, 6) = 20 * ( 8 + 32 * (x-20) + 24 * (x-20) ^ 2 + 56 * (x-20) ^ 3 + 40 * (x-20) ^ 4 + 60 * (x-20) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 16 * p.1 ^ 2 + 8 * p.1 ^ 3 + 14 * p.1 ^ 4 + 8 * p.1 ^ 5 + 10 * p.1 ^ 6) = (fun x =>  8 * x + 16 * x ^ 2 + 8 * x ^ 3 + 14 * x ^ 4 + 8 * x ^ 5 + 10 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  3 * p.2 + 5 * p.2 ^ 2) (x - 20, y - 6)) (20, 6) = 6 * ( 3 + 10 * (y-6))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  3 * p.2 + 5 * p.2 ^ 2) = (fun x =>  3 * x + 5 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 6) (20, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 + 9 * p.1 ^ 5 +  12 * p.2 + 4 * p.2 ^ 4 + 17 * p.2 ^ 5 - c) (x-2, y-5) (2, 5) = 0) → (2 * ( 4 + 45 * (x-2) ^ 4) + 5 * ( 12 + 16 * (y-5) ^ 3 + 85 * (y-5) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 + 9 * p.1 ^ 5) (x - 2, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 4 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 2, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 + 9 * p.1 ^ 5 +  12 * p.2 + 4 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 2, y - 5)
      =
      fderiv ℝ (fun p =>  4 * p.1 + 9 * p.1 ^ 5) (x - 2, y - 5) +
      fderiv ℝ (fun p =>  12 * p.2 + 4 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 2, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 + 9 * p.1 ^ 5) (x - 2, y - 5)) (2, 5) = 2 * ( 4 + 45 * (x-2) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 + 9 * p.1 ^ 5) = (fun x =>  4 * x + 9 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 4 * p.2 ^ 4 + 17 * p.2 ^ 5) (x - 2, y - 5)) (2, 5) = 5 * ( 12 + 16 * (y-5) ^ 3 + 85 * (y-5) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 4 * p.2 ^ 4 + 17 * p.2 ^ 5) = (fun x =>  12 * x + 4 * x ^ 4 + 17 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 2, y - 5) (2, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 ^ 2 + 6 * p.1 ^ 3 +  19 * p.2 ^ 2 + 19 * p.2 ^ 3 + 10 * p.2 ^ 4 - c) (x-17, y-6) (17, 6) = 0) → (17 * ( 30 * (x-17) + 18 * (x-17) ^ 2) + 6 * ( 38 * (y-6) + 57 * (y-6) ^ 2 + 40 * (y-6) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 ^ 2 + 6 * p.1 ^ 3) (x - 17, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 ^ 2 + 19 * p.2 ^ 3 + 10 * p.2 ^ 4) (x - 17, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 ^ 2 + 6 * p.1 ^ 3 +  19 * p.2 ^ 2 + 19 * p.2 ^ 3 + 10 * p.2 ^ 4) (x - 17, y - 6)
      =
      fderiv ℝ (fun p =>  15 * p.1 ^ 2 + 6 * p.1 ^ 3) (x - 17, y - 6) +
      fderiv ℝ (fun p =>  19 * p.2 ^ 2 + 19 * p.2 ^ 3 + 10 * p.2 ^ 4) (x - 17, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 ^ 2 + 6 * p.1 ^ 3) (x - 17, y - 6)) (17, 6) = 17 * ( 30 * (x-17) + 18 * (x-17) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 ^ 2 + 6 * p.1 ^ 3) = (fun x =>  15 * x ^ 2 + 6 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 ^ 2 + 19 * p.2 ^ 3 + 10 * p.2 ^ 4) (x - 17, y - 6)) (17, 6) = 6 * ( 38 * (y-6) + 57 * (y-6) ^ 2 + 40 * (y-6) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 ^ 2 + 19 * p.2 ^ 3 + 10 * p.2 ^ 4) = (fun x =>  19 * x ^ 2 + 19 * x ^ 3 + 10 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 6) (17, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 12 * p.1 ^ 2 + 6 * p.1 ^ 3 + 13 * p.1 ^ 4 +  9 * p.2 + 6 * p.2 ^ 2 + 19 * p.2 ^ 3 + 16 * p.2 ^ 4 + 16 * p.2 ^ 5 + 12 * p.2 ^ 6 + 18 * p.2 ^ 7 - c) (x-3, y-4) (3, 4) = 0) → (3 * ( 16 + 24 * (x-3) + 18 * (x-3) ^ 2 + 52 * (x-3) ^ 3) + 4 * ( 9 + 12 * (y-4) + 57 * (y-4) ^ 2 + 64 * (y-4) ^ 3 + 80 * (y-4) ^ 4 + 72 * (y-4) ^ 5 + 126 * (y-4) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 12 * p.1 ^ 2 + 6 * p.1 ^ 3 + 13 * p.1 ^ 4) (x - 3, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 + 6 * p.2 ^ 2 + 19 * p.2 ^ 3 + 16 * p.2 ^ 4 + 16 * p.2 ^ 5 + 12 * p.2 ^ 6 + 18 * p.2 ^ 7) (x - 3, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 12 * p.1 ^ 2 + 6 * p.1 ^ 3 + 13 * p.1 ^ 4 +  9 * p.2 + 6 * p.2 ^ 2 + 19 * p.2 ^ 3 + 16 * p.2 ^ 4 + 16 * p.2 ^ 5 + 12 * p.2 ^ 6 + 18 * p.2 ^ 7) (x - 3, y - 4)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 12 * p.1 ^ 2 + 6 * p.1 ^ 3 + 13 * p.1 ^ 4) (x - 3, y - 4) +
      fderiv ℝ (fun p =>  9 * p.2 + 6 * p.2 ^ 2 + 19 * p.2 ^ 3 + 16 * p.2 ^ 4 + 16 * p.2 ^ 5 + 12 * p.2 ^ 6 + 18 * p.2 ^ 7) (x - 3, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 12 * p.1 ^ 2 + 6 * p.1 ^ 3 + 13 * p.1 ^ 4) (x - 3, y - 4)) (3, 4) = 3 * ( 16 + 24 * (x-3) + 18 * (x-3) ^ 2 + 52 * (x-3) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 12 * p.1 ^ 2 + 6 * p.1 ^ 3 + 13 * p.1 ^ 4) = (fun x =>  16 * x + 12 * x ^ 2 + 6 * x ^ 3 + 13 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 + 6 * p.2 ^ 2 + 19 * p.2 ^ 3 + 16 * p.2 ^ 4 + 16 * p.2 ^ 5 + 12 * p.2 ^ 6 + 18 * p.2 ^ 7) (x - 3, y - 4)) (3, 4) = 4 * ( 9 + 12 * (y-4) + 57 * (y-4) ^ 2 + 64 * (y-4) ^ 3 + 80 * (y-4) ^ 4 + 72 * (y-4) ^ 5 + 126 * (y-4) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 + 6 * p.2 ^ 2 + 19 * p.2 ^ 3 + 16 * p.2 ^ 4 + 16 * p.2 ^ 5 + 12 * p.2 ^ 6 + 18 * p.2 ^ 7) = (fun x =>  9 * x + 6 * x ^ 2 + 19 * x ^ 3 + 16 * x ^ 4 + 16 * x ^ 5 + 12 * x ^ 6 + 18 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 4) (3, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  14 * p.1 ^ 3 + 2 * p.1 ^ 5 +  4 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 - c) (x-3, y-2) (3, 2) = 0) → (3 * ( 42 * (x-3) ^ 2 + 10 * (x-3) ^ 4) + 2 * ( 4 + 34 * (y-2) + 9 * (y-2) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  14 * p.1 ^ 3 + 2 * p.1 ^ 5) (x - 3, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3) (x - 3, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       14 * p.1 ^ 3 + 2 * p.1 ^ 5 +  4 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3) (x - 3, y - 2)
      =
      fderiv ℝ (fun p =>  14 * p.1 ^ 3 + 2 * p.1 ^ 5) (x - 3, y - 2) +
      fderiv ℝ (fun p =>  4 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3) (x - 3, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  14 * p.1 ^ 3 + 2 * p.1 ^ 5) (x - 3, y - 2)) (3, 2) = 3 * ( 42 * (x-3) ^ 2 + 10 * (x-3) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  14 * p.1 ^ 3 + 2 * p.1 ^ 5) = (fun x =>  14 * x ^ 3 + 2 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3) (x - 3, y - 2)) (3, 2) = 2 * ( 4 + 34 * (y-2) + 9 * (y-2) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3) = (fun x =>  4 * x + 17 * x ^ 2 + 3 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 2) (3, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 + 6 * p.1 ^ 2 + 2 * p.1 ^ 3 +  8 * p.2 + 13 * p.2 ^ 2 - c) (x-10, y-7) (10, 7) = 0) → (10 * ( 7 + 12 * (x-10) + 6 * (x-10) ^ 2) + 7 * ( 8 + 26 * (y-7)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 + 6 * p.1 ^ 2 + 2 * p.1 ^ 3) (x - 10, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 13 * p.2 ^ 2) (x - 10, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 + 6 * p.1 ^ 2 + 2 * p.1 ^ 3 +  8 * p.2 + 13 * p.2 ^ 2) (x - 10, y - 7)
      =
      fderiv ℝ (fun p =>  7 * p.1 + 6 * p.1 ^ 2 + 2 * p.1 ^ 3) (x - 10, y - 7) +
      fderiv ℝ (fun p =>  8 * p.2 + 13 * p.2 ^ 2) (x - 10, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 + 6 * p.1 ^ 2 + 2 * p.1 ^ 3) (x - 10, y - 7)) (10, 7) = 10 * ( 7 + 12 * (x-10) + 6 * (x-10) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 + 6 * p.1 ^ 2 + 2 * p.1 ^ 3) = (fun x =>  7 * x + 6 * x ^ 2 + 2 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 13 * p.2 ^ 2) (x - 10, y - 7)) (10, 7) = 7 * ( 8 + 26 * (y-7))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 13 * p.2 ^ 2) = (fun x =>  8 * x + 13 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 10, y - 7) (10, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 8 * p.1 ^ 2 + 12 * p.1 ^ 3 + 13 * p.1 ^ 4 +  16 * p.2 + 13 * p.2 ^ 2 + 13 * p.2 ^ 3 + 4 * p.2 ^ 4 - c) (x-20, y-3) (20, 3) = 0) → (20 * ( 5 + 16 * (x-20) + 36 * (x-20) ^ 2 + 52 * (x-20) ^ 3) + 3 * ( 16 + 26 * (y-3) + 39 * (y-3) ^ 2 + 16 * (y-3) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 8 * p.1 ^ 2 + 12 * p.1 ^ 3 + 13 * p.1 ^ 4) (x - 20, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  16 * p.2 + 13 * p.2 ^ 2 + 13 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 20, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 8 * p.1 ^ 2 + 12 * p.1 ^ 3 + 13 * p.1 ^ 4 +  16 * p.2 + 13 * p.2 ^ 2 + 13 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 20, y - 3)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 8 * p.1 ^ 2 + 12 * p.1 ^ 3 + 13 * p.1 ^ 4) (x - 20, y - 3) +
      fderiv ℝ (fun p =>  16 * p.2 + 13 * p.2 ^ 2 + 13 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 20, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 8 * p.1 ^ 2 + 12 * p.1 ^ 3 + 13 * p.1 ^ 4) (x - 20, y - 3)) (20, 3) = 20 * ( 5 + 16 * (x-20) + 36 * (x-20) ^ 2 + 52 * (x-20) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 8 * p.1 ^ 2 + 12 * p.1 ^ 3 + 13 * p.1 ^ 4) = (fun x =>  5 * x + 8 * x ^ 2 + 12 * x ^ 3 + 13 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  16 * p.2 + 13 * p.2 ^ 2 + 13 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 20, y - 3)) (20, 3) = 3 * ( 16 + 26 * (y-3) + 39 * (y-3) ^ 2 + 16 * (y-3) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  16 * p.2 + 13 * p.2 ^ 2 + 13 * p.2 ^ 3 + 4 * p.2 ^ 4) = (fun x =>  16 * x + 13 * x ^ 2 + 13 * x ^ 3 + 4 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 3) (20, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 ^ 2 + 13 * p.1 ^ 4 +  12 * p.2 ^ 4 + 15 * p.2 ^ 5 + 3 * p.2 ^ 6 - c) (x-12, y-16) (12, 16) = 0) → (12 * ( 18 * (x-12) + 52 * (x-12) ^ 3) + 16 * ( 48 * (y-16) ^ 3 + 75 * (y-16) ^ 4 + 18 * (y-16) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 ^ 2 + 13 * p.1 ^ 4) (x - 12, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 ^ 4 + 15 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 12, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 ^ 2 + 13 * p.1 ^ 4 +  12 * p.2 ^ 4 + 15 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 12, y - 16)
      =
      fderiv ℝ (fun p =>  9 * p.1 ^ 2 + 13 * p.1 ^ 4) (x - 12, y - 16) +
      fderiv ℝ (fun p =>  12 * p.2 ^ 4 + 15 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 12, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 ^ 2 + 13 * p.1 ^ 4) (x - 12, y - 16)) (12, 16) = 12 * ( 18 * (x-12) + 52 * (x-12) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 ^ 2 + 13 * p.1 ^ 4) = (fun x =>  9 * x ^ 2 + 13 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 ^ 4 + 15 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 12, y - 16)) (12, 16) = 16 * ( 48 * (y-16) ^ 3 + 75 * (y-16) ^ 4 + 18 * (y-16) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 ^ 4 + 15 * p.2 ^ 5 + 3 * p.2 ^ 6) = (fun x =>  12 * x ^ 4 + 15 * x ^ 5 + 3 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 16) (12, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 + 9 * p.1 ^ 2 +  20 * p.2 + 11 * p.2 ^ 3 + 7 * p.2 ^ 4 + 4 * p.2 ^ 5 - c) (x-4, y-6) (4, 6) = 0) → (4 * ( 20 + 18 * (x-4)) + 6 * ( 20 + 33 * (y-6) ^ 2 + 28 * (y-6) ^ 3 + 20 * (y-6) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 + 9 * p.1 ^ 2) (x - 4, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 11 * p.2 ^ 3 + 7 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 4, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 + 9 * p.1 ^ 2 +  20 * p.2 + 11 * p.2 ^ 3 + 7 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 4, y - 6)
      =
      fderiv ℝ (fun p =>  20 * p.1 + 9 * p.1 ^ 2) (x - 4, y - 6) +
      fderiv ℝ (fun p =>  20 * p.2 + 11 * p.2 ^ 3 + 7 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 4, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 + 9 * p.1 ^ 2) (x - 4, y - 6)) (4, 6) = 4 * ( 20 + 18 * (x-4))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 + 9 * p.1 ^ 2) = (fun x =>  20 * x + 9 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 11 * p.2 ^ 3 + 7 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 4, y - 6)) (4, 6) = 6 * ( 20 + 33 * (y-6) ^ 2 + 28 * (y-6) ^ 3 + 20 * (y-6) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 11 * p.2 ^ 3 + 7 * p.2 ^ 4 + 4 * p.2 ^ 5) = (fun x =>  20 * x + 11 * x ^ 3 + 7 * x ^ 4 + 4 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 4, y - 6) (4, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  17 * p.1 + 3 * p.1 ^ 4 +  18 * p.2 ^ 3 + 12 * p.2 ^ 4 - c) (x-14, y-11) (14, 11) = 0) → (14 * ( 17 + 12 * (x-14) ^ 3) + 11 * ( 54 * (y-11) ^ 2 + 48 * (y-11) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  17 * p.1 + 3 * p.1 ^ 4) (x - 14, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 14, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       17 * p.1 + 3 * p.1 ^ 4 +  18 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 14, y - 11)
      =
      fderiv ℝ (fun p =>  17 * p.1 + 3 * p.1 ^ 4) (x - 14, y - 11) +
      fderiv ℝ (fun p =>  18 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 14, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  17 * p.1 + 3 * p.1 ^ 4) (x - 14, y - 11)) (14, 11) = 14 * ( 17 + 12 * (x-14) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  17 * p.1 + 3 * p.1 ^ 4) = (fun x =>  17 * x + 3 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 ^ 3 + 12 * p.2 ^ 4) (x - 14, y - 11)) (14, 11) = 11 * ( 54 * (y-11) ^ 2 + 48 * (y-11) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 ^ 3 + 12 * p.2 ^ 4) = (fun x =>  18 * x ^ 3 + 12 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 14, y - 11) (14, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 ^ 2 + 2 * p.1 ^ 3 + 18 * p.1 ^ 4 +  11 * p.2 + 4 * p.2 ^ 2 - c) (x-4, y-2) (4, 2) = 0) → (4 * ( 30 * (x-4) + 6 * (x-4) ^ 2 + 72 * (x-4) ^ 3) + 2 * ( 11 + 8 * (y-2)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 ^ 2 + 2 * p.1 ^ 3 + 18 * p.1 ^ 4) (x - 4, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 + 4 * p.2 ^ 2) (x - 4, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 ^ 2 + 2 * p.1 ^ 3 + 18 * p.1 ^ 4 +  11 * p.2 + 4 * p.2 ^ 2) (x - 4, y - 2)
      =
      fderiv ℝ (fun p =>  15 * p.1 ^ 2 + 2 * p.1 ^ 3 + 18 * p.1 ^ 4) (x - 4, y - 2) +
      fderiv ℝ (fun p =>  11 * p.2 + 4 * p.2 ^ 2) (x - 4, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 ^ 2 + 2 * p.1 ^ 3 + 18 * p.1 ^ 4) (x - 4, y - 2)) (4, 2) = 4 * ( 30 * (x-4) + 6 * (x-4) ^ 2 + 72 * (x-4) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 ^ 2 + 2 * p.1 ^ 3 + 18 * p.1 ^ 4) = (fun x =>  15 * x ^ 2 + 2 * x ^ 3 + 18 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 + 4 * p.2 ^ 2) (x - 4, y - 2)) (4, 2) = 2 * ( 11 + 8 * (y-2))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 + 4 * p.2 ^ 2) = (fun x =>  11 * x + 4 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 4, y - 2) (4, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 ^ 3 + 5 * p.1 ^ 4 +  15 * p.2 ^ 3 + 20 * p.2 ^ 4 - c) (x-19, y-11) (19, 11) = 0) → (19 * ( 12 * (x-19) ^ 2 + 20 * (x-19) ^ 3) + 11 * ( 45 * (y-11) ^ 2 + 80 * (y-11) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 ^ 3 + 5 * p.1 ^ 4) (x - 19, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 19, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 ^ 3 + 5 * p.1 ^ 4 +  15 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 19, y - 11)
      =
      fderiv ℝ (fun p =>  4 * p.1 ^ 3 + 5 * p.1 ^ 4) (x - 19, y - 11) +
      fderiv ℝ (fun p =>  15 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 19, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 ^ 3 + 5 * p.1 ^ 4) (x - 19, y - 11)) (19, 11) = 19 * ( 12 * (x-19) ^ 2 + 20 * (x-19) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 ^ 3 + 5 * p.1 ^ 4) = (fun x =>  4 * x ^ 3 + 5 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 19, y - 11)) (19, 11) = 11 * ( 45 * (y-11) ^ 2 + 80 * (y-11) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 ^ 3 + 20 * p.2 ^ 4) = (fun x =>  15 * x ^ 3 + 20 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 11) (19, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  10 * p.1 + 5 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 +  15 * p.2 + 17 * p.2 ^ 2 + 15 * p.2 ^ 3 + 5 * p.2 ^ 6 - c) (x-18, y-6) (18, 6) = 0) → (18 * ( 10 + 15 * (x-18) ^ 2 + 64 * (x-18) ^ 3 + 30 * (x-18) ^ 4) + 6 * ( 15 + 34 * (y-6) + 45 * (y-6) ^ 2 + 30 * (y-6) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  10 * p.1 + 5 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5) (x - 18, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 + 17 * p.2 ^ 2 + 15 * p.2 ^ 3 + 5 * p.2 ^ 6) (x - 18, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       10 * p.1 + 5 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5 +  15 * p.2 + 17 * p.2 ^ 2 + 15 * p.2 ^ 3 + 5 * p.2 ^ 6) (x - 18, y - 6)
      =
      fderiv ℝ (fun p =>  10 * p.1 + 5 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5) (x - 18, y - 6) +
      fderiv ℝ (fun p =>  15 * p.2 + 17 * p.2 ^ 2 + 15 * p.2 ^ 3 + 5 * p.2 ^ 6) (x - 18, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  10 * p.1 + 5 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5) (x - 18, y - 6)) (18, 6) = 18 * ( 10 + 15 * (x-18) ^ 2 + 64 * (x-18) ^ 3 + 30 * (x-18) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  10 * p.1 + 5 * p.1 ^ 3 + 16 * p.1 ^ 4 + 6 * p.1 ^ 5) = (fun x =>  10 * x + 5 * x ^ 3 + 16 * x ^ 4 + 6 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 + 17 * p.2 ^ 2 + 15 * p.2 ^ 3 + 5 * p.2 ^ 6) (x - 18, y - 6)) (18, 6) = 6 * ( 15 + 34 * (y-6) + 45 * (y-6) ^ 2 + 30 * (y-6) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 + 17 * p.2 ^ 2 + 15 * p.2 ^ 3 + 5 * p.2 ^ 6) = (fun x =>  15 * x + 17 * x ^ 2 + 15 * x ^ 3 + 5 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 6) (18, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 9 * p.1 ^ 2 + 6 * p.1 ^ 3 + 20 * p.1 ^ 4 +  20 * p.2 + 2 * p.2 ^ 2 - c) (x-9, y-14) (9, 14) = 0) → (9 * ( 5 + 18 * (x-9) + 18 * (x-9) ^ 2 + 80 * (x-9) ^ 3) + 14 * ( 20 + 4 * (y-14)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 9 * p.1 ^ 2 + 6 * p.1 ^ 3 + 20 * p.1 ^ 4) (x - 9, y - 14))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 2 * p.2 ^ 2) (x - 9, y - 14)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 9 * p.1 ^ 2 + 6 * p.1 ^ 3 + 20 * p.1 ^ 4 +  20 * p.2 + 2 * p.2 ^ 2) (x - 9, y - 14)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 9 * p.1 ^ 2 + 6 * p.1 ^ 3 + 20 * p.1 ^ 4) (x - 9, y - 14) +
      fderiv ℝ (fun p =>  20 * p.2 + 2 * p.2 ^ 2) (x - 9, y - 14) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 9 * p.1 ^ 2 + 6 * p.1 ^ 3 + 20 * p.1 ^ 4) (x - 9, y - 14)) (9, 14) = 9 * ( 5 + 18 * (x-9) + 18 * (x-9) ^ 2 + 80 * (x-9) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 9 * p.1 ^ 2 + 6 * p.1 ^ 3 + 20 * p.1 ^ 4) = (fun x =>  5 * x + 9 * x ^ 2 + 6 * x ^ 3 + 20 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 2 * p.2 ^ 2) (x - 9, y - 14)) (9, 14) = 14 * ( 20 + 4 * (y-14))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 2 * p.2 ^ 2) = (fun x =>  20 * x + 2 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 14) (9, 14) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 + 14 * p.1 ^ 2 +  12 * p.2 + 9 * p.2 ^ 2 + 4 * p.2 ^ 3 - c) (x-5, y-8) (5, 8) = 0) → (5 * ( 7 + 28 * (x-5)) + 8 * ( 12 + 18 * (y-8) + 12 * (y-8) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 + 14 * p.1 ^ 2) (x - 5, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 5, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 + 14 * p.1 ^ 2 +  12 * p.2 + 9 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 5, y - 8)
      =
      fderiv ℝ (fun p =>  7 * p.1 + 14 * p.1 ^ 2) (x - 5, y - 8) +
      fderiv ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 5, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 + 14 * p.1 ^ 2) (x - 5, y - 8)) (5, 8) = 5 * ( 7 + 28 * (x-5))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 + 14 * p.1 ^ 2) = (fun x =>  7 * x + 14 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 4 * p.2 ^ 3) (x - 5, y - 8)) (5, 8) = 8 * ( 12 + 18 * (y-8) + 12 * (y-8) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 9 * p.2 ^ 2 + 4 * p.2 ^ 3) = (fun x =>  12 * x + 9 * x ^ 2 + 4 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 5, y - 8) (5, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 4 * p.1 ^ 2 +  20 * p.2 + 15 * p.2 ^ 2 + 14 * p.2 ^ 4 + 2 * p.2 ^ 5 - c) (x-12, y-9) (12, 9) = 0) → (12 * ( 12 + 8 * (x-12)) + 9 * ( 20 + 30 * (y-9) + 56 * (y-9) ^ 3 + 10 * (y-9) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 4 * p.1 ^ 2) (x - 12, y - 9))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 14 * p.2 ^ 4 + 2 * p.2 ^ 5) (x - 12, y - 9)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 4 * p.1 ^ 2 +  20 * p.2 + 15 * p.2 ^ 2 + 14 * p.2 ^ 4 + 2 * p.2 ^ 5) (x - 12, y - 9)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 4 * p.1 ^ 2) (x - 12, y - 9) +
      fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 14 * p.2 ^ 4 + 2 * p.2 ^ 5) (x - 12, y - 9) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 4 * p.1 ^ 2) (x - 12, y - 9)) (12, 9) = 12 * ( 12 + 8 * (x-12))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 4 * p.1 ^ 2) = (fun x =>  12 * x + 4 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 14 * p.2 ^ 4 + 2 * p.2 ^ 5) (x - 12, y - 9)) (12, 9) = 9 * ( 20 + 30 * (y-9) + 56 * (y-9) ^ 3 + 10 * (y-9) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 15 * p.2 ^ 2 + 14 * p.2 ^ 4 + 2 * p.2 ^ 5) = (fun x =>  20 * x + 15 * x ^ 2 + 14 * x ^ 4 + 2 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 9) (12, 9) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 ^ 3 + 14 * p.1 ^ 6 +  20 * p.2 + 15 * p.2 ^ 2 - c) (x-9, y-3) (9, 3) = 0) → (9 * ( 45 * (x-9) ^ 2 + 84 * (x-9) ^ 5) + 3 * ( 20 + 30 * (y-3)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 ^ 3 + 14 * p.1 ^ 6) (x - 9, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2) (x - 9, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 ^ 3 + 14 * p.1 ^ 6 +  20 * p.2 + 15 * p.2 ^ 2) (x - 9, y - 3)
      =
      fderiv ℝ (fun p =>  15 * p.1 ^ 3 + 14 * p.1 ^ 6) (x - 9, y - 3) +
      fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2) (x - 9, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 ^ 3 + 14 * p.1 ^ 6) (x - 9, y - 3)) (9, 3) = 9 * ( 45 * (x-9) ^ 2 + 84 * (x-9) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 ^ 3 + 14 * p.1 ^ 6) = (fun x =>  15 * x ^ 3 + 14 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2) (x - 9, y - 3)) (9, 3) = 3 * ( 20 + 30 * (y-3))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 15 * p.2 ^ 2) = (fun x =>  20 * x + 15 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 3) (9, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  3 * p.1 ^ 2 + 7 * p.1 ^ 3 +  12 * p.2 + 19 * p.2 ^ 2 + 6 * p.2 ^ 3 + 9 * p.2 ^ 5 - c) (x-3, y-11) (3, 11) = 0) → (3 * ( 6 * (x-3) + 21 * (x-3) ^ 2) + 11 * ( 12 + 38 * (y-11) + 18 * (y-11) ^ 2 + 45 * (y-11) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  3 * p.1 ^ 2 + 7 * p.1 ^ 3) (x - 3, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 19 * p.2 ^ 2 + 6 * p.2 ^ 3 + 9 * p.2 ^ 5) (x - 3, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       3 * p.1 ^ 2 + 7 * p.1 ^ 3 +  12 * p.2 + 19 * p.2 ^ 2 + 6 * p.2 ^ 3 + 9 * p.2 ^ 5) (x - 3, y - 11)
      =
      fderiv ℝ (fun p =>  3 * p.1 ^ 2 + 7 * p.1 ^ 3) (x - 3, y - 11) +
      fderiv ℝ (fun p =>  12 * p.2 + 19 * p.2 ^ 2 + 6 * p.2 ^ 3 + 9 * p.2 ^ 5) (x - 3, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  3 * p.1 ^ 2 + 7 * p.1 ^ 3) (x - 3, y - 11)) (3, 11) = 3 * ( 6 * (x-3) + 21 * (x-3) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  3 * p.1 ^ 2 + 7 * p.1 ^ 3) = (fun x =>  3 * x ^ 2 + 7 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 19 * p.2 ^ 2 + 6 * p.2 ^ 3 + 9 * p.2 ^ 5) (x - 3, y - 11)) (3, 11) = 11 * ( 12 + 38 * (y-11) + 18 * (y-11) ^ 2 + 45 * (y-11) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 19 * p.2 ^ 2 + 6 * p.2 ^ 3 + 9 * p.2 ^ 5) = (fun x =>  12 * x + 19 * x ^ 2 + 6 * x ^ 3 + 9 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 11) (3, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 + 3 * p.1 ^ 5 + 10 * p.1 ^ 6 +  4 * p.2 + 5 * p.2 ^ 2 + 3 * p.2 ^ 3 + 20 * p.2 ^ 4 - c) (x-18, y-7) (18, 7) = 0) → (18 * ( 9 + 15 * (x-18) ^ 4 + 60 * (x-18) ^ 5) + 7 * ( 4 + 10 * (y-7) + 9 * (y-7) ^ 2 + 80 * (y-7) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 + 3 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 18, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 5 * p.2 ^ 2 + 3 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 18, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 + 3 * p.1 ^ 5 + 10 * p.1 ^ 6 +  4 * p.2 + 5 * p.2 ^ 2 + 3 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 18, y - 7)
      =
      fderiv ℝ (fun p =>  9 * p.1 + 3 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 18, y - 7) +
      fderiv ℝ (fun p =>  4 * p.2 + 5 * p.2 ^ 2 + 3 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 18, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 + 3 * p.1 ^ 5 + 10 * p.1 ^ 6) (x - 18, y - 7)) (18, 7) = 18 * ( 9 + 15 * (x-18) ^ 4 + 60 * (x-18) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 + 3 * p.1 ^ 5 + 10 * p.1 ^ 6) = (fun x =>  9 * x + 3 * x ^ 5 + 10 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 5 * p.2 ^ 2 + 3 * p.2 ^ 3 + 20 * p.2 ^ 4) (x - 18, y - 7)) (18, 7) = 7 * ( 4 + 10 * (y-7) + 9 * (y-7) ^ 2 + 80 * (y-7) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 5 * p.2 ^ 2 + 3 * p.2 ^ 3 + 20 * p.2 ^ 4) = (fun x =>  4 * x + 5 * x ^ 2 + 3 * x ^ 3 + 20 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 7) (18, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 20 * p.1 ^ 2 + 9 * p.1 ^ 3 + 12 * p.1 ^ 5 +  15 * p.2 ^ 3 + 3 * p.2 ^ 4 - c) (x-9, y-20) (9, 20) = 0) → (9 * ( 16 + 40 * (x-9) + 27 * (x-9) ^ 2 + 60 * (x-9) ^ 4) + 20 * ( 45 * (y-20) ^ 2 + 12 * (y-20) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 20 * p.1 ^ 2 + 9 * p.1 ^ 3 + 12 * p.1 ^ 5) (x - 9, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 ^ 3 + 3 * p.2 ^ 4) (x - 9, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 20 * p.1 ^ 2 + 9 * p.1 ^ 3 + 12 * p.1 ^ 5 +  15 * p.2 ^ 3 + 3 * p.2 ^ 4) (x - 9, y - 20)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 20 * p.1 ^ 2 + 9 * p.1 ^ 3 + 12 * p.1 ^ 5) (x - 9, y - 20) +
      fderiv ℝ (fun p =>  15 * p.2 ^ 3 + 3 * p.2 ^ 4) (x - 9, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 20 * p.1 ^ 2 + 9 * p.1 ^ 3 + 12 * p.1 ^ 5) (x - 9, y - 20)) (9, 20) = 9 * ( 16 + 40 * (x-9) + 27 * (x-9) ^ 2 + 60 * (x-9) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 20 * p.1 ^ 2 + 9 * p.1 ^ 3 + 12 * p.1 ^ 5) = (fun x =>  16 * x + 20 * x ^ 2 + 9 * x ^ 3 + 12 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 ^ 3 + 3 * p.2 ^ 4) (x - 9, y - 20)) (9, 20) = 20 * ( 45 * (y-20) ^ 2 + 12 * (y-20) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 ^ 3 + 3 * p.2 ^ 4) = (fun x =>  15 * x ^ 3 + 3 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 20) (9, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 9 * p.1 ^ 2 + 18 * p.1 ^ 4 + 3 * p.1 ^ 5 +  17 * p.2 + 9 * p.2 ^ 2 - c) (x-9, y-3) (9, 3) = 0) → (9 * ( 16 + 18 * (x-9) + 72 * (x-9) ^ 3 + 15 * (x-9) ^ 4) + 3 * ( 17 + 18 * (y-3)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 9 * p.1 ^ 2 + 18 * p.1 ^ 4 + 3 * p.1 ^ 5) (x - 9, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  17 * p.2 + 9 * p.2 ^ 2) (x - 9, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 9 * p.1 ^ 2 + 18 * p.1 ^ 4 + 3 * p.1 ^ 5 +  17 * p.2 + 9 * p.2 ^ 2) (x - 9, y - 3)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 9 * p.1 ^ 2 + 18 * p.1 ^ 4 + 3 * p.1 ^ 5) (x - 9, y - 3) +
      fderiv ℝ (fun p =>  17 * p.2 + 9 * p.2 ^ 2) (x - 9, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 9 * p.1 ^ 2 + 18 * p.1 ^ 4 + 3 * p.1 ^ 5) (x - 9, y - 3)) (9, 3) = 9 * ( 16 + 18 * (x-9) + 72 * (x-9) ^ 3 + 15 * (x-9) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 9 * p.1 ^ 2 + 18 * p.1 ^ 4 + 3 * p.1 ^ 5) = (fun x =>  16 * x + 9 * x ^ 2 + 18 * x ^ 4 + 3 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  17 * p.2 + 9 * p.2 ^ 2) (x - 9, y - 3)) (9, 3) = 3 * ( 17 + 18 * (y-3))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  17 * p.2 + 9 * p.2 ^ 2) = (fun x =>  17 * x + 9 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 3) (9, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 18 * p.1 ^ 3 + 19 * p.1 ^ 4 +  5 * p.2 ^ 3 + 18 * p.2 ^ 5 + 19 * p.2 ^ 6 - c) (x-12, y-18) (12, 18) = 0) → (12 * ( 16 + 54 * (x-12) ^ 2 + 76 * (x-12) ^ 3) + 18 * ( 15 * (y-18) ^ 2 + 90 * (y-18) ^ 4 + 114 * (y-18) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 18 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 12, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  5 * p.2 ^ 3 + 18 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 12, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 18 * p.1 ^ 3 + 19 * p.1 ^ 4 +  5 * p.2 ^ 3 + 18 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 12, y - 18)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 18 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 12, y - 18) +
      fderiv ℝ (fun p =>  5 * p.2 ^ 3 + 18 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 12, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 18 * p.1 ^ 3 + 19 * p.1 ^ 4) (x - 12, y - 18)) (12, 18) = 12 * ( 16 + 54 * (x-12) ^ 2 + 76 * (x-12) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 18 * p.1 ^ 3 + 19 * p.1 ^ 4) = (fun x =>  16 * x + 18 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  5 * p.2 ^ 3 + 18 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 12, y - 18)) (12, 18) = 18 * ( 15 * (y-18) ^ 2 + 90 * (y-18) ^ 4 + 114 * (y-18) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  5 * p.2 ^ 3 + 18 * p.2 ^ 5 + 19 * p.2 ^ 6) = (fun x =>  5 * x ^ 3 + 18 * x ^ 5 + 19 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 18) (12, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 3 * p.1 ^ 2 + 8 * p.1 ^ 3 +  13 * p.2 + 3 * p.2 ^ 5 + 5 * p.2 ^ 6 - c) (x-2, y-12) (2, 12) = 0) → (2 * ( 8 + 6 * (x-2) + 24 * (x-2) ^ 2) + 12 * ( 13 + 15 * (y-12) ^ 4 + 30 * (y-12) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 3 * p.1 ^ 2 + 8 * p.1 ^ 3) (x - 2, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  13 * p.2 + 3 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 2, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 3 * p.1 ^ 2 + 8 * p.1 ^ 3 +  13 * p.2 + 3 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 2, y - 12)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 3 * p.1 ^ 2 + 8 * p.1 ^ 3) (x - 2, y - 12) +
      fderiv ℝ (fun p =>  13 * p.2 + 3 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 2, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 3 * p.1 ^ 2 + 8 * p.1 ^ 3) (x - 2, y - 12)) (2, 12) = 2 * ( 8 + 6 * (x-2) + 24 * (x-2) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 3 * p.1 ^ 2 + 8 * p.1 ^ 3) = (fun x =>  8 * x + 3 * x ^ 2 + 8 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  13 * p.2 + 3 * p.2 ^ 5 + 5 * p.2 ^ 6) (x - 2, y - 12)) (2, 12) = 12 * ( 13 + 15 * (y-12) ^ 4 + 30 * (y-12) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  13 * p.2 + 3 * p.2 ^ 5 + 5 * p.2 ^ 6) = (fun x =>  13 * x + 3 * x ^ 5 + 5 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 2, y - 12) (2, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 +  7 * p.2 + 13 * p.2 ^ 3 - c) (x-12, y-2) (12, 2) = 0) → (12 * ( 14 * (x-12) + 60 * (x-12) ^ 2 + 24 * (x-12) ^ 3) + 2 * ( 7 + 39 * (y-2) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4) (x - 12, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 13 * p.2 ^ 3) (x - 12, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 +  7 * p.2 + 13 * p.2 ^ 3) (x - 12, y - 2)
      =
      fderiv ℝ (fun p =>  7 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4) (x - 12, y - 2) +
      fderiv ℝ (fun p =>  7 * p.2 + 13 * p.2 ^ 3) (x - 12, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4) (x - 12, y - 2)) (12, 2) = 12 * ( 14 * (x-12) + 60 * (x-12) ^ 2 + 24 * (x-12) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4) = (fun x =>  7 * x ^ 2 + 20 * x ^ 3 + 6 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 13 * p.2 ^ 3) (x - 12, y - 2)) (12, 2) = 2 * ( 7 + 39 * (y-2) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 13 * p.2 ^ 3) = (fun x =>  7 * x + 13 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 2) (12, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  7 * p.1 + 13 * p.1 ^ 2 +  7 * p.2 + 8 * p.2 ^ 3 - c) (x-16, y-18) (16, 18) = 0) → (16 * ( 7 + 26 * (x-16)) + 18 * ( 7 + 24 * (y-18) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  7 * p.1 + 13 * p.1 ^ 2) (x - 16, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 8 * p.2 ^ 3) (x - 16, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       7 * p.1 + 13 * p.1 ^ 2 +  7 * p.2 + 8 * p.2 ^ 3) (x - 16, y - 18)
      =
      fderiv ℝ (fun p =>  7 * p.1 + 13 * p.1 ^ 2) (x - 16, y - 18) +
      fderiv ℝ (fun p =>  7 * p.2 + 8 * p.2 ^ 3) (x - 16, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  7 * p.1 + 13 * p.1 ^ 2) (x - 16, y - 18)) (16, 18) = 16 * ( 7 + 26 * (x-16))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  7 * p.1 + 13 * p.1 ^ 2) = (fun x =>  7 * x + 13 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 8 * p.2 ^ 3) (x - 16, y - 18)) (16, 18) = 18 * ( 7 + 24 * (y-18) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 8 * p.2 ^ 3) = (fun x =>  7 * x + 8 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 18) (16, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  11 * p.1 + 7 * p.1 ^ 2 +  2 * p.2 ^ 4 + 12 * p.2 ^ 6 - c) (x-13, y-11) (13, 11) = 0) → (13 * ( 11 + 14 * (x-13)) + 11 * ( 8 * (y-11) ^ 3 + 72 * (y-11) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  11 * p.1 + 7 * p.1 ^ 2) (x - 13, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  2 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 13, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       11 * p.1 + 7 * p.1 ^ 2 +  2 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 13, y - 11)
      =
      fderiv ℝ (fun p =>  11 * p.1 + 7 * p.1 ^ 2) (x - 13, y - 11) +
      fderiv ℝ (fun p =>  2 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 13, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  11 * p.1 + 7 * p.1 ^ 2) (x - 13, y - 11)) (13, 11) = 13 * ( 11 + 14 * (x-13))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  11 * p.1 + 7 * p.1 ^ 2) = (fun x =>  11 * x + 7 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  2 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 13, y - 11)) (13, 11) = 11 * ( 8 * (y-11) ^ 3 + 72 * (y-11) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  2 * p.2 ^ 4 + 12 * p.2 ^ 6) = (fun x =>  2 * x ^ 4 + 12 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 11) (13, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  11 * p.1 + 6 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 + 16 * p.1 ^ 7 +  13 * p.2 + 9 * p.2 ^ 3 - c) (x-13, y-5) (13, 5) = 0) → (13 * ( 11 + 12 * (x-13) + 60 * (x-13) ^ 2 + 24 * (x-13) ^ 3 + 112 * (x-13) ^ 6) + 5 * ( 13 + 27 * (y-5) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  11 * p.1 + 6 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 + 16 * p.1 ^ 7) (x - 13, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  13 * p.2 + 9 * p.2 ^ 3) (x - 13, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       11 * p.1 + 6 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 + 16 * p.1 ^ 7 +  13 * p.2 + 9 * p.2 ^ 3) (x - 13, y - 5)
      =
      fderiv ℝ (fun p =>  11 * p.1 + 6 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 + 16 * p.1 ^ 7) (x - 13, y - 5) +
      fderiv ℝ (fun p =>  13 * p.2 + 9 * p.2 ^ 3) (x - 13, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  11 * p.1 + 6 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 + 16 * p.1 ^ 7) (x - 13, y - 5)) (13, 5) = 13 * ( 11 + 12 * (x-13) + 60 * (x-13) ^ 2 + 24 * (x-13) ^ 3 + 112 * (x-13) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  11 * p.1 + 6 * p.1 ^ 2 + 20 * p.1 ^ 3 + 6 * p.1 ^ 4 + 16 * p.1 ^ 7) = (fun x =>  11 * x + 6 * x ^ 2 + 20 * x ^ 3 + 6 * x ^ 4 + 16 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  13 * p.2 + 9 * p.2 ^ 3) (x - 13, y - 5)) (13, 5) = 5 * ( 13 + 27 * (y-5) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  13 * p.2 + 9 * p.2 ^ 3) = (fun x =>  13 * x + 9 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 5) (13, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 20 * p.1 ^ 2 + 17 * p.1 ^ 3 + 19 * p.1 ^ 4 + 8 * p.1 ^ 5 + 12 * p.1 ^ 6 + 18 * p.1 ^ 7 +  8 * p.2 ^ 2 + 14 * p.2 ^ 3 - c) (x-14, y-14) (14, 14) = 0) → (14 * ( 12 + 40 * (x-14) + 51 * (x-14) ^ 2 + 76 * (x-14) ^ 3 + 40 * (x-14) ^ 4 + 72 * (x-14) ^ 5 + 126 * (x-14) ^ 6) + 14 * ( 16 * (y-14) + 42 * (y-14) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 20 * p.1 ^ 2 + 17 * p.1 ^ 3 + 19 * p.1 ^ 4 + 8 * p.1 ^ 5 + 12 * p.1 ^ 6 + 18 * p.1 ^ 7) (x - 14, y - 14))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 ^ 2 + 14 * p.2 ^ 3) (x - 14, y - 14)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 20 * p.1 ^ 2 + 17 * p.1 ^ 3 + 19 * p.1 ^ 4 + 8 * p.1 ^ 5 + 12 * p.1 ^ 6 + 18 * p.1 ^ 7 +  8 * p.2 ^ 2 + 14 * p.2 ^ 3) (x - 14, y - 14)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 20 * p.1 ^ 2 + 17 * p.1 ^ 3 + 19 * p.1 ^ 4 + 8 * p.1 ^ 5 + 12 * p.1 ^ 6 + 18 * p.1 ^ 7) (x - 14, y - 14) +
      fderiv ℝ (fun p =>  8 * p.2 ^ 2 + 14 * p.2 ^ 3) (x - 14, y - 14) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 20 * p.1 ^ 2 + 17 * p.1 ^ 3 + 19 * p.1 ^ 4 + 8 * p.1 ^ 5 + 12 * p.1 ^ 6 + 18 * p.1 ^ 7) (x - 14, y - 14)) (14, 14) = 14 * ( 12 + 40 * (x-14) + 51 * (x-14) ^ 2 + 76 * (x-14) ^ 3 + 40 * (x-14) ^ 4 + 72 * (x-14) ^ 5 + 126 * (x-14) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 20 * p.1 ^ 2 + 17 * p.1 ^ 3 + 19 * p.1 ^ 4 + 8 * p.1 ^ 5 + 12 * p.1 ^ 6 + 18 * p.1 ^ 7) = (fun x =>  12 * x + 20 * x ^ 2 + 17 * x ^ 3 + 19 * x ^ 4 + 8 * x ^ 5 + 12 * x ^ 6 + 18 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 ^ 2 + 14 * p.2 ^ 3) (x - 14, y - 14)) (14, 14) = 14 * ( 16 * (y-14) + 42 * (y-14) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 ^ 2 + 14 * p.2 ^ 3) = (fun x =>  8 * x ^ 2 + 14 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 14, y - 14) (14, 14) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  10 * p.1 ^ 4 + 5 * p.1 ^ 6 +  3 * p.2 + 11 * p.2 ^ 2 + 20 * p.2 ^ 3 + 6 * p.2 ^ 5 - c) (x-12, y-15) (12, 15) = 0) → (12 * ( 40 * (x-12) ^ 3 + 30 * (x-12) ^ 5) + 15 * ( 3 + 22 * (y-15) + 60 * (y-15) ^ 2 + 30 * (y-15) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  10 * p.1 ^ 4 + 5 * p.1 ^ 6) (x - 12, y - 15))
  (hp2: DifferentiableAt ℝ (fun p =>  3 * p.2 + 11 * p.2 ^ 2 + 20 * p.2 ^ 3 + 6 * p.2 ^ 5) (x - 12, y - 15)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       10 * p.1 ^ 4 + 5 * p.1 ^ 6 +  3 * p.2 + 11 * p.2 ^ 2 + 20 * p.2 ^ 3 + 6 * p.2 ^ 5) (x - 12, y - 15)
      =
      fderiv ℝ (fun p =>  10 * p.1 ^ 4 + 5 * p.1 ^ 6) (x - 12, y - 15) +
      fderiv ℝ (fun p =>  3 * p.2 + 11 * p.2 ^ 2 + 20 * p.2 ^ 3 + 6 * p.2 ^ 5) (x - 12, y - 15) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  10 * p.1 ^ 4 + 5 * p.1 ^ 6) (x - 12, y - 15)) (12, 15) = 12 * ( 40 * (x-12) ^ 3 + 30 * (x-12) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  10 * p.1 ^ 4 + 5 * p.1 ^ 6) = (fun x =>  10 * x ^ 4 + 5 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  3 * p.2 + 11 * p.2 ^ 2 + 20 * p.2 ^ 3 + 6 * p.2 ^ 5) (x - 12, y - 15)) (12, 15) = 15 * ( 3 + 22 * (y-15) + 60 * (y-15) ^ 2 + 30 * (y-15) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  3 * p.2 + 11 * p.2 ^ 2 + 20 * p.2 ^ 3 + 6 * p.2 ^ 5) = (fun x =>  3 * x + 11 * x ^ 2 + 20 * x ^ 3 + 6 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 15) (12, 15) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 + 8 * p.1 ^ 2 + 7 * p.1 ^ 3 + 20 * p.1 ^ 4 + 11 * p.1 ^ 5 +  17 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5 - c) (x-16, y-7) (16, 7) = 0) → (16 * ( 20 + 16 * (x-16) + 21 * (x-16) ^ 2 + 80 * (x-16) ^ 3 + 55 * (x-16) ^ 4) + 7 * ( 34 * (y-7) + 18 * (y-7) ^ 2 + 65 * (y-7) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 + 8 * p.1 ^ 2 + 7 * p.1 ^ 3 + 20 * p.1 ^ 4 + 11 * p.1 ^ 5) (x - 16, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  17 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 16, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 + 8 * p.1 ^ 2 + 7 * p.1 ^ 3 + 20 * p.1 ^ 4 + 11 * p.1 ^ 5 +  17 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 16, y - 7)
      =
      fderiv ℝ (fun p =>  20 * p.1 + 8 * p.1 ^ 2 + 7 * p.1 ^ 3 + 20 * p.1 ^ 4 + 11 * p.1 ^ 5) (x - 16, y - 7) +
      fderiv ℝ (fun p =>  17 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 16, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 + 8 * p.1 ^ 2 + 7 * p.1 ^ 3 + 20 * p.1 ^ 4 + 11 * p.1 ^ 5) (x - 16, y - 7)) (16, 7) = 16 * ( 20 + 16 * (x-16) + 21 * (x-16) ^ 2 + 80 * (x-16) ^ 3 + 55 * (x-16) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 + 8 * p.1 ^ 2 + 7 * p.1 ^ 3 + 20 * p.1 ^ 4 + 11 * p.1 ^ 5) = (fun x =>  20 * x + 8 * x ^ 2 + 7 * x ^ 3 + 20 * x ^ 4 + 11 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  17 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 16, y - 7)) (16, 7) = 7 * ( 34 * (y-7) + 18 * (y-7) ^ 2 + 65 * (y-7) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  17 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) = (fun x =>  17 * x ^ 2 + 6 * x ^ 3 + 13 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 7) (16, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  10 * p.1 ^ 3 + 10 * p.1 ^ 5 +  12 * p.2 + 18 * p.2 ^ 2 + 11 * p.2 ^ 3 + 20 * p.2 ^ 5 - c) (x-4, y-20) (4, 20) = 0) → (4 * ( 30 * (x-4) ^ 2 + 50 * (x-4) ^ 4) + 20 * ( 12 + 36 * (y-20) + 33 * (y-20) ^ 2 + 100 * (y-20) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  10 * p.1 ^ 3 + 10 * p.1 ^ 5) (x - 4, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 18 * p.2 ^ 2 + 11 * p.2 ^ 3 + 20 * p.2 ^ 5) (x - 4, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       10 * p.1 ^ 3 + 10 * p.1 ^ 5 +  12 * p.2 + 18 * p.2 ^ 2 + 11 * p.2 ^ 3 + 20 * p.2 ^ 5) (x - 4, y - 20)
      =
      fderiv ℝ (fun p =>  10 * p.1 ^ 3 + 10 * p.1 ^ 5) (x - 4, y - 20) +
      fderiv ℝ (fun p =>  12 * p.2 + 18 * p.2 ^ 2 + 11 * p.2 ^ 3 + 20 * p.2 ^ 5) (x - 4, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  10 * p.1 ^ 3 + 10 * p.1 ^ 5) (x - 4, y - 20)) (4, 20) = 4 * ( 30 * (x-4) ^ 2 + 50 * (x-4) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  10 * p.1 ^ 3 + 10 * p.1 ^ 5) = (fun x =>  10 * x ^ 3 + 10 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 18 * p.2 ^ 2 + 11 * p.2 ^ 3 + 20 * p.2 ^ 5) (x - 4, y - 20)) (4, 20) = 20 * ( 12 + 36 * (y-20) + 33 * (y-20) ^ 2 + 100 * (y-20) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 18 * p.2 ^ 2 + 11 * p.2 ^ 3 + 20 * p.2 ^ 5) = (fun x =>  12 * x + 18 * x ^ 2 + 11 * x ^ 3 + 20 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 4, y - 20) (4, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 ^ 3 + 11 * p.1 ^ 5 +  2 * p.2 + 6 * p.2 ^ 2 - c) (x-14, y-6) (14, 6) = 0) → (14 * ( 6 * (x-14) ^ 2 + 55 * (x-14) ^ 4) + 6 * ( 2 + 12 * (y-6)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 ^ 3 + 11 * p.1 ^ 5) (x - 14, y - 6))
  (hp2: DifferentiableAt ℝ (fun p =>  2 * p.2 + 6 * p.2 ^ 2) (x - 14, y - 6)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 ^ 3 + 11 * p.1 ^ 5 +  2 * p.2 + 6 * p.2 ^ 2) (x - 14, y - 6)
      =
      fderiv ℝ (fun p =>  2 * p.1 ^ 3 + 11 * p.1 ^ 5) (x - 14, y - 6) +
      fderiv ℝ (fun p =>  2 * p.2 + 6 * p.2 ^ 2) (x - 14, y - 6) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 ^ 3 + 11 * p.1 ^ 5) (x - 14, y - 6)) (14, 6) = 14 * ( 6 * (x-14) ^ 2 + 55 * (x-14) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 ^ 3 + 11 * p.1 ^ 5) = (fun x =>  2 * x ^ 3 + 11 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  2 * p.2 + 6 * p.2 ^ 2) (x - 14, y - 6)) (14, 6) = 6 * ( 2 + 12 * (y-6))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  2 * p.2 + 6 * p.2 ^ 2) = (fun x =>  2 * x + 6 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 14, y - 6) (14, 6) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 ^ 2 + 14 * p.1 ^ 3 +  6 * p.2 + 7 * p.2 ^ 2 - c) (x-5, y-8) (5, 8) = 0) → (5 * ( 4 * (x-5) + 42 * (x-5) ^ 2) + 8 * ( 6 + 14 * (y-8)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 ^ 2 + 14 * p.1 ^ 3) (x - 5, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  6 * p.2 + 7 * p.2 ^ 2) (x - 5, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 ^ 2 + 14 * p.1 ^ 3 +  6 * p.2 + 7 * p.2 ^ 2) (x - 5, y - 8)
      =
      fderiv ℝ (fun p =>  2 * p.1 ^ 2 + 14 * p.1 ^ 3) (x - 5, y - 8) +
      fderiv ℝ (fun p =>  6 * p.2 + 7 * p.2 ^ 2) (x - 5, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 ^ 2 + 14 * p.1 ^ 3) (x - 5, y - 8)) (5, 8) = 5 * ( 4 * (x-5) + 42 * (x-5) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 ^ 2 + 14 * p.1 ^ 3) = (fun x =>  2 * x ^ 2 + 14 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  6 * p.2 + 7 * p.2 ^ 2) (x - 5, y - 8)) (5, 8) = 8 * ( 6 + 14 * (y-8))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  6 * p.2 + 7 * p.2 ^ 2) = (fun x =>  6 * x + 7 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 5, y - 8) (5, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 16 * p.1 ^ 2 + 19 * p.1 ^ 4 + 14 * p.1 ^ 5 + 4 * p.1 ^ 6 +  8 * p.2 + 8 * p.2 ^ 2 + 15 * p.2 ^ 5 - c) (x-2, y-2) (2, 2) = 0) → (2 * ( 12 + 32 * (x-2) + 76 * (x-2) ^ 3 + 70 * (x-2) ^ 4 + 24 * (x-2) ^ 5) + 2 * ( 8 + 16 * (y-2) + 75 * (y-2) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 16 * p.1 ^ 2 + 19 * p.1 ^ 4 + 14 * p.1 ^ 5 + 4 * p.1 ^ 6) (x - 2, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 8 * p.2 ^ 2 + 15 * p.2 ^ 5) (x - 2, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 16 * p.1 ^ 2 + 19 * p.1 ^ 4 + 14 * p.1 ^ 5 + 4 * p.1 ^ 6 +  8 * p.2 + 8 * p.2 ^ 2 + 15 * p.2 ^ 5) (x - 2, y - 2)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 16 * p.1 ^ 2 + 19 * p.1 ^ 4 + 14 * p.1 ^ 5 + 4 * p.1 ^ 6) (x - 2, y - 2) +
      fderiv ℝ (fun p =>  8 * p.2 + 8 * p.2 ^ 2 + 15 * p.2 ^ 5) (x - 2, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 16 * p.1 ^ 2 + 19 * p.1 ^ 4 + 14 * p.1 ^ 5 + 4 * p.1 ^ 6) (x - 2, y - 2)) (2, 2) = 2 * ( 12 + 32 * (x-2) + 76 * (x-2) ^ 3 + 70 * (x-2) ^ 4 + 24 * (x-2) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 16 * p.1 ^ 2 + 19 * p.1 ^ 4 + 14 * p.1 ^ 5 + 4 * p.1 ^ 6) = (fun x =>  12 * x + 16 * x ^ 2 + 19 * x ^ 4 + 14 * x ^ 5 + 4 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 8 * p.2 ^ 2 + 15 * p.2 ^ 5) (x - 2, y - 2)) (2, 2) = 2 * ( 8 + 16 * (y-2) + 75 * (y-2) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 8 * p.2 ^ 2 + 15 * p.2 ^ 5) = (fun x =>  8 * x + 8 * x ^ 2 + 15 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 2, y - 2) (2, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 4 * p.1 ^ 2 +  14 * p.2 + 14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 15 * p.2 ^ 4 + 19 * p.2 ^ 5 + 7 * p.2 ^ 6 - c) (x-3, y-14) (3, 14) = 0) → (3 * ( 15 + 8 * (x-3)) + 14 * ( 14 + 28 * (y-14) + 51 * (y-14) ^ 2 + 60 * (y-14) ^ 3 + 95 * (y-14) ^ 4 + 42 * (y-14) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 4 * p.1 ^ 2) (x - 3, y - 14))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 15 * p.2 ^ 4 + 19 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 14)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 4 * p.1 ^ 2 +  14 * p.2 + 14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 15 * p.2 ^ 4 + 19 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 14)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 4 * p.1 ^ 2) (x - 3, y - 14) +
      fderiv ℝ (fun p =>  14 * p.2 + 14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 15 * p.2 ^ 4 + 19 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 14) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 4 * p.1 ^ 2) (x - 3, y - 14)) (3, 14) = 3 * ( 15 + 8 * (x-3))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 4 * p.1 ^ 2) = (fun x =>  15 * x + 4 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 15 * p.2 ^ 4 + 19 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 14)) (3, 14) = 14 * ( 14 + 28 * (y-14) + 51 * (y-14) ^ 2 + 60 * (y-14) ^ 3 + 95 * (y-14) ^ 4 + 42 * (y-14) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 14 * p.2 ^ 2 + 17 * p.2 ^ 3 + 15 * p.2 ^ 4 + 19 * p.2 ^ 5 + 7 * p.2 ^ 6) = (fun x =>  14 * x + 14 * x ^ 2 + 17 * x ^ 3 + 15 * x ^ 4 + 19 * x ^ 5 + 7 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 14) (3, 14) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  19 * p.1 + 8 * p.1 ^ 2 + 13 * p.1 ^ 4 + 11 * p.1 ^ 6 +  9 * p.2 + 20 * p.2 ^ 2 - c) (x-18, y-7) (18, 7) = 0) → (18 * ( 19 + 16 * (x-18) + 52 * (x-18) ^ 3 + 66 * (x-18) ^ 5) + 7 * ( 9 + 40 * (y-7)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  19 * p.1 + 8 * p.1 ^ 2 + 13 * p.1 ^ 4 + 11 * p.1 ^ 6) (x - 18, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 + 20 * p.2 ^ 2) (x - 18, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       19 * p.1 + 8 * p.1 ^ 2 + 13 * p.1 ^ 4 + 11 * p.1 ^ 6 +  9 * p.2 + 20 * p.2 ^ 2) (x - 18, y - 7)
      =
      fderiv ℝ (fun p =>  19 * p.1 + 8 * p.1 ^ 2 + 13 * p.1 ^ 4 + 11 * p.1 ^ 6) (x - 18, y - 7) +
      fderiv ℝ (fun p =>  9 * p.2 + 20 * p.2 ^ 2) (x - 18, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  19 * p.1 + 8 * p.1 ^ 2 + 13 * p.1 ^ 4 + 11 * p.1 ^ 6) (x - 18, y - 7)) (18, 7) = 18 * ( 19 + 16 * (x-18) + 52 * (x-18) ^ 3 + 66 * (x-18) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  19 * p.1 + 8 * p.1 ^ 2 + 13 * p.1 ^ 4 + 11 * p.1 ^ 6) = (fun x =>  19 * x + 8 * x ^ 2 + 13 * x ^ 4 + 11 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 + 20 * p.2 ^ 2) (x - 18, y - 7)) (18, 7) = 7 * ( 9 + 40 * (y-7))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 + 20 * p.2 ^ 2) = (fun x =>  9 * x + 20 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 7) (18, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 ^ 2 + 18 * p.1 ^ 4 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6 +  14 * p.2 + 3 * p.2 ^ 2 + 4 * p.2 ^ 3 + 10 * p.2 ^ 4 + 3 * p.2 ^ 5 - c) (x-6, y-10) (6, 10) = 0) → (6 * ( 8 * (x-6) + 72 * (x-6) ^ 3 + 60 * (x-6) ^ 4 + 66 * (x-6) ^ 5) + 10 * ( 14 + 6 * (y-10) + 12 * (y-10) ^ 2 + 40 * (y-10) ^ 3 + 15 * (y-10) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 ^ 2 + 18 * p.1 ^ 4 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) (x - 6, y - 10))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 3 * p.2 ^ 2 + 4 * p.2 ^ 3 + 10 * p.2 ^ 4 + 3 * p.2 ^ 5) (x - 6, y - 10)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 ^ 2 + 18 * p.1 ^ 4 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6 +  14 * p.2 + 3 * p.2 ^ 2 + 4 * p.2 ^ 3 + 10 * p.2 ^ 4 + 3 * p.2 ^ 5) (x - 6, y - 10)
      =
      fderiv ℝ (fun p =>  4 * p.1 ^ 2 + 18 * p.1 ^ 4 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) (x - 6, y - 10) +
      fderiv ℝ (fun p =>  14 * p.2 + 3 * p.2 ^ 2 + 4 * p.2 ^ 3 + 10 * p.2 ^ 4 + 3 * p.2 ^ 5) (x - 6, y - 10) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 ^ 2 + 18 * p.1 ^ 4 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) (x - 6, y - 10)) (6, 10) = 6 * ( 8 * (x-6) + 72 * (x-6) ^ 3 + 60 * (x-6) ^ 4 + 66 * (x-6) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 ^ 2 + 18 * p.1 ^ 4 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) = (fun x =>  4 * x ^ 2 + 18 * x ^ 4 + 12 * x ^ 5 + 11 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 3 * p.2 ^ 2 + 4 * p.2 ^ 3 + 10 * p.2 ^ 4 + 3 * p.2 ^ 5) (x - 6, y - 10)) (6, 10) = 10 * ( 14 + 6 * (y-10) + 12 * (y-10) ^ 2 + 40 * (y-10) ^ 3 + 15 * (y-10) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 3 * p.2 ^ 2 + 4 * p.2 ^ 3 + 10 * p.2 ^ 4 + 3 * p.2 ^ 5) = (fun x =>  14 * x + 3 * x ^ 2 + 4 * x ^ 3 + 10 * x ^ 4 + 3 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 6, y - 10) (6, 10) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 10 * p.1 ^ 2 + 10 * p.1 ^ 3 + 3 * p.1 ^ 4 +  10 * p.2 + 14 * p.2 ^ 2 + 4 * p.2 ^ 3 + 11 * p.2 ^ 4 + 8 * p.2 ^ 5 + 7 * p.2 ^ 6 - c) (x-8, y-20) (8, 20) = 0) → (8 * ( 5 + 20 * (x-8) + 30 * (x-8) ^ 2 + 12 * (x-8) ^ 3) + 20 * ( 10 + 28 * (y-20) + 12 * (y-20) ^ 2 + 44 * (y-20) ^ 3 + 40 * (y-20) ^ 4 + 42 * (y-20) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 10 * p.1 ^ 2 + 10 * p.1 ^ 3 + 3 * p.1 ^ 4) (x - 8, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 + 14 * p.2 ^ 2 + 4 * p.2 ^ 3 + 11 * p.2 ^ 4 + 8 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 8, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 10 * p.1 ^ 2 + 10 * p.1 ^ 3 + 3 * p.1 ^ 4 +  10 * p.2 + 14 * p.2 ^ 2 + 4 * p.2 ^ 3 + 11 * p.2 ^ 4 + 8 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 8, y - 20)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 10 * p.1 ^ 2 + 10 * p.1 ^ 3 + 3 * p.1 ^ 4) (x - 8, y - 20) +
      fderiv ℝ (fun p =>  10 * p.2 + 14 * p.2 ^ 2 + 4 * p.2 ^ 3 + 11 * p.2 ^ 4 + 8 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 8, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 10 * p.1 ^ 2 + 10 * p.1 ^ 3 + 3 * p.1 ^ 4) (x - 8, y - 20)) (8, 20) = 8 * ( 5 + 20 * (x-8) + 30 * (x-8) ^ 2 + 12 * (x-8) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 10 * p.1 ^ 2 + 10 * p.1 ^ 3 + 3 * p.1 ^ 4) = (fun x =>  5 * x + 10 * x ^ 2 + 10 * x ^ 3 + 3 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 + 14 * p.2 ^ 2 + 4 * p.2 ^ 3 + 11 * p.2 ^ 4 + 8 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 8, y - 20)) (8, 20) = 20 * ( 10 + 28 * (y-20) + 12 * (y-20) ^ 2 + 44 * (y-20) ^ 3 + 40 * (y-20) ^ 4 + 42 * (y-20) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 + 14 * p.2 ^ 2 + 4 * p.2 ^ 3 + 11 * p.2 ^ 4 + 8 * p.2 ^ 5 + 7 * p.2 ^ 6) = (fun x =>  10 * x + 14 * x ^ 2 + 4 * x ^ 3 + 11 * x ^ 4 + 8 * x ^ 5 + 7 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 20) (8, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 ^ 2 + 13 * p.1 ^ 3 +  4 * p.2 + 5 * p.2 ^ 2 + 12 * p.2 ^ 3 + 15 * p.2 ^ 6 - c) (x-11, y-4) (11, 4) = 0) → (11 * ( 26 * (x-11) + 39 * (x-11) ^ 2) + 4 * ( 4 + 10 * (y-4) + 36 * (y-4) ^ 2 + 90 * (y-4) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 11, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 5 * p.2 ^ 2 + 12 * p.2 ^ 3 + 15 * p.2 ^ 6) (x - 11, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 ^ 2 + 13 * p.1 ^ 3 +  4 * p.2 + 5 * p.2 ^ 2 + 12 * p.2 ^ 3 + 15 * p.2 ^ 6) (x - 11, y - 4)
      =
      fderiv ℝ (fun p =>  13 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 11, y - 4) +
      fderiv ℝ (fun p =>  4 * p.2 + 5 * p.2 ^ 2 + 12 * p.2 ^ 3 + 15 * p.2 ^ 6) (x - 11, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 11, y - 4)) (11, 4) = 11 * ( 26 * (x-11) + 39 * (x-11) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 ^ 2 + 13 * p.1 ^ 3) = (fun x =>  13 * x ^ 2 + 13 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 5 * p.2 ^ 2 + 12 * p.2 ^ 3 + 15 * p.2 ^ 6) (x - 11, y - 4)) (11, 4) = 4 * ( 4 + 10 * (y-4) + 36 * (y-4) ^ 2 + 90 * (y-4) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 5 * p.2 ^ 2 + 12 * p.2 ^ 3 + 15 * p.2 ^ 6) = (fun x =>  4 * x + 5 * x ^ 2 + 12 * x ^ 3 + 15 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 11, y - 4) (11, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 ^ 2 + 8 * p.1 ^ 6 +  7 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 6 - c) (x-7, y-13) (7, 13) = 0) → (7 * ( 12 * (x-7) + 48 * (x-7) ^ 5) + 13 * ( 7 + 34 * (y-13) + 9 * (y-13) ^ 2 + 44 * (y-13) ^ 3 + 96 * (y-13) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 ^ 2 + 8 * p.1 ^ 6) (x - 7, y - 13))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 6) (x - 7, y - 13)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 ^ 2 + 8 * p.1 ^ 6 +  7 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 6) (x - 7, y - 13)
      =
      fderiv ℝ (fun p =>  6 * p.1 ^ 2 + 8 * p.1 ^ 6) (x - 7, y - 13) +
      fderiv ℝ (fun p =>  7 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 6) (x - 7, y - 13) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 ^ 2 + 8 * p.1 ^ 6) (x - 7, y - 13)) (7, 13) = 7 * ( 12 * (x-7) + 48 * (x-7) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 ^ 2 + 8 * p.1 ^ 6) = (fun x =>  6 * x ^ 2 + 8 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 6) (x - 7, y - 13)) (7, 13) = 13 * ( 7 + 34 * (y-13) + 9 * (y-13) ^ 2 + 44 * (y-13) ^ 3 + 96 * (y-13) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 17 * p.2 ^ 2 + 3 * p.2 ^ 3 + 11 * p.2 ^ 4 + 16 * p.2 ^ 6) = (fun x =>  7 * x + 17 * x ^ 2 + 3 * x ^ 3 + 11 * x ^ 4 + 16 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 13) (7, 13) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  19 * p.1 ^ 3 + 16 * p.1 ^ 5 +  5 * p.2 + 13 * p.2 ^ 2 - c) (x-9, y-17) (9, 17) = 0) → (9 * ( 57 * (x-9) ^ 2 + 80 * (x-9) ^ 4) + 17 * ( 5 + 26 * (y-17)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  19 * p.1 ^ 3 + 16 * p.1 ^ 5) (x - 9, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  5 * p.2 + 13 * p.2 ^ 2) (x - 9, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       19 * p.1 ^ 3 + 16 * p.1 ^ 5 +  5 * p.2 + 13 * p.2 ^ 2) (x - 9, y - 17)
      =
      fderiv ℝ (fun p =>  19 * p.1 ^ 3 + 16 * p.1 ^ 5) (x - 9, y - 17) +
      fderiv ℝ (fun p =>  5 * p.2 + 13 * p.2 ^ 2) (x - 9, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  19 * p.1 ^ 3 + 16 * p.1 ^ 5) (x - 9, y - 17)) (9, 17) = 9 * ( 57 * (x-9) ^ 2 + 80 * (x-9) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  19 * p.1 ^ 3 + 16 * p.1 ^ 5) = (fun x =>  19 * x ^ 3 + 16 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  5 * p.2 + 13 * p.2 ^ 2) (x - 9, y - 17)) (9, 17) = 17 * ( 5 + 26 * (y-17))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  5 * p.2 + 13 * p.2 ^ 2) = (fun x =>  5 * x + 13 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 17) (9, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 14 * p.1 ^ 2 + 20 * p.1 ^ 4 +  11 * p.2 ^ 2 + 13 * p.2 ^ 3 + 11 * p.2 ^ 5 - c) (x-7, y-17) (7, 17) = 0) → (7 * ( 15 + 28 * (x-7) + 80 * (x-7) ^ 3) + 17 * ( 22 * (y-17) + 39 * (y-17) ^ 2 + 55 * (y-17) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 14 * p.1 ^ 2 + 20 * p.1 ^ 4) (x - 7, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 ^ 2 + 13 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 7, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 14 * p.1 ^ 2 + 20 * p.1 ^ 4 +  11 * p.2 ^ 2 + 13 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 7, y - 17)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 14 * p.1 ^ 2 + 20 * p.1 ^ 4) (x - 7, y - 17) +
      fderiv ℝ (fun p =>  11 * p.2 ^ 2 + 13 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 7, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 14 * p.1 ^ 2 + 20 * p.1 ^ 4) (x - 7, y - 17)) (7, 17) = 7 * ( 15 + 28 * (x-7) + 80 * (x-7) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 14 * p.1 ^ 2 + 20 * p.1 ^ 4) = (fun x =>  15 * x + 14 * x ^ 2 + 20 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 ^ 2 + 13 * p.2 ^ 3 + 11 * p.2 ^ 5) (x - 7, y - 17)) (7, 17) = 17 * ( 22 * (y-17) + 39 * (y-17) ^ 2 + 55 * (y-17) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 ^ 2 + 13 * p.2 ^ 3 + 11 * p.2 ^ 5) = (fun x =>  11 * x ^ 2 + 13 * x ^ 3 + 11 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 17) (7, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 10 * p.1 ^ 2 + 14 * p.1 ^ 3 + 14 * p.1 ^ 4 +  7 * p.2 + 18 * p.2 ^ 2 + 6 * p.2 ^ 3 + 4 * p.2 ^ 4 - c) (x-16, y-16) (16, 16) = 0) → (16 * ( 8 + 20 * (x-16) + 42 * (x-16) ^ 2 + 56 * (x-16) ^ 3) + 16 * ( 7 + 36 * (y-16) + 18 * (y-16) ^ 2 + 16 * (y-16) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 10 * p.1 ^ 2 + 14 * p.1 ^ 3 + 14 * p.1 ^ 4) (x - 16, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 18 * p.2 ^ 2 + 6 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 16, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 10 * p.1 ^ 2 + 14 * p.1 ^ 3 + 14 * p.1 ^ 4 +  7 * p.2 + 18 * p.2 ^ 2 + 6 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 16, y - 16)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 10 * p.1 ^ 2 + 14 * p.1 ^ 3 + 14 * p.1 ^ 4) (x - 16, y - 16) +
      fderiv ℝ (fun p =>  7 * p.2 + 18 * p.2 ^ 2 + 6 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 16, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 10 * p.1 ^ 2 + 14 * p.1 ^ 3 + 14 * p.1 ^ 4) (x - 16, y - 16)) (16, 16) = 16 * ( 8 + 20 * (x-16) + 42 * (x-16) ^ 2 + 56 * (x-16) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 10 * p.1 ^ 2 + 14 * p.1 ^ 3 + 14 * p.1 ^ 4) = (fun x =>  8 * x + 10 * x ^ 2 + 14 * x ^ 3 + 14 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 18 * p.2 ^ 2 + 6 * p.2 ^ 3 + 4 * p.2 ^ 4) (x - 16, y - 16)) (16, 16) = 16 * ( 7 + 36 * (y-16) + 18 * (y-16) ^ 2 + 16 * (y-16) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 18 * p.2 ^ 2 + 6 * p.2 ^ 3 + 4 * p.2 ^ 4) = (fun x =>  7 * x + 18 * x ^ 2 + 6 * x ^ 3 + 4 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 16) (16, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 14 * p.1 ^ 2 +  20 * p.2 + 20 * p.2 ^ 2 + 15 * p.2 ^ 3 + 11 * p.2 ^ 5 + 13 * p.2 ^ 6 - c) (x-6, y-8) (6, 8) = 0) → (6 * ( 13 + 28 * (x-6)) + 8 * ( 20 + 40 * (y-8) + 45 * (y-8) ^ 2 + 55 * (y-8) ^ 4 + 78 * (y-8) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 14 * p.1 ^ 2) (x - 6, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 20 * p.2 ^ 2 + 15 * p.2 ^ 3 + 11 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 6, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 14 * p.1 ^ 2 +  20 * p.2 + 20 * p.2 ^ 2 + 15 * p.2 ^ 3 + 11 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 6, y - 8)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 14 * p.1 ^ 2) (x - 6, y - 8) +
      fderiv ℝ (fun p =>  20 * p.2 + 20 * p.2 ^ 2 + 15 * p.2 ^ 3 + 11 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 6, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 14 * p.1 ^ 2) (x - 6, y - 8)) (6, 8) = 6 * ( 13 + 28 * (x-6))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 14 * p.1 ^ 2) = (fun x =>  13 * x + 14 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 20 * p.2 ^ 2 + 15 * p.2 ^ 3 + 11 * p.2 ^ 5 + 13 * p.2 ^ 6) (x - 6, y - 8)) (6, 8) = 8 * ( 20 + 40 * (y-8) + 45 * (y-8) ^ 2 + 55 * (y-8) ^ 4 + 78 * (y-8) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 20 * p.2 ^ 2 + 15 * p.2 ^ 3 + 11 * p.2 ^ 5 + 13 * p.2 ^ 6) = (fun x =>  20 * x + 20 * x ^ 2 + 15 * x ^ 3 + 11 * x ^ 5 + 13 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 6, y - 8) (6, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  19 * p.1 + 10 * p.1 ^ 2 +  12 * p.2 ^ 2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 3 * p.2 ^ 6 - c) (x-17, y-8) (17, 8) = 0) → (17 * ( 19 + 20 * (x-17)) + 8 * ( 24 * (y-8) + 9 * (y-8) ^ 2 + 15 * (y-8) ^ 4 + 18 * (y-8) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  19 * p.1 + 10 * p.1 ^ 2) (x - 17, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 ^ 2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 17, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       19 * p.1 + 10 * p.1 ^ 2 +  12 * p.2 ^ 2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 17, y - 8)
      =
      fderiv ℝ (fun p =>  19 * p.1 + 10 * p.1 ^ 2) (x - 17, y - 8) +
      fderiv ℝ (fun p =>  12 * p.2 ^ 2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 17, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  19 * p.1 + 10 * p.1 ^ 2) (x - 17, y - 8)) (17, 8) = 17 * ( 19 + 20 * (x-17))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  19 * p.1 + 10 * p.1 ^ 2) = (fun x =>  19 * x + 10 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 ^ 2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 3 * p.2 ^ 6) (x - 17, y - 8)) (17, 8) = 8 * ( 24 * (y-8) + 9 * (y-8) ^ 2 + 15 * (y-8) ^ 4 + 18 * (y-8) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 ^ 2 + 3 * p.2 ^ 3 + 3 * p.2 ^ 5 + 3 * p.2 ^ 6) = (fun x =>  12 * x ^ 2 + 3 * x ^ 3 + 3 * x ^ 5 + 3 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 8) (17, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 ^ 2 + 13 * p.1 ^ 3 +  18 * p.2 + 4 * p.2 ^ 2 - c) (x-18, y-16) (18, 16) = 0) → (18 * ( 8 * (x-18) + 39 * (x-18) ^ 2) + 16 * ( 18 + 8 * (y-16)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 18, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 + 4 * p.2 ^ 2) (x - 18, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 ^ 2 + 13 * p.1 ^ 3 +  18 * p.2 + 4 * p.2 ^ 2) (x - 18, y - 16)
      =
      fderiv ℝ (fun p =>  4 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 18, y - 16) +
      fderiv ℝ (fun p =>  18 * p.2 + 4 * p.2 ^ 2) (x - 18, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 18, y - 16)) (18, 16) = 18 * ( 8 * (x-18) + 39 * (x-18) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 ^ 2 + 13 * p.1 ^ 3) = (fun x =>  4 * x ^ 2 + 13 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 + 4 * p.2 ^ 2) (x - 18, y - 16)) (18, 16) = 16 * ( 18 + 8 * (y-16))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 + 4 * p.2 ^ 2) = (fun x =>  18 * x + 4 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 18, y - 16) (18, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 + 20 * p.1 ^ 2 + 2 * p.1 ^ 3 + 13 * p.1 ^ 6 +  8 * p.2 + 2 * p.2 ^ 2 - c) (x-13, y-5) (13, 5) = 0) → (13 * ( 6 + 40 * (x-13) + 6 * (x-13) ^ 2 + 78 * (x-13) ^ 5) + 5 * ( 8 + 4 * (y-5)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 + 20 * p.1 ^ 2 + 2 * p.1 ^ 3 + 13 * p.1 ^ 6) (x - 13, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 2 * p.2 ^ 2) (x - 13, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 + 20 * p.1 ^ 2 + 2 * p.1 ^ 3 + 13 * p.1 ^ 6 +  8 * p.2 + 2 * p.2 ^ 2) (x - 13, y - 5)
      =
      fderiv ℝ (fun p =>  6 * p.1 + 20 * p.1 ^ 2 + 2 * p.1 ^ 3 + 13 * p.1 ^ 6) (x - 13, y - 5) +
      fderiv ℝ (fun p =>  8 * p.2 + 2 * p.2 ^ 2) (x - 13, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 + 20 * p.1 ^ 2 + 2 * p.1 ^ 3 + 13 * p.1 ^ 6) (x - 13, y - 5)) (13, 5) = 13 * ( 6 + 40 * (x-13) + 6 * (x-13) ^ 2 + 78 * (x-13) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 + 20 * p.1 ^ 2 + 2 * p.1 ^ 3 + 13 * p.1 ^ 6) = (fun x =>  6 * x + 20 * x ^ 2 + 2 * x ^ 3 + 13 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 2 * p.2 ^ 2) (x - 13, y - 5)) (13, 5) = 5 * ( 8 + 4 * (y-5))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 2 * p.2 ^ 2) = (fun x =>  8 * x + 2 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 5) (13, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  10 * p.1 + 3 * p.1 ^ 2 +  9 * p.2 + 9 * p.2 ^ 3 + 6 * p.2 ^ 4 - c) (x-14, y-18) (14, 18) = 0) → (14 * ( 10 + 6 * (x-14)) + 18 * ( 9 + 27 * (y-18) ^ 2 + 24 * (y-18) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  10 * p.1 + 3 * p.1 ^ 2) (x - 14, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 + 9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 14, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       10 * p.1 + 3 * p.1 ^ 2 +  9 * p.2 + 9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 14, y - 18)
      =
      fderiv ℝ (fun p =>  10 * p.1 + 3 * p.1 ^ 2) (x - 14, y - 18) +
      fderiv ℝ (fun p =>  9 * p.2 + 9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 14, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  10 * p.1 + 3 * p.1 ^ 2) (x - 14, y - 18)) (14, 18) = 14 * ( 10 + 6 * (x-14))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  10 * p.1 + 3 * p.1 ^ 2) = (fun x =>  10 * x + 3 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 + 9 * p.2 ^ 3 + 6 * p.2 ^ 4) (x - 14, y - 18)) (14, 18) = 18 * ( 9 + 27 * (y-18) ^ 2 + 24 * (y-18) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 + 9 * p.2 ^ 3 + 6 * p.2 ^ 4) = (fun x =>  9 * x + 9 * x ^ 3 + 6 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 14, y - 18) (14, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  3 * p.1 ^ 2 + 12 * p.1 ^ 3 +  5 * p.2 + 19 * p.2 ^ 2 - c) (x-3, y-3) (3, 3) = 0) → (3 * ( 6 * (x-3) + 36 * (x-3) ^ 2) + 3 * ( 5 + 38 * (y-3)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  3 * p.1 ^ 2 + 12 * p.1 ^ 3) (x - 3, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  5 * p.2 + 19 * p.2 ^ 2) (x - 3, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       3 * p.1 ^ 2 + 12 * p.1 ^ 3 +  5 * p.2 + 19 * p.2 ^ 2) (x - 3, y - 3)
      =
      fderiv ℝ (fun p =>  3 * p.1 ^ 2 + 12 * p.1 ^ 3) (x - 3, y - 3) +
      fderiv ℝ (fun p =>  5 * p.2 + 19 * p.2 ^ 2) (x - 3, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  3 * p.1 ^ 2 + 12 * p.1 ^ 3) (x - 3, y - 3)) (3, 3) = 3 * ( 6 * (x-3) + 36 * (x-3) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  3 * p.1 ^ 2 + 12 * p.1 ^ 3) = (fun x =>  3 * x ^ 2 + 12 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  5 * p.2 + 19 * p.2 ^ 2) (x - 3, y - 3)) (3, 3) = 3 * ( 5 + 38 * (y-3))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  5 * p.2 + 19 * p.2 ^ 2) = (fun x =>  5 * x + 19 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 3) (3, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 13 * p.1 ^ 2 +  18 * p.2 + 9 * p.2 ^ 2 + 18 * p.2 ^ 4 + 15 * p.2 ^ 5 - c) (x-15, y-5) (15, 5) = 0) → (15 * ( 13 + 26 * (x-15)) + 5 * ( 18 + 18 * (y-5) + 72 * (y-5) ^ 3 + 75 * (y-5) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 13 * p.1 ^ 2) (x - 15, y - 5))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 + 9 * p.2 ^ 2 + 18 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 15, y - 5)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 13 * p.1 ^ 2 +  18 * p.2 + 9 * p.2 ^ 2 + 18 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 15, y - 5)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 13 * p.1 ^ 2) (x - 15, y - 5) +
      fderiv ℝ (fun p =>  18 * p.2 + 9 * p.2 ^ 2 + 18 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 15, y - 5) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 13 * p.1 ^ 2) (x - 15, y - 5)) (15, 5) = 15 * ( 13 + 26 * (x-15))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 13 * p.1 ^ 2) = (fun x =>  13 * x + 13 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 + 9 * p.2 ^ 2 + 18 * p.2 ^ 4 + 15 * p.2 ^ 5) (x - 15, y - 5)) (15, 5) = 5 * ( 18 + 18 * (y-5) + 72 * (y-5) ^ 3 + 75 * (y-5) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 + 9 * p.2 ^ 2 + 18 * p.2 ^ 4 + 15 * p.2 ^ 5) = (fun x =>  18 * x + 9 * x ^ 2 + 18 * x ^ 4 + 15 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 5) (15, 5) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 18 * p.1 ^ 2 +  5 * p.2 + 5 * p.2 ^ 2 + 2 * p.2 ^ 5 + 19 * p.2 ^ 6 - c) (x-13, y-20) (13, 20) = 0) → (13 * ( 5 + 36 * (x-13)) + 20 * ( 5 + 10 * (y-20) + 10 * (y-20) ^ 4 + 114 * (y-20) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 18 * p.1 ^ 2) (x - 13, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  5 * p.2 + 5 * p.2 ^ 2 + 2 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 13, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 18 * p.1 ^ 2 +  5 * p.2 + 5 * p.2 ^ 2 + 2 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 13, y - 20)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 18 * p.1 ^ 2) (x - 13, y - 20) +
      fderiv ℝ (fun p =>  5 * p.2 + 5 * p.2 ^ 2 + 2 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 13, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 18 * p.1 ^ 2) (x - 13, y - 20)) (13, 20) = 13 * ( 5 + 36 * (x-13))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 18 * p.1 ^ 2) = (fun x =>  5 * x + 18 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  5 * p.2 + 5 * p.2 ^ 2 + 2 * p.2 ^ 5 + 19 * p.2 ^ 6) (x - 13, y - 20)) (13, 20) = 20 * ( 5 + 10 * (y-20) + 10 * (y-20) ^ 4 + 114 * (y-20) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  5 * p.2 + 5 * p.2 ^ 2 + 2 * p.2 ^ 5 + 19 * p.2 ^ 6) = (fun x =>  5 * x + 5 * x ^ 2 + 2 * x ^ 5 + 19 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 20) (13, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 + 3 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 14 * p.1 ^ 5 + 16 * p.1 ^ 6 + 3 * p.1 ^ 7 +  16 * p.2 + 18 * p.2 ^ 2 + 17 * p.2 ^ 5 + 15 * p.2 ^ 6 + 3 * p.2 ^ 7 - c) (x-2, y-12) (2, 12) = 0) → (2 * ( 4 + 6 * (x-2) + 9 * (x-2) ^ 2 + 20 * (x-2) ^ 3 + 70 * (x-2) ^ 4 + 96 * (x-2) ^ 5 + 21 * (x-2) ^ 6) + 12 * ( 16 + 36 * (y-12) + 85 * (y-12) ^ 4 + 90 * (y-12) ^ 5 + 21 * (y-12) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 + 3 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 14 * p.1 ^ 5 + 16 * p.1 ^ 6 + 3 * p.1 ^ 7) (x - 2, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  16 * p.2 + 18 * p.2 ^ 2 + 17 * p.2 ^ 5 + 15 * p.2 ^ 6 + 3 * p.2 ^ 7) (x - 2, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 + 3 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 14 * p.1 ^ 5 + 16 * p.1 ^ 6 + 3 * p.1 ^ 7 +  16 * p.2 + 18 * p.2 ^ 2 + 17 * p.2 ^ 5 + 15 * p.2 ^ 6 + 3 * p.2 ^ 7) (x - 2, y - 12)
      =
      fderiv ℝ (fun p =>  4 * p.1 + 3 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 14 * p.1 ^ 5 + 16 * p.1 ^ 6 + 3 * p.1 ^ 7) (x - 2, y - 12) +
      fderiv ℝ (fun p =>  16 * p.2 + 18 * p.2 ^ 2 + 17 * p.2 ^ 5 + 15 * p.2 ^ 6 + 3 * p.2 ^ 7) (x - 2, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 + 3 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 14 * p.1 ^ 5 + 16 * p.1 ^ 6 + 3 * p.1 ^ 7) (x - 2, y - 12)) (2, 12) = 2 * ( 4 + 6 * (x-2) + 9 * (x-2) ^ 2 + 20 * (x-2) ^ 3 + 70 * (x-2) ^ 4 + 96 * (x-2) ^ 5 + 21 * (x-2) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 + 3 * p.1 ^ 2 + 3 * p.1 ^ 3 + 5 * p.1 ^ 4 + 14 * p.1 ^ 5 + 16 * p.1 ^ 6 + 3 * p.1 ^ 7) = (fun x =>  4 * x + 3 * x ^ 2 + 3 * x ^ 3 + 5 * x ^ 4 + 14 * x ^ 5 + 16 * x ^ 6 + 3 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  16 * p.2 + 18 * p.2 ^ 2 + 17 * p.2 ^ 5 + 15 * p.2 ^ 6 + 3 * p.2 ^ 7) (x - 2, y - 12)) (2, 12) = 12 * ( 16 + 36 * (y-12) + 85 * (y-12) ^ 4 + 90 * (y-12) ^ 5 + 21 * (y-12) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  16 * p.2 + 18 * p.2 ^ 2 + 17 * p.2 ^ 5 + 15 * p.2 ^ 6 + 3 * p.2 ^ 7) = (fun x =>  16 * x + 18 * x ^ 2 + 17 * x ^ 5 + 15 * x ^ 6 + 3 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 2, y - 12) (2, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 19 * p.1 ^ 2 + 8 * p.1 ^ 3 + 13 * p.1 ^ 4 + 17 * p.1 ^ 5 +  14 * p.2 + 11 * p.2 ^ 2 - c) (x-10, y-19) (10, 19) = 0) → (10 * ( 5 + 38 * (x-10) + 24 * (x-10) ^ 2 + 52 * (x-10) ^ 3 + 85 * (x-10) ^ 4) + 19 * ( 14 + 22 * (y-19)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 19 * p.1 ^ 2 + 8 * p.1 ^ 3 + 13 * p.1 ^ 4 + 17 * p.1 ^ 5) (x - 10, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 11 * p.2 ^ 2) (x - 10, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 19 * p.1 ^ 2 + 8 * p.1 ^ 3 + 13 * p.1 ^ 4 + 17 * p.1 ^ 5 +  14 * p.2 + 11 * p.2 ^ 2) (x - 10, y - 19)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 19 * p.1 ^ 2 + 8 * p.1 ^ 3 + 13 * p.1 ^ 4 + 17 * p.1 ^ 5) (x - 10, y - 19) +
      fderiv ℝ (fun p =>  14 * p.2 + 11 * p.2 ^ 2) (x - 10, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 19 * p.1 ^ 2 + 8 * p.1 ^ 3 + 13 * p.1 ^ 4 + 17 * p.1 ^ 5) (x - 10, y - 19)) (10, 19) = 10 * ( 5 + 38 * (x-10) + 24 * (x-10) ^ 2 + 52 * (x-10) ^ 3 + 85 * (x-10) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 19 * p.1 ^ 2 + 8 * p.1 ^ 3 + 13 * p.1 ^ 4 + 17 * p.1 ^ 5) = (fun x =>  5 * x + 19 * x ^ 2 + 8 * x ^ 3 + 13 * x ^ 4 + 17 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 11 * p.2 ^ 2) (x - 10, y - 19)) (10, 19) = 19 * ( 14 + 22 * (y-19))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 11 * p.2 ^ 2) = (fun x =>  14 * x + 11 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 10, y - 19) (10, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 ^ 2 + 11 * p.1 ^ 3 +  8 * p.2 + 20 * p.2 ^ 2 - c) (x-4, y-19) (4, 19) = 0) → (4 * ( 36 * (x-4) + 33 * (x-4) ^ 2) + 19 * ( 8 + 40 * (y-19)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 4, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 20 * p.2 ^ 2) (x - 4, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 ^ 2 + 11 * p.1 ^ 3 +  8 * p.2 + 20 * p.2 ^ 2) (x - 4, y - 19)
      =
      fderiv ℝ (fun p =>  18 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 4, y - 19) +
      fderiv ℝ (fun p =>  8 * p.2 + 20 * p.2 ^ 2) (x - 4, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 ^ 2 + 11 * p.1 ^ 3) (x - 4, y - 19)) (4, 19) = 4 * ( 36 * (x-4) + 33 * (x-4) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 ^ 2 + 11 * p.1 ^ 3) = (fun x =>  18 * x ^ 2 + 11 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 20 * p.2 ^ 2) (x - 4, y - 19)) (4, 19) = 19 * ( 8 + 40 * (y-19))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 20 * p.2 ^ 2) = (fun x =>  8 * x + 20 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 4, y - 19) (4, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 + 19 * p.1 ^ 2 +  15 * p.2 + 4 * p.2 ^ 2 - c) (x-17, y-19) (17, 19) = 0) → (17 * ( 12 + 38 * (x-17)) + 19 * ( 15 + 8 * (y-19)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 + 19 * p.1 ^ 2) (x - 17, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 + 4 * p.2 ^ 2) (x - 17, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 + 19 * p.1 ^ 2 +  15 * p.2 + 4 * p.2 ^ 2) (x - 17, y - 19)
      =
      fderiv ℝ (fun p =>  12 * p.1 + 19 * p.1 ^ 2) (x - 17, y - 19) +
      fderiv ℝ (fun p =>  15 * p.2 + 4 * p.2 ^ 2) (x - 17, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 + 19 * p.1 ^ 2) (x - 17, y - 19)) (17, 19) = 17 * ( 12 + 38 * (x-17))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 + 19 * p.1 ^ 2) = (fun x =>  12 * x + 19 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 + 4 * p.2 ^ 2) (x - 17, y - 19)) (17, 19) = 19 * ( 15 + 8 * (y-19))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 + 4 * p.2 ^ 2) = (fun x =>  15 * x + 4 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 19) (17, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 15 * p.1 ^ 3 + 7 * p.1 ^ 4 +  14 * p.2 ^ 3 + 8 * p.2 ^ 4 + 12 * p.2 ^ 7 - c) (x-20, y-17) (20, 17) = 0) → (20 * ( 8 + 45 * (x-20) ^ 2 + 28 * (x-20) ^ 3) + 17 * ( 42 * (y-17) ^ 2 + 32 * (y-17) ^ 3 + 84 * (y-17) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 15 * p.1 ^ 3 + 7 * p.1 ^ 4) (x - 20, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 ^ 3 + 8 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 20, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 15 * p.1 ^ 3 + 7 * p.1 ^ 4 +  14 * p.2 ^ 3 + 8 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 20, y - 17)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 15 * p.1 ^ 3 + 7 * p.1 ^ 4) (x - 20, y - 17) +
      fderiv ℝ (fun p =>  14 * p.2 ^ 3 + 8 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 20, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 15 * p.1 ^ 3 + 7 * p.1 ^ 4) (x - 20, y - 17)) (20, 17) = 20 * ( 8 + 45 * (x-20) ^ 2 + 28 * (x-20) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 15 * p.1 ^ 3 + 7 * p.1 ^ 4) = (fun x =>  8 * x + 15 * x ^ 3 + 7 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 ^ 3 + 8 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 20, y - 17)) (20, 17) = 17 * ( 42 * (y-17) ^ 2 + 32 * (y-17) ^ 3 + 84 * (y-17) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 ^ 3 + 8 * p.2 ^ 4 + 12 * p.2 ^ 7) = (fun x =>  14 * x ^ 3 + 8 * x ^ 4 + 12 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 17) (20, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 + 16 * p.1 ^ 2 + 13 * p.1 ^ 3 +  10 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 4 * p.2 ^ 5 - c) (x-16, y-12) (16, 12) = 0) → (16 * ( 2 + 32 * (x-16) + 39 * (x-16) ^ 2) + 12 * ( 10 + 4 * (y-12) + 68 * (y-12) ^ 3 + 20 * (y-12) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 + 16 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 16, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 16, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 + 16 * p.1 ^ 2 + 13 * p.1 ^ 3 +  10 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 16, y - 12)
      =
      fderiv ℝ (fun p =>  2 * p.1 + 16 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 16, y - 12) +
      fderiv ℝ (fun p =>  10 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 16, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 + 16 * p.1 ^ 2 + 13 * p.1 ^ 3) (x - 16, y - 12)) (16, 12) = 16 * ( 2 + 32 * (x-16) + 39 * (x-16) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 + 16 * p.1 ^ 2 + 13 * p.1 ^ 3) = (fun x =>  2 * x + 16 * x ^ 2 + 13 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 4 * p.2 ^ 5) (x - 16, y - 12)) (16, 12) = 12 * ( 10 + 4 * (y-12) + 68 * (y-12) ^ 3 + 20 * (y-12) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 + 2 * p.2 ^ 2 + 17 * p.2 ^ 4 + 4 * p.2 ^ 5) = (fun x =>  10 * x + 2 * x ^ 2 + 17 * x ^ 4 + 4 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 12) (16, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 + 6 * p.1 ^ 2 + 19 * p.1 ^ 3 + 7 * p.1 ^ 4 + 16 * p.1 ^ 5 + 10 * p.1 ^ 6 + 9 * p.1 ^ 7 +  7 * p.2 + 17 * p.2 ^ 2 + 7 * p.2 ^ 3 + 19 * p.2 ^ 4 - c) (x-16, y-8) (16, 8) = 0) → (16 * ( 18 + 12 * (x-16) + 57 * (x-16) ^ 2 + 28 * (x-16) ^ 3 + 80 * (x-16) ^ 4 + 60 * (x-16) ^ 5 + 63 * (x-16) ^ 6) + 8 * ( 7 + 34 * (y-8) + 21 * (y-8) ^ 2 + 76 * (y-8) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 + 6 * p.1 ^ 2 + 19 * p.1 ^ 3 + 7 * p.1 ^ 4 + 16 * p.1 ^ 5 + 10 * p.1 ^ 6 + 9 * p.1 ^ 7) (x - 16, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 + 17 * p.2 ^ 2 + 7 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 16, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 + 6 * p.1 ^ 2 + 19 * p.1 ^ 3 + 7 * p.1 ^ 4 + 16 * p.1 ^ 5 + 10 * p.1 ^ 6 + 9 * p.1 ^ 7 +  7 * p.2 + 17 * p.2 ^ 2 + 7 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 16, y - 8)
      =
      fderiv ℝ (fun p =>  18 * p.1 + 6 * p.1 ^ 2 + 19 * p.1 ^ 3 + 7 * p.1 ^ 4 + 16 * p.1 ^ 5 + 10 * p.1 ^ 6 + 9 * p.1 ^ 7) (x - 16, y - 8) +
      fderiv ℝ (fun p =>  7 * p.2 + 17 * p.2 ^ 2 + 7 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 16, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 + 6 * p.1 ^ 2 + 19 * p.1 ^ 3 + 7 * p.1 ^ 4 + 16 * p.1 ^ 5 + 10 * p.1 ^ 6 + 9 * p.1 ^ 7) (x - 16, y - 8)) (16, 8) = 16 * ( 18 + 12 * (x-16) + 57 * (x-16) ^ 2 + 28 * (x-16) ^ 3 + 80 * (x-16) ^ 4 + 60 * (x-16) ^ 5 + 63 * (x-16) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 + 6 * p.1 ^ 2 + 19 * p.1 ^ 3 + 7 * p.1 ^ 4 + 16 * p.1 ^ 5 + 10 * p.1 ^ 6 + 9 * p.1 ^ 7) = (fun x =>  18 * x + 6 * x ^ 2 + 19 * x ^ 3 + 7 * x ^ 4 + 16 * x ^ 5 + 10 * x ^ 6 + 9 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 + 17 * p.2 ^ 2 + 7 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 16, y - 8)) (16, 8) = 8 * ( 7 + 34 * (y-8) + 21 * (y-8) ^ 2 + 76 * (y-8) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 + 17 * p.2 ^ 2 + 7 * p.2 ^ 3 + 19 * p.2 ^ 4) = (fun x =>  7 * x + 17 * x ^ 2 + 7 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 8) (16, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 + 19 * p.1 ^ 2 +  7 * p.2 ^ 3 + 17 * p.2 ^ 4 + 16 * p.2 ^ 5 + 20 * p.2 ^ 6 - c) (x-9, y-11) (9, 11) = 0) → (9 * ( 6 + 38 * (x-9)) + 11 * ( 21 * (y-11) ^ 2 + 68 * (y-11) ^ 3 + 80 * (y-11) ^ 4 + 120 * (y-11) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 + 19 * p.1 ^ 2) (x - 9, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 ^ 3 + 17 * p.2 ^ 4 + 16 * p.2 ^ 5 + 20 * p.2 ^ 6) (x - 9, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 + 19 * p.1 ^ 2 +  7 * p.2 ^ 3 + 17 * p.2 ^ 4 + 16 * p.2 ^ 5 + 20 * p.2 ^ 6) (x - 9, y - 11)
      =
      fderiv ℝ (fun p =>  6 * p.1 + 19 * p.1 ^ 2) (x - 9, y - 11) +
      fderiv ℝ (fun p =>  7 * p.2 ^ 3 + 17 * p.2 ^ 4 + 16 * p.2 ^ 5 + 20 * p.2 ^ 6) (x - 9, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 + 19 * p.1 ^ 2) (x - 9, y - 11)) (9, 11) = 9 * ( 6 + 38 * (x-9))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 + 19 * p.1 ^ 2) = (fun x =>  6 * x + 19 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 ^ 3 + 17 * p.2 ^ 4 + 16 * p.2 ^ 5 + 20 * p.2 ^ 6) (x - 9, y - 11)) (9, 11) = 11 * ( 21 * (y-11) ^ 2 + 68 * (y-11) ^ 3 + 80 * (y-11) ^ 4 + 120 * (y-11) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 ^ 3 + 17 * p.2 ^ 4 + 16 * p.2 ^ 5 + 20 * p.2 ^ 6) = (fun x =>  7 * x ^ 3 + 17 * x ^ 4 + 16 * x ^ 5 + 20 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 11) (9, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 + 11 * p.1 ^ 2 + 9 * p.1 ^ 3 + 10 * p.1 ^ 5 + 5 * p.1 ^ 6 + 5 * p.1 ^ 7 +  20 * p.2 + 19 * p.2 ^ 3 + 9 * p.2 ^ 5 + 14 * p.2 ^ 6 - c) (x-9, y-2) (9, 2) = 0) → (9 * ( 4 + 22 * (x-9) + 27 * (x-9) ^ 2 + 50 * (x-9) ^ 4 + 30 * (x-9) ^ 5 + 35 * (x-9) ^ 6) + 2 * ( 20 + 57 * (y-2) ^ 2 + 45 * (y-2) ^ 4 + 84 * (y-2) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 + 11 * p.1 ^ 2 + 9 * p.1 ^ 3 + 10 * p.1 ^ 5 + 5 * p.1 ^ 6 + 5 * p.1 ^ 7) (x - 9, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 19 * p.2 ^ 3 + 9 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 9, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 + 11 * p.1 ^ 2 + 9 * p.1 ^ 3 + 10 * p.1 ^ 5 + 5 * p.1 ^ 6 + 5 * p.1 ^ 7 +  20 * p.2 + 19 * p.2 ^ 3 + 9 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 9, y - 2)
      =
      fderiv ℝ (fun p =>  4 * p.1 + 11 * p.1 ^ 2 + 9 * p.1 ^ 3 + 10 * p.1 ^ 5 + 5 * p.1 ^ 6 + 5 * p.1 ^ 7) (x - 9, y - 2) +
      fderiv ℝ (fun p =>  20 * p.2 + 19 * p.2 ^ 3 + 9 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 9, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 + 11 * p.1 ^ 2 + 9 * p.1 ^ 3 + 10 * p.1 ^ 5 + 5 * p.1 ^ 6 + 5 * p.1 ^ 7) (x - 9, y - 2)) (9, 2) = 9 * ( 4 + 22 * (x-9) + 27 * (x-9) ^ 2 + 50 * (x-9) ^ 4 + 30 * (x-9) ^ 5 + 35 * (x-9) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 + 11 * p.1 ^ 2 + 9 * p.1 ^ 3 + 10 * p.1 ^ 5 + 5 * p.1 ^ 6 + 5 * p.1 ^ 7) = (fun x =>  4 * x + 11 * x ^ 2 + 9 * x ^ 3 + 10 * x ^ 5 + 5 * x ^ 6 + 5 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 19 * p.2 ^ 3 + 9 * p.2 ^ 5 + 14 * p.2 ^ 6) (x - 9, y - 2)) (9, 2) = 2 * ( 20 + 57 * (y-2) ^ 2 + 45 * (y-2) ^ 4 + 84 * (y-2) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 19 * p.2 ^ 3 + 9 * p.2 ^ 5 + 14 * p.2 ^ 6) = (fun x =>  20 * x + 19 * x ^ 3 + 9 * x ^ 5 + 14 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 2) (9, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  16 * p.1 + 4 * p.1 ^ 3 + 16 * p.1 ^ 4 + 2 * p.1 ^ 5 + 5 * p.1 ^ 6 +  6 * p.2 + 12 * p.2 ^ 2 - c) (x-8, y-16) (8, 16) = 0) → (8 * ( 16 + 12 * (x-8) ^ 2 + 64 * (x-8) ^ 3 + 10 * (x-8) ^ 4 + 30 * (x-8) ^ 5) + 16 * ( 6 + 24 * (y-16)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  16 * p.1 + 4 * p.1 ^ 3 + 16 * p.1 ^ 4 + 2 * p.1 ^ 5 + 5 * p.1 ^ 6) (x - 8, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  6 * p.2 + 12 * p.2 ^ 2) (x - 8, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       16 * p.1 + 4 * p.1 ^ 3 + 16 * p.1 ^ 4 + 2 * p.1 ^ 5 + 5 * p.1 ^ 6 +  6 * p.2 + 12 * p.2 ^ 2) (x - 8, y - 16)
      =
      fderiv ℝ (fun p =>  16 * p.1 + 4 * p.1 ^ 3 + 16 * p.1 ^ 4 + 2 * p.1 ^ 5 + 5 * p.1 ^ 6) (x - 8, y - 16) +
      fderiv ℝ (fun p =>  6 * p.2 + 12 * p.2 ^ 2) (x - 8, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  16 * p.1 + 4 * p.1 ^ 3 + 16 * p.1 ^ 4 + 2 * p.1 ^ 5 + 5 * p.1 ^ 6) (x - 8, y - 16)) (8, 16) = 8 * ( 16 + 12 * (x-8) ^ 2 + 64 * (x-8) ^ 3 + 10 * (x-8) ^ 4 + 30 * (x-8) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  16 * p.1 + 4 * p.1 ^ 3 + 16 * p.1 ^ 4 + 2 * p.1 ^ 5 + 5 * p.1 ^ 6) = (fun x =>  16 * x + 4 * x ^ 3 + 16 * x ^ 4 + 2 * x ^ 5 + 5 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  6 * p.2 + 12 * p.2 ^ 2) (x - 8, y - 16)) (8, 16) = 16 * ( 6 + 24 * (y-16))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  6 * p.2 + 12 * p.2 ^ 2) = (fun x =>  6 * x + 12 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 16) (8, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  11 * p.1 + 8 * p.1 ^ 3 + 13 * p.1 ^ 6 +  4 * p.2 + 2 * p.2 ^ 4 - c) (x-2, y-12) (2, 12) = 0) → (2 * ( 11 + 24 * (x-2) ^ 2 + 78 * (x-2) ^ 5) + 12 * ( 4 + 8 * (y-12) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  11 * p.1 + 8 * p.1 ^ 3 + 13 * p.1 ^ 6) (x - 2, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 2 * p.2 ^ 4) (x - 2, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       11 * p.1 + 8 * p.1 ^ 3 + 13 * p.1 ^ 6 +  4 * p.2 + 2 * p.2 ^ 4) (x - 2, y - 12)
      =
      fderiv ℝ (fun p =>  11 * p.1 + 8 * p.1 ^ 3 + 13 * p.1 ^ 6) (x - 2, y - 12) +
      fderiv ℝ (fun p =>  4 * p.2 + 2 * p.2 ^ 4) (x - 2, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  11 * p.1 + 8 * p.1 ^ 3 + 13 * p.1 ^ 6) (x - 2, y - 12)) (2, 12) = 2 * ( 11 + 24 * (x-2) ^ 2 + 78 * (x-2) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  11 * p.1 + 8 * p.1 ^ 3 + 13 * p.1 ^ 6) = (fun x =>  11 * x + 8 * x ^ 3 + 13 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 2 * p.2 ^ 4) (x - 2, y - 12)) (2, 12) = 12 * ( 4 + 8 * (y-12) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 2 * p.2 ^ 4) = (fun x =>  4 * x + 2 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 2, y - 12) (2, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 + 8 * p.1 ^ 2 + 10 * p.1 ^ 3 +  9 * p.2 + 8 * p.2 ^ 2 - c) (x-17, y-2) (17, 2) = 0) → (17 * ( 18 + 16 * (x-17) + 30 * (x-17) ^ 2) + 2 * ( 9 + 16 * (y-2)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 + 8 * p.1 ^ 2 + 10 * p.1 ^ 3) (x - 17, y - 2))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 + 8 * p.2 ^ 2) (x - 17, y - 2)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 + 8 * p.1 ^ 2 + 10 * p.1 ^ 3 +  9 * p.2 + 8 * p.2 ^ 2) (x - 17, y - 2)
      =
      fderiv ℝ (fun p =>  18 * p.1 + 8 * p.1 ^ 2 + 10 * p.1 ^ 3) (x - 17, y - 2) +
      fderiv ℝ (fun p =>  9 * p.2 + 8 * p.2 ^ 2) (x - 17, y - 2) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 + 8 * p.1 ^ 2 + 10 * p.1 ^ 3) (x - 17, y - 2)) (17, 2) = 17 * ( 18 + 16 * (x-17) + 30 * (x-17) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 + 8 * p.1 ^ 2 + 10 * p.1 ^ 3) = (fun x =>  18 * x + 8 * x ^ 2 + 10 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 + 8 * p.2 ^ 2) (x - 17, y - 2)) (17, 2) = 2 * ( 9 + 16 * (y-2))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 + 8 * p.2 ^ 2) = (fun x =>  9 * x + 8 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 2) (17, 2) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 13 * p.1 ^ 3 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6 +  17 * p.2 + 3 * p.2 ^ 2 + 17 * p.2 ^ 3 - c) (x-20, y-11) (20, 11) = 0) → (20 * ( 13 + 39 * (x-20) ^ 2 + 60 * (x-20) ^ 4 + 66 * (x-20) ^ 5) + 11 * ( 17 + 6 * (y-11) + 51 * (y-11) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 13 * p.1 ^ 3 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) (x - 20, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  17 * p.2 + 3 * p.2 ^ 2 + 17 * p.2 ^ 3) (x - 20, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 13 * p.1 ^ 3 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6 +  17 * p.2 + 3 * p.2 ^ 2 + 17 * p.2 ^ 3) (x - 20, y - 11)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 13 * p.1 ^ 3 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) (x - 20, y - 11) +
      fderiv ℝ (fun p =>  17 * p.2 + 3 * p.2 ^ 2 + 17 * p.2 ^ 3) (x - 20, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 13 * p.1 ^ 3 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) (x - 20, y - 11)) (20, 11) = 20 * ( 13 + 39 * (x-20) ^ 2 + 60 * (x-20) ^ 4 + 66 * (x-20) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 13 * p.1 ^ 3 + 12 * p.1 ^ 5 + 11 * p.1 ^ 6) = (fun x =>  13 * x + 13 * x ^ 3 + 12 * x ^ 5 + 11 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  17 * p.2 + 3 * p.2 ^ 2 + 17 * p.2 ^ 3) (x - 20, y - 11)) (20, 11) = 11 * ( 17 + 6 * (y-11) + 51 * (y-11) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  17 * p.2 + 3 * p.2 ^ 2 + 17 * p.2 ^ 3) = (fun x =>  17 * x + 3 * x ^ 2 + 17 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 20, y - 11) (20, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 9 * p.1 ^ 2 +  18 * p.2 ^ 2 + 12 * p.2 ^ 4 + 16 * p.2 ^ 5 + 8 * p.2 ^ 6 - c) (x-3, y-4) (3, 4) = 0) → (3 * ( 8 + 18 * (x-3)) + 4 * ( 36 * (y-4) + 48 * (y-4) ^ 3 + 80 * (y-4) ^ 4 + 48 * (y-4) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 9 * p.1 ^ 2) (x - 3, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  18 * p.2 ^ 2 + 12 * p.2 ^ 4 + 16 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 3, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 9 * p.1 ^ 2 +  18 * p.2 ^ 2 + 12 * p.2 ^ 4 + 16 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 3, y - 4)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 9 * p.1 ^ 2) (x - 3, y - 4) +
      fderiv ℝ (fun p =>  18 * p.2 ^ 2 + 12 * p.2 ^ 4 + 16 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 3, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 9 * p.1 ^ 2) (x - 3, y - 4)) (3, 4) = 3 * ( 8 + 18 * (x-3))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 9 * p.1 ^ 2) = (fun x =>  8 * x + 9 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  18 * p.2 ^ 2 + 12 * p.2 ^ 4 + 16 * p.2 ^ 5 + 8 * p.2 ^ 6) (x - 3, y - 4)) (3, 4) = 4 * ( 36 * (y-4) + 48 * (y-4) ^ 3 + 80 * (y-4) ^ 4 + 48 * (y-4) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  18 * p.2 ^ 2 + 12 * p.2 ^ 4 + 16 * p.2 ^ 5 + 8 * p.2 ^ 6) = (fun x =>  18 * x ^ 2 + 12 * x ^ 4 + 16 * x ^ 5 + 8 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 4) (3, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  6 * p.1 + 7 * p.1 ^ 2 + 19 * p.1 ^ 3 + 10 * p.1 ^ 4 +  9 * p.2 + 14 * p.2 ^ 2 - c) (x-19, y-3) (19, 3) = 0) → (19 * ( 6 + 14 * (x-19) + 57 * (x-19) ^ 2 + 40 * (x-19) ^ 3) + 3 * ( 9 + 28 * (y-3)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  6 * p.1 + 7 * p.1 ^ 2 + 19 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 19, y - 3))
  (hp2: DifferentiableAt ℝ (fun p =>  9 * p.2 + 14 * p.2 ^ 2) (x - 19, y - 3)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       6 * p.1 + 7 * p.1 ^ 2 + 19 * p.1 ^ 3 + 10 * p.1 ^ 4 +  9 * p.2 + 14 * p.2 ^ 2) (x - 19, y - 3)
      =
      fderiv ℝ (fun p =>  6 * p.1 + 7 * p.1 ^ 2 + 19 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 19, y - 3) +
      fderiv ℝ (fun p =>  9 * p.2 + 14 * p.2 ^ 2) (x - 19, y - 3) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  6 * p.1 + 7 * p.1 ^ 2 + 19 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 19, y - 3)) (19, 3) = 19 * ( 6 + 14 * (x-19) + 57 * (x-19) ^ 2 + 40 * (x-19) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  6 * p.1 + 7 * p.1 ^ 2 + 19 * p.1 ^ 3 + 10 * p.1 ^ 4) = (fun x =>  6 * x + 7 * x ^ 2 + 19 * x ^ 3 + 10 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  9 * p.2 + 14 * p.2 ^ 2) (x - 19, y - 3)) (19, 3) = 3 * ( 9 + 28 * (y-3))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  9 * p.2 + 14 * p.2 ^ 2) = (fun x =>  9 * x + 14 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 3) (19, 3) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  14 * p.1 + 17 * p.1 ^ 2 + 17 * p.1 ^ 3 + 3 * p.1 ^ 4 +  12 * p.2 ^ 2 + 20 * p.2 ^ 3 + 11 * p.2 ^ 4 - c) (x-16, y-8) (16, 8) = 0) → (16 * ( 14 + 34 * (x-16) + 51 * (x-16) ^ 2 + 12 * (x-16) ^ 3) + 8 * ( 24 * (y-8) + 60 * (y-8) ^ 2 + 44 * (y-8) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  14 * p.1 + 17 * p.1 ^ 2 + 17 * p.1 ^ 3 + 3 * p.1 ^ 4) (x - 16, y - 8))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 ^ 2 + 20 * p.2 ^ 3 + 11 * p.2 ^ 4) (x - 16, y - 8)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       14 * p.1 + 17 * p.1 ^ 2 + 17 * p.1 ^ 3 + 3 * p.1 ^ 4 +  12 * p.2 ^ 2 + 20 * p.2 ^ 3 + 11 * p.2 ^ 4) (x - 16, y - 8)
      =
      fderiv ℝ (fun p =>  14 * p.1 + 17 * p.1 ^ 2 + 17 * p.1 ^ 3 + 3 * p.1 ^ 4) (x - 16, y - 8) +
      fderiv ℝ (fun p =>  12 * p.2 ^ 2 + 20 * p.2 ^ 3 + 11 * p.2 ^ 4) (x - 16, y - 8) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  14 * p.1 + 17 * p.1 ^ 2 + 17 * p.1 ^ 3 + 3 * p.1 ^ 4) (x - 16, y - 8)) (16, 8) = 16 * ( 14 + 34 * (x-16) + 51 * (x-16) ^ 2 + 12 * (x-16) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  14 * p.1 + 17 * p.1 ^ 2 + 17 * p.1 ^ 3 + 3 * p.1 ^ 4) = (fun x =>  14 * x + 17 * x ^ 2 + 17 * x ^ 3 + 3 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 ^ 2 + 20 * p.2 ^ 3 + 11 * p.2 ^ 4) (x - 16, y - 8)) (16, 8) = 8 * ( 24 * (y-8) + 60 * (y-8) ^ 2 + 44 * (y-8) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 ^ 2 + 20 * p.2 ^ 3 + 11 * p.2 ^ 4) = (fun x =>  12 * x ^ 2 + 20 * x ^ 3 + 11 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 8) (16, 8) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 19 * p.1 ^ 2 +  4 * p.2 + 19 * p.2 ^ 2 + 5 * p.2 ^ 3 + 13 * p.2 ^ 4 + 20 * p.2 ^ 5 - c) (x-15, y-15) (15, 15) = 0) → (15 * ( 15 + 38 * (x-15)) + 15 * ( 4 + 38 * (y-15) + 15 * (y-15) ^ 2 + 52 * (y-15) ^ 3 + 100 * (y-15) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 19 * p.1 ^ 2) (x - 15, y - 15))
  (hp2: DifferentiableAt ℝ (fun p =>  4 * p.2 + 19 * p.2 ^ 2 + 5 * p.2 ^ 3 + 13 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 15, y - 15)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 19 * p.1 ^ 2 +  4 * p.2 + 19 * p.2 ^ 2 + 5 * p.2 ^ 3 + 13 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 15, y - 15)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 19 * p.1 ^ 2) (x - 15, y - 15) +
      fderiv ℝ (fun p =>  4 * p.2 + 19 * p.2 ^ 2 + 5 * p.2 ^ 3 + 13 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 15, y - 15) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 19 * p.1 ^ 2) (x - 15, y - 15)) (15, 15) = 15 * ( 15 + 38 * (x-15))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 19 * p.1 ^ 2) = (fun x =>  15 * x + 19 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  4 * p.2 + 19 * p.2 ^ 2 + 5 * p.2 ^ 3 + 13 * p.2 ^ 4 + 20 * p.2 ^ 5) (x - 15, y - 15)) (15, 15) = 15 * ( 4 + 38 * (y-15) + 15 * (y-15) ^ 2 + 52 * (y-15) ^ 3 + 100 * (y-15) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  4 * p.2 + 19 * p.2 ^ 2 + 5 * p.2 ^ 3 + 13 * p.2 ^ 4 + 20 * p.2 ^ 5) = (fun x =>  4 * x + 19 * x ^ 2 + 5 * x ^ 3 + 13 * x ^ 4 + 20 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 15, y - 15) (15, 15) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 ^ 2 + 18 * p.1 ^ 3 + 13 * p.1 ^ 4 + 4 * p.1 ^ 5 +  16 * p.2 + 8 * p.2 ^ 2 + 9 * p.2 ^ 4 + 6 * p.2 ^ 5 + 18 * p.2 ^ 6 + 14 * p.2 ^ 7 - c) (x-10, y-4) (10, 4) = 0) → (10 * ( 4 * (x-10) + 54 * (x-10) ^ 2 + 52 * (x-10) ^ 3 + 20 * (x-10) ^ 4) + 4 * ( 16 + 16 * (y-4) + 36 * (y-4) ^ 3 + 30 * (y-4) ^ 4 + 108 * (y-4) ^ 5 + 98 * (y-4) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 ^ 2 + 18 * p.1 ^ 3 + 13 * p.1 ^ 4 + 4 * p.1 ^ 5) (x - 10, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  16 * p.2 + 8 * p.2 ^ 2 + 9 * p.2 ^ 4 + 6 * p.2 ^ 5 + 18 * p.2 ^ 6 + 14 * p.2 ^ 7) (x - 10, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 ^ 2 + 18 * p.1 ^ 3 + 13 * p.1 ^ 4 + 4 * p.1 ^ 5 +  16 * p.2 + 8 * p.2 ^ 2 + 9 * p.2 ^ 4 + 6 * p.2 ^ 5 + 18 * p.2 ^ 6 + 14 * p.2 ^ 7) (x - 10, y - 4)
      =
      fderiv ℝ (fun p =>  2 * p.1 ^ 2 + 18 * p.1 ^ 3 + 13 * p.1 ^ 4 + 4 * p.1 ^ 5) (x - 10, y - 4) +
      fderiv ℝ (fun p =>  16 * p.2 + 8 * p.2 ^ 2 + 9 * p.2 ^ 4 + 6 * p.2 ^ 5 + 18 * p.2 ^ 6 + 14 * p.2 ^ 7) (x - 10, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 ^ 2 + 18 * p.1 ^ 3 + 13 * p.1 ^ 4 + 4 * p.1 ^ 5) (x - 10, y - 4)) (10, 4) = 10 * ( 4 * (x-10) + 54 * (x-10) ^ 2 + 52 * (x-10) ^ 3 + 20 * (x-10) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 ^ 2 + 18 * p.1 ^ 3 + 13 * p.1 ^ 4 + 4 * p.1 ^ 5) = (fun x =>  2 * x ^ 2 + 18 * x ^ 3 + 13 * x ^ 4 + 4 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  16 * p.2 + 8 * p.2 ^ 2 + 9 * p.2 ^ 4 + 6 * p.2 ^ 5 + 18 * p.2 ^ 6 + 14 * p.2 ^ 7) (x - 10, y - 4)) (10, 4) = 4 * ( 16 + 16 * (y-4) + 36 * (y-4) ^ 3 + 30 * (y-4) ^ 4 + 108 * (y-4) ^ 5 + 98 * (y-4) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  16 * p.2 + 8 * p.2 ^ 2 + 9 * p.2 ^ 4 + 6 * p.2 ^ 5 + 18 * p.2 ^ 6 + 14 * p.2 ^ 7) = (fun x =>  16 * x + 8 * x ^ 2 + 9 * x ^ 4 + 6 * x ^ 5 + 18 * x ^ 6 + 14 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 10, y - 4) (10, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 20 * p.1 ^ 2 +  15 * p.2 + 8 * p.2 ^ 2 + 12 * p.2 ^ 3 + 11 * p.2 ^ 4 + 12 * p.2 ^ 6 - c) (x-17, y-10) (17, 10) = 0) → (17 * ( 15 + 40 * (x-17)) + 10 * ( 15 + 16 * (y-10) + 36 * (y-10) ^ 2 + 44 * (y-10) ^ 3 + 72 * (y-10) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 20 * p.1 ^ 2) (x - 17, y - 10))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 + 8 * p.2 ^ 2 + 12 * p.2 ^ 3 + 11 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 17, y - 10)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 20 * p.1 ^ 2 +  15 * p.2 + 8 * p.2 ^ 2 + 12 * p.2 ^ 3 + 11 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 17, y - 10)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 20 * p.1 ^ 2) (x - 17, y - 10) +
      fderiv ℝ (fun p =>  15 * p.2 + 8 * p.2 ^ 2 + 12 * p.2 ^ 3 + 11 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 17, y - 10) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 20 * p.1 ^ 2) (x - 17, y - 10)) (17, 10) = 17 * ( 15 + 40 * (x-17))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 20 * p.1 ^ 2) = (fun x =>  15 * x + 20 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 + 8 * p.2 ^ 2 + 12 * p.2 ^ 3 + 11 * p.2 ^ 4 + 12 * p.2 ^ 6) (x - 17, y - 10)) (17, 10) = 10 * ( 15 + 16 * (y-10) + 36 * (y-10) ^ 2 + 44 * (y-10) ^ 3 + 72 * (y-10) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 + 8 * p.2 ^ 2 + 12 * p.2 ^ 3 + 11 * p.2 ^ 4 + 12 * p.2 ^ 6) = (fun x =>  15 * x + 8 * x ^ 2 + 12 * x ^ 3 + 11 * x ^ 4 + 12 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 10) (17, 10) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 ^ 4 + 4 * p.1 ^ 6 + 7 * p.1 ^ 7 +  10 * p.2 ^ 2 + 18 * p.2 ^ 3 - c) (x-12, y-17) (12, 17) = 0) → (12 * ( 16 * (x-12) ^ 3 + 24 * (x-12) ^ 5 + 49 * (x-12) ^ 6) + 17 * ( 20 * (y-17) + 54 * (y-17) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 ^ 4 + 4 * p.1 ^ 6 + 7 * p.1 ^ 7) (x - 12, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 12, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 ^ 4 + 4 * p.1 ^ 6 + 7 * p.1 ^ 7 +  10 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 12, y - 17)
      =
      fderiv ℝ (fun p =>  4 * p.1 ^ 4 + 4 * p.1 ^ 6 + 7 * p.1 ^ 7) (x - 12, y - 17) +
      fderiv ℝ (fun p =>  10 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 12, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 ^ 4 + 4 * p.1 ^ 6 + 7 * p.1 ^ 7) (x - 12, y - 17)) (12, 17) = 12 * ( 16 * (x-12) ^ 3 + 24 * (x-12) ^ 5 + 49 * (x-12) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 ^ 4 + 4 * p.1 ^ 6 + 7 * p.1 ^ 7) = (fun x =>  4 * x ^ 4 + 4 * x ^ 6 + 7 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 12, y - 17)) (12, 17) = 17 * ( 20 * (y-17) + 54 * (y-17) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 ^ 2 + 18 * p.2 ^ 3) = (fun x =>  10 * x ^ 2 + 18 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 17) (12, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 + 11 * p.1 ^ 2 + 19 * p.1 ^ 3 +  15 * p.2 + 3 * p.2 ^ 2 + 2 * p.2 ^ 3 + 5 * p.2 ^ 4 + 11 * p.2 ^ 5 + 7 * p.2 ^ 6 - c) (x-3, y-7) (3, 7) = 0) → (3 * ( 9 + 22 * (x-3) + 57 * (x-3) ^ 2) + 7 * ( 15 + 6 * (y-7) + 6 * (y-7) ^ 2 + 20 * (y-7) ^ 3 + 55 * (y-7) ^ 4 + 42 * (y-7) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 + 11 * p.1 ^ 2 + 19 * p.1 ^ 3) (x - 3, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 + 3 * p.2 ^ 2 + 2 * p.2 ^ 3 + 5 * p.2 ^ 4 + 11 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 + 11 * p.1 ^ 2 + 19 * p.1 ^ 3 +  15 * p.2 + 3 * p.2 ^ 2 + 2 * p.2 ^ 3 + 5 * p.2 ^ 4 + 11 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 7)
      =
      fderiv ℝ (fun p =>  9 * p.1 + 11 * p.1 ^ 2 + 19 * p.1 ^ 3) (x - 3, y - 7) +
      fderiv ℝ (fun p =>  15 * p.2 + 3 * p.2 ^ 2 + 2 * p.2 ^ 3 + 5 * p.2 ^ 4 + 11 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 + 11 * p.1 ^ 2 + 19 * p.1 ^ 3) (x - 3, y - 7)) (3, 7) = 3 * ( 9 + 22 * (x-3) + 57 * (x-3) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 + 11 * p.1 ^ 2 + 19 * p.1 ^ 3) = (fun x =>  9 * x + 11 * x ^ 2 + 19 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 + 3 * p.2 ^ 2 + 2 * p.2 ^ 3 + 5 * p.2 ^ 4 + 11 * p.2 ^ 5 + 7 * p.2 ^ 6) (x - 3, y - 7)) (3, 7) = 7 * ( 15 + 6 * (y-7) + 6 * (y-7) ^ 2 + 20 * (y-7) ^ 3 + 55 * (y-7) ^ 4 + 42 * (y-7) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 + 3 * p.2 ^ 2 + 2 * p.2 ^ 3 + 5 * p.2 ^ 4 + 11 * p.2 ^ 5 + 7 * p.2 ^ 6) = (fun x =>  15 * x + 3 * x ^ 2 + 2 * x ^ 3 + 5 * x ^ 4 + 11 * x ^ 5 + 7 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 7) (3, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 ^ 2 + 17 * p.1 ^ 4 + 12 * p.1 ^ 7 +  14 * p.2 + 12 * p.2 ^ 3 - c) (x-3, y-12) (3, 12) = 0) → (3 * ( 24 * (x-3) + 68 * (x-3) ^ 3 + 84 * (x-3) ^ 6) + 12 * ( 14 + 36 * (y-12) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 ^ 2 + 17 * p.1 ^ 4 + 12 * p.1 ^ 7) (x - 3, y - 12))
  (hp2: DifferentiableAt ℝ (fun p =>  14 * p.2 + 12 * p.2 ^ 3) (x - 3, y - 12)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 ^ 2 + 17 * p.1 ^ 4 + 12 * p.1 ^ 7 +  14 * p.2 + 12 * p.2 ^ 3) (x - 3, y - 12)
      =
      fderiv ℝ (fun p =>  12 * p.1 ^ 2 + 17 * p.1 ^ 4 + 12 * p.1 ^ 7) (x - 3, y - 12) +
      fderiv ℝ (fun p =>  14 * p.2 + 12 * p.2 ^ 3) (x - 3, y - 12) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 ^ 2 + 17 * p.1 ^ 4 + 12 * p.1 ^ 7) (x - 3, y - 12)) (3, 12) = 3 * ( 24 * (x-3) + 68 * (x-3) ^ 3 + 84 * (x-3) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 ^ 2 + 17 * p.1 ^ 4 + 12 * p.1 ^ 7) = (fun x =>  12 * x ^ 2 + 17 * x ^ 4 + 12 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  14 * p.2 + 12 * p.2 ^ 3) (x - 3, y - 12)) (3, 12) = 12 * ( 14 + 36 * (y-12) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  14 * p.2 + 12 * p.2 ^ 3) = (fun x =>  14 * x + 12 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 12) (3, 12) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  5 * p.1 + 8 * p.1 ^ 2 + 4 * p.1 ^ 3 + 15 * p.1 ^ 4 +  12 * p.2 + 9 * p.2 ^ 2 + 6 * p.2 ^ 3 + 19 * p.2 ^ 4 - c) (x-12, y-20) (12, 20) = 0) → (12 * ( 5 + 16 * (x-12) + 12 * (x-12) ^ 2 + 60 * (x-12) ^ 3) + 20 * ( 12 + 18 * (y-20) + 18 * (y-20) ^ 2 + 76 * (y-20) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  5 * p.1 + 8 * p.1 ^ 2 + 4 * p.1 ^ 3 + 15 * p.1 ^ 4) (x - 12, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 6 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 12, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       5 * p.1 + 8 * p.1 ^ 2 + 4 * p.1 ^ 3 + 15 * p.1 ^ 4 +  12 * p.2 + 9 * p.2 ^ 2 + 6 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 12, y - 20)
      =
      fderiv ℝ (fun p =>  5 * p.1 + 8 * p.1 ^ 2 + 4 * p.1 ^ 3 + 15 * p.1 ^ 4) (x - 12, y - 20) +
      fderiv ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 6 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 12, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  5 * p.1 + 8 * p.1 ^ 2 + 4 * p.1 ^ 3 + 15 * p.1 ^ 4) (x - 12, y - 20)) (12, 20) = 12 * ( 5 + 16 * (x-12) + 12 * (x-12) ^ 2 + 60 * (x-12) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  5 * p.1 + 8 * p.1 ^ 2 + 4 * p.1 ^ 3 + 15 * p.1 ^ 4) = (fun x =>  5 * x + 8 * x ^ 2 + 4 * x ^ 3 + 15 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 9 * p.2 ^ 2 + 6 * p.2 ^ 3 + 19 * p.2 ^ 4) (x - 12, y - 20)) (12, 20) = 20 * ( 12 + 18 * (y-20) + 18 * (y-20) ^ 2 + 76 * (y-20) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 9 * p.2 ^ 2 + 6 * p.2 ^ 3 + 19 * p.2 ^ 4) = (fun x =>  12 * x + 9 * x ^ 2 + 6 * x ^ 3 + 19 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 12, y - 20) (12, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  15 * p.1 + 4 * p.1 ^ 2 +  16 * p.2 + 10 * p.2 ^ 2 - c) (x-19, y-14) (19, 14) = 0) → (19 * ( 15 + 8 * (x-19)) + 14 * ( 16 + 20 * (y-14)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  15 * p.1 + 4 * p.1 ^ 2) (x - 19, y - 14))
  (hp2: DifferentiableAt ℝ (fun p =>  16 * p.2 + 10 * p.2 ^ 2) (x - 19, y - 14)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       15 * p.1 + 4 * p.1 ^ 2 +  16 * p.2 + 10 * p.2 ^ 2) (x - 19, y - 14)
      =
      fderiv ℝ (fun p =>  15 * p.1 + 4 * p.1 ^ 2) (x - 19, y - 14) +
      fderiv ℝ (fun p =>  16 * p.2 + 10 * p.2 ^ 2) (x - 19, y - 14) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  15 * p.1 + 4 * p.1 ^ 2) (x - 19, y - 14)) (19, 14) = 19 * ( 15 + 8 * (x-19))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  15 * p.1 + 4 * p.1 ^ 2) = (fun x =>  15 * x + 4 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  16 * p.2 + 10 * p.2 ^ 2) (x - 19, y - 14)) (19, 14) = 14 * ( 16 + 20 * (y-14))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  16 * p.2 + 10 * p.2 ^ 2) = (fun x =>  16 * x + 10 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 14) (19, 14) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  18 * p.1 + 17 * p.1 ^ 2 +  12 * p.2 + 18 * p.2 ^ 2 - c) (x-13, y-11) (13, 11) = 0) → (13 * ( 18 + 34 * (x-13)) + 11 * ( 12 + 36 * (y-11)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  18 * p.1 + 17 * p.1 ^ 2) (x - 13, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  12 * p.2 + 18 * p.2 ^ 2) (x - 13, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       18 * p.1 + 17 * p.1 ^ 2 +  12 * p.2 + 18 * p.2 ^ 2) (x - 13, y - 11)
      =
      fderiv ℝ (fun p =>  18 * p.1 + 17 * p.1 ^ 2) (x - 13, y - 11) +
      fderiv ℝ (fun p =>  12 * p.2 + 18 * p.2 ^ 2) (x - 13, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  18 * p.1 + 17 * p.1 ^ 2) (x - 13, y - 11)) (13, 11) = 13 * ( 18 + 34 * (x-13))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  18 * p.1 + 17 * p.1 ^ 2) = (fun x =>  18 * x + 17 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  12 * p.2 + 18 * p.2 ^ 2) (x - 13, y - 11)) (13, 11) = 11 * ( 12 + 36 * (y-11))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  12 * p.2 + 18 * p.2 ^ 2) = (fun x =>  12 * x + 18 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 13, y - 11) (13, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 + 7 * p.1 ^ 5 +  7 * p.2 ^ 2 + 9 * p.2 ^ 4 - c) (x-9, y-4) (9, 4) = 0) → (9 * ( 2 + 35 * (x-9) ^ 4) + 4 * ( 14 * (y-4) + 36 * (y-4) ^ 3) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 + 7 * p.1 ^ 5) (x - 9, y - 4))
  (hp2: DifferentiableAt ℝ (fun p =>  7 * p.2 ^ 2 + 9 * p.2 ^ 4) (x - 9, y - 4)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 + 7 * p.1 ^ 5 +  7 * p.2 ^ 2 + 9 * p.2 ^ 4) (x - 9, y - 4)
      =
      fderiv ℝ (fun p =>  2 * p.1 + 7 * p.1 ^ 5) (x - 9, y - 4) +
      fderiv ℝ (fun p =>  7 * p.2 ^ 2 + 9 * p.2 ^ 4) (x - 9, y - 4) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 + 7 * p.1 ^ 5) (x - 9, y - 4)) (9, 4) = 9 * ( 2 + 35 * (x-9) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 + 7 * p.1 ^ 5) = (fun x =>  2 * x + 7 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  7 * p.2 ^ 2 + 9 * p.2 ^ 4) (x - 9, y - 4)) (9, 4) = 4 * ( 14 * (y-4) + 36 * (y-4) ^ 3)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  7 * p.2 ^ 2 + 9 * p.2 ^ 4) = (fun x =>  7 * x ^ 2 + 9 * x ^ 4) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 9, y - 4) (9, 4) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  17 * p.1 + 19 * p.1 ^ 2 + 7 * p.1 ^ 3 + 10 * p.1 ^ 4 +  20 * p.2 + 2 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5 - c) (x-8, y-7) (8, 7) = 0) → (8 * ( 17 + 38 * (x-8) + 21 * (x-8) ^ 2 + 40 * (x-8) ^ 3) + 7 * ( 20 + 4 * (y-7) + 18 * (y-7) ^ 2 + 65 * (y-7) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  17 * p.1 + 19 * p.1 ^ 2 + 7 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 8, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 2 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 8, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       17 * p.1 + 19 * p.1 ^ 2 + 7 * p.1 ^ 3 + 10 * p.1 ^ 4 +  20 * p.2 + 2 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 8, y - 7)
      =
      fderiv ℝ (fun p =>  17 * p.1 + 19 * p.1 ^ 2 + 7 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 8, y - 7) +
      fderiv ℝ (fun p =>  20 * p.2 + 2 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 8, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  17 * p.1 + 19 * p.1 ^ 2 + 7 * p.1 ^ 3 + 10 * p.1 ^ 4) (x - 8, y - 7)) (8, 7) = 8 * ( 17 + 38 * (x-8) + 21 * (x-8) ^ 2 + 40 * (x-8) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  17 * p.1 + 19 * p.1 ^ 2 + 7 * p.1 ^ 3 + 10 * p.1 ^ 4) = (fun x =>  17 * x + 19 * x ^ 2 + 7 * x ^ 3 + 10 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 2 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) (x - 8, y - 7)) (8, 7) = 7 * ( 20 + 4 * (y-7) + 18 * (y-7) ^ 2 + 65 * (y-7) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 2 * p.2 ^ 2 + 6 * p.2 ^ 3 + 13 * p.2 ^ 5) = (fun x =>  20 * x + 2 * x ^ 2 + 6 * x ^ 3 + 13 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 7) (8, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  12 * p.1 ^ 4 + 18 * p.1 ^ 5 +  20 * p.2 ^ 2 + 2 * p.2 ^ 3 - c) (x-16, y-20) (16, 20) = 0) → (16 * ( 48 * (x-16) ^ 3 + 90 * (x-16) ^ 4) + 20 * ( 40 * (y-20) + 6 * (y-20) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  12 * p.1 ^ 4 + 18 * p.1 ^ 5) (x - 16, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 ^ 2 + 2 * p.2 ^ 3) (x - 16, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       12 * p.1 ^ 4 + 18 * p.1 ^ 5 +  20 * p.2 ^ 2 + 2 * p.2 ^ 3) (x - 16, y - 20)
      =
      fderiv ℝ (fun p =>  12 * p.1 ^ 4 + 18 * p.1 ^ 5) (x - 16, y - 20) +
      fderiv ℝ (fun p =>  20 * p.2 ^ 2 + 2 * p.2 ^ 3) (x - 16, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  12 * p.1 ^ 4 + 18 * p.1 ^ 5) (x - 16, y - 20)) (16, 20) = 16 * ( 48 * (x-16) ^ 3 + 90 * (x-16) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  12 * p.1 ^ 4 + 18 * p.1 ^ 5) = (fun x =>  12 * x ^ 4 + 18 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 ^ 2 + 2 * p.2 ^ 3) (x - 16, y - 20)) (16, 20) = 20 * ( 40 * (y-20) + 6 * (y-20) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 ^ 2 + 2 * p.2 ^ 3) = (fun x =>  20 * x ^ 2 + 2 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 20) (16, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  8 * p.1 + 3 * p.1 ^ 2 +  20 * p.2 + 15 * p.2 ^ 2 + 6 * p.2 ^ 4 + 14 * p.2 ^ 6 + 5 * p.2 ^ 7 - c) (x-19, y-7) (19, 7) = 0) → (19 * ( 8 + 6 * (x-19)) + 7 * ( 20 + 30 * (y-7) + 24 * (y-7) ^ 3 + 84 * (y-7) ^ 5 + 35 * (y-7) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  8 * p.1 + 3 * p.1 ^ 2) (x - 19, y - 7))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 6 * p.2 ^ 4 + 14 * p.2 ^ 6 + 5 * p.2 ^ 7) (x - 19, y - 7)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       8 * p.1 + 3 * p.1 ^ 2 +  20 * p.2 + 15 * p.2 ^ 2 + 6 * p.2 ^ 4 + 14 * p.2 ^ 6 + 5 * p.2 ^ 7) (x - 19, y - 7)
      =
      fderiv ℝ (fun p =>  8 * p.1 + 3 * p.1 ^ 2) (x - 19, y - 7) +
      fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 6 * p.2 ^ 4 + 14 * p.2 ^ 6 + 5 * p.2 ^ 7) (x - 19, y - 7) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  8 * p.1 + 3 * p.1 ^ 2) (x - 19, y - 7)) (19, 7) = 19 * ( 8 + 6 * (x-19))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  8 * p.1 + 3 * p.1 ^ 2) = (fun x =>  8 * x + 3 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 6 * p.2 ^ 4 + 14 * p.2 ^ 6 + 5 * p.2 ^ 7) (x - 19, y - 7)) (19, 7) = 7 * ( 20 + 30 * (y-7) + 24 * (y-7) ^ 3 + 84 * (y-7) ^ 5 + 35 * (y-7) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 15 * p.2 ^ 2 + 6 * p.2 ^ 4 + 14 * p.2 ^ 6 + 5 * p.2 ^ 7) = (fun x =>  20 * x + 15 * x ^ 2 + 6 * x ^ 4 + 14 * x ^ 6 + 5 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 7) (19, 7) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  2 * p.1 + 10 * p.1 ^ 3 +  15 * p.2 ^ 2 + 8 * p.2 ^ 3 + 13 * p.2 ^ 4 + 15 * p.2 ^ 6 + 9 * p.2 ^ 7 - c) (x-3, y-18) (3, 18) = 0) → (3 * ( 2 + 30 * (x-3) ^ 2) + 18 * ( 30 * (y-18) + 24 * (y-18) ^ 2 + 52 * (y-18) ^ 3 + 90 * (y-18) ^ 5 + 63 * (y-18) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  2 * p.1 + 10 * p.1 ^ 3) (x - 3, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 ^ 2 + 8 * p.2 ^ 3 + 13 * p.2 ^ 4 + 15 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 3, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       2 * p.1 + 10 * p.1 ^ 3 +  15 * p.2 ^ 2 + 8 * p.2 ^ 3 + 13 * p.2 ^ 4 + 15 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 3, y - 18)
      =
      fderiv ℝ (fun p =>  2 * p.1 + 10 * p.1 ^ 3) (x - 3, y - 18) +
      fderiv ℝ (fun p =>  15 * p.2 ^ 2 + 8 * p.2 ^ 3 + 13 * p.2 ^ 4 + 15 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 3, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  2 * p.1 + 10 * p.1 ^ 3) (x - 3, y - 18)) (3, 18) = 3 * ( 2 + 30 * (x-3) ^ 2)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  2 * p.1 + 10 * p.1 ^ 3) = (fun x =>  2 * x + 10 * x ^ 3) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 ^ 2 + 8 * p.2 ^ 3 + 13 * p.2 ^ 4 + 15 * p.2 ^ 6 + 9 * p.2 ^ 7) (x - 3, y - 18)) (3, 18) = 18 * ( 30 * (y-18) + 24 * (y-18) ^ 2 + 52 * (y-18) ^ 3 + 90 * (y-18) ^ 5 + 63 * (y-18) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 ^ 2 + 8 * p.2 ^ 3 + 13 * p.2 ^ 4 + 15 * p.2 ^ 6 + 9 * p.2 ^ 7) = (fun x =>  15 * x ^ 2 + 8 * x ^ 3 + 13 * x ^ 4 + 15 * x ^ 6 + 9 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 18) (3, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 ^ 2 + 14 * p.1 ^ 4 + 4 * p.1 ^ 5 +  20 * p.2 + 5 * p.2 ^ 2 + 5 * p.2 ^ 3 + 19 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6 - c) (x-8, y-17) (8, 17) = 0) → (8 * ( 18 * (x-8) + 56 * (x-8) ^ 3 + 20 * (x-8) ^ 4) + 17 * ( 20 + 10 * (y-17) + 15 * (y-17) ^ 2 + 76 * (y-17) ^ 3 + 30 * (y-17) ^ 4 + 36 * (y-17) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 ^ 2 + 14 * p.1 ^ 4 + 4 * p.1 ^ 5) (x - 8, y - 17))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 5 * p.2 ^ 2 + 5 * p.2 ^ 3 + 19 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 8, y - 17)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 ^ 2 + 14 * p.1 ^ 4 + 4 * p.1 ^ 5 +  20 * p.2 + 5 * p.2 ^ 2 + 5 * p.2 ^ 3 + 19 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 8, y - 17)
      =
      fderiv ℝ (fun p =>  9 * p.1 ^ 2 + 14 * p.1 ^ 4 + 4 * p.1 ^ 5) (x - 8, y - 17) +
      fderiv ℝ (fun p =>  20 * p.2 + 5 * p.2 ^ 2 + 5 * p.2 ^ 3 + 19 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 8, y - 17) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 ^ 2 + 14 * p.1 ^ 4 + 4 * p.1 ^ 5) (x - 8, y - 17)) (8, 17) = 8 * ( 18 * (x-8) + 56 * (x-8) ^ 3 + 20 * (x-8) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 ^ 2 + 14 * p.1 ^ 4 + 4 * p.1 ^ 5) = (fun x =>  9 * x ^ 2 + 14 * x ^ 4 + 4 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 5 * p.2 ^ 2 + 5 * p.2 ^ 3 + 19 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) (x - 8, y - 17)) (8, 17) = 17 * ( 20 + 10 * (y-17) + 15 * (y-17) ^ 2 + 76 * (y-17) ^ 3 + 30 * (y-17) ^ 4 + 36 * (y-17) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 5 * p.2 ^ 2 + 5 * p.2 ^ 3 + 19 * p.2 ^ 4 + 6 * p.2 ^ 5 + 6 * p.2 ^ 6) = (fun x =>  20 * x + 5 * x ^ 2 + 5 * x ^ 3 + 19 * x ^ 4 + 6 * x ^ 5 + 6 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 8, y - 17) (8, 17) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 ^ 2 + 14 * p.1 ^ 6 +  19 * p.2 ^ 2 + 9 * p.2 ^ 3 + 14 * p.2 ^ 4 + 5 * p.2 ^ 5 - c) (x-19, y-18) (19, 18) = 0) → (19 * ( 40 * (x-19) + 84 * (x-19) ^ 5) + 18 * ( 38 * (y-18) + 27 * (y-18) ^ 2 + 56 * (y-18) ^ 3 + 25 * (y-18) ^ 4) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 ^ 2 + 14 * p.1 ^ 6) (x - 19, y - 18))
  (hp2: DifferentiableAt ℝ (fun p =>  19 * p.2 ^ 2 + 9 * p.2 ^ 3 + 14 * p.2 ^ 4 + 5 * p.2 ^ 5) (x - 19, y - 18)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 ^ 2 + 14 * p.1 ^ 6 +  19 * p.2 ^ 2 + 9 * p.2 ^ 3 + 14 * p.2 ^ 4 + 5 * p.2 ^ 5) (x - 19, y - 18)
      =
      fderiv ℝ (fun p =>  20 * p.1 ^ 2 + 14 * p.1 ^ 6) (x - 19, y - 18) +
      fderiv ℝ (fun p =>  19 * p.2 ^ 2 + 9 * p.2 ^ 3 + 14 * p.2 ^ 4 + 5 * p.2 ^ 5) (x - 19, y - 18) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 ^ 2 + 14 * p.1 ^ 6) (x - 19, y - 18)) (19, 18) = 19 * ( 40 * (x-19) + 84 * (x-19) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 ^ 2 + 14 * p.1 ^ 6) = (fun x =>  20 * x ^ 2 + 14 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  19 * p.2 ^ 2 + 9 * p.2 ^ 3 + 14 * p.2 ^ 4 + 5 * p.2 ^ 5) (x - 19, y - 18)) (19, 18) = 18 * ( 38 * (y-18) + 27 * (y-18) ^ 2 + 56 * (y-18) ^ 3 + 25 * (y-18) ^ 4)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  19 * p.2 ^ 2 + 9 * p.2 ^ 3 + 14 * p.2 ^ 4 + 5 * p.2 ^ 5) = (fun x =>  19 * x ^ 2 + 9 * x ^ 3 + 14 * x ^ 4 + 5 * x ^ 5) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 18) (19, 18) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  10 * p.1 + 14 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 8 * p.1 ^ 5 +  15 * p.2 ^ 3 + 16 * p.2 ^ 4 + 12 * p.2 ^ 7 - c) (x-3, y-16) (3, 16) = 0) → (3 * ( 10 + 28 * (x-3) + 9 * (x-3) ^ 2 + 52 * (x-3) ^ 3 + 40 * (x-3) ^ 4) + 16 * ( 45 * (y-16) ^ 2 + 64 * (y-16) ^ 3 + 84 * (y-16) ^ 6) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  10 * p.1 + 14 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 8 * p.1 ^ 5) (x - 3, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  15 * p.2 ^ 3 + 16 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 3, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       10 * p.1 + 14 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 8 * p.1 ^ 5 +  15 * p.2 ^ 3 + 16 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 3, y - 16)
      =
      fderiv ℝ (fun p =>  10 * p.1 + 14 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 8 * p.1 ^ 5) (x - 3, y - 16) +
      fderiv ℝ (fun p =>  15 * p.2 ^ 3 + 16 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 3, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  10 * p.1 + 14 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 8 * p.1 ^ 5) (x - 3, y - 16)) (3, 16) = 3 * ( 10 + 28 * (x-3) + 9 * (x-3) ^ 2 + 52 * (x-3) ^ 3 + 40 * (x-3) ^ 4)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  10 * p.1 + 14 * p.1 ^ 2 + 3 * p.1 ^ 3 + 13 * p.1 ^ 4 + 8 * p.1 ^ 5) = (fun x =>  10 * x + 14 * x ^ 2 + 3 * x ^ 3 + 13 * x ^ 4 + 8 * x ^ 5) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  15 * p.2 ^ 3 + 16 * p.2 ^ 4 + 12 * p.2 ^ 7) (x - 3, y - 16)) (3, 16) = 16 * ( 45 * (y-16) ^ 2 + 64 * (y-16) ^ 3 + 84 * (y-16) ^ 6)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  15 * p.2 ^ 3 + 16 * p.2 ^ 4 + 12 * p.2 ^ 7) = (fun x =>  15 * x ^ 3 + 16 * x ^ 4 + 12 * x ^ 7) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 3, y - 16) (3, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  13 * p.1 + 18 * p.1 ^ 4 + 11 * p.1 ^ 5 + 15 * p.1 ^ 6 +  10 * p.2 + 15 * p.2 ^ 2 + 16 * p.2 ^ 3 - c) (x-16, y-19) (16, 19) = 0) → (16 * ( 13 + 72 * (x-16) ^ 3 + 55 * (x-16) ^ 4 + 90 * (x-16) ^ 5) + 19 * ( 10 + 30 * (y-19) + 48 * (y-19) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  13 * p.1 + 18 * p.1 ^ 4 + 11 * p.1 ^ 5 + 15 * p.1 ^ 6) (x - 16, y - 19))
  (hp2: DifferentiableAt ℝ (fun p =>  10 * p.2 + 15 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 16, y - 19)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       13 * p.1 + 18 * p.1 ^ 4 + 11 * p.1 ^ 5 + 15 * p.1 ^ 6 +  10 * p.2 + 15 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 16, y - 19)
      =
      fderiv ℝ (fun p =>  13 * p.1 + 18 * p.1 ^ 4 + 11 * p.1 ^ 5 + 15 * p.1 ^ 6) (x - 16, y - 19) +
      fderiv ℝ (fun p =>  10 * p.2 + 15 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 16, y - 19) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  13 * p.1 + 18 * p.1 ^ 4 + 11 * p.1 ^ 5 + 15 * p.1 ^ 6) (x - 16, y - 19)) (16, 19) = 16 * ( 13 + 72 * (x-16) ^ 3 + 55 * (x-16) ^ 4 + 90 * (x-16) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  13 * p.1 + 18 * p.1 ^ 4 + 11 * p.1 ^ 5 + 15 * p.1 ^ 6) = (fun x =>  13 * x + 18 * x ^ 4 + 11 * x ^ 5 + 15 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  10 * p.2 + 15 * p.2 ^ 2 + 16 * p.2 ^ 3) (x - 16, y - 19)) (16, 19) = 19 * ( 10 + 30 * (y-19) + 48 * (y-19) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  10 * p.2 + 15 * p.2 ^ 2 + 16 * p.2 ^ 3) = (fun x =>  10 * x + 15 * x ^ 2 + 16 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 16, y - 19) (16, 19) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 + 8 * p.1 ^ 4 +  11 * p.2 ^ 2 + 18 * p.2 ^ 3 - c) (x-7, y-16) (7, 16) = 0) → (7 * ( 9 + 32 * (x-7) ^ 3) + 16 * ( 22 * (y-16) + 54 * (y-16) ^ 2) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 + 8 * p.1 ^ 4) (x - 7, y - 16))
  (hp2: DifferentiableAt ℝ (fun p =>  11 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 7, y - 16)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 + 8 * p.1 ^ 4 +  11 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 7, y - 16)
      =
      fderiv ℝ (fun p =>  9 * p.1 + 8 * p.1 ^ 4) (x - 7, y - 16) +
      fderiv ℝ (fun p =>  11 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 7, y - 16) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 + 8 * p.1 ^ 4) (x - 7, y - 16)) (7, 16) = 7 * ( 9 + 32 * (x-7) ^ 3)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 + 8 * p.1 ^ 4) = (fun x =>  9 * x + 8 * x ^ 4) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  11 * p.2 ^ 2 + 18 * p.2 ^ 3) (x - 7, y - 16)) (7, 16) = 16 * ( 22 * (y-16) + 54 * (y-16) ^ 2)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  11 * p.2 ^ 2 + 18 * p.2 ^ 3) = (fun x =>  11 * x ^ 2 + 18 * x ^ 3) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 7, y - 16) (7, 16) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  20 * p.1 + 10 * p.1 ^ 2 +  20 * p.2 + 20 * p.2 ^ 2 - c) (x-19, y-10) (19, 10) = 0) → (19 * ( 20 + 20 * (x-19)) + 10 * ( 20 + 40 * (y-10)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  20 * p.1 + 10 * p.1 ^ 2) (x - 19, y - 10))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 20 * p.2 ^ 2) (x - 19, y - 10)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       20 * p.1 + 10 * p.1 ^ 2 +  20 * p.2 + 20 * p.2 ^ 2) (x - 19, y - 10)
      =
      fderiv ℝ (fun p =>  20 * p.1 + 10 * p.1 ^ 2) (x - 19, y - 10) +
      fderiv ℝ (fun p =>  20 * p.2 + 20 * p.2 ^ 2) (x - 19, y - 10) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  20 * p.1 + 10 * p.1 ^ 2) (x - 19, y - 10)) (19, 10) = 19 * ( 20 + 20 * (x-19))  := by
    have hp1comp : (fun p : ℝ × ℝ =>  20 * p.1 + 10 * p.1 ^ 2) = (fun x =>  20 * x + 10 * x ^ 2) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 20 * p.2 ^ 2) (x - 19, y - 10)) (19, 10) = 10 * ( 20 + 40 * (y-10))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 20 * p.2 ^ 2) = (fun x =>  20 * x + 20 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 19, y - 10) (19, 10) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  9 * p.1 ^ 4 + 13 * p.1 ^ 7 +  20 * p.2 + 15 * p.2 ^ 2 + 12 * p.2 ^ 3 + 19 * p.2 ^ 4 + 15 * p.2 ^ 5 + 15 * p.2 ^ 6 - c) (x-17, y-11) (17, 11) = 0) → (17 * ( 36 * (x-17) ^ 3 + 91 * (x-17) ^ 6) + 11 * ( 20 + 30 * (y-11) + 36 * (y-11) ^ 2 + 76 * (y-11) ^ 3 + 75 * (y-11) ^ 4 + 90 * (y-11) ^ 5) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  9 * p.1 ^ 4 + 13 * p.1 ^ 7) (x - 17, y - 11))
  (hp2: DifferentiableAt ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 12 * p.2 ^ 3 + 19 * p.2 ^ 4 + 15 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 17, y - 11)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       9 * p.1 ^ 4 + 13 * p.1 ^ 7 +  20 * p.2 + 15 * p.2 ^ 2 + 12 * p.2 ^ 3 + 19 * p.2 ^ 4 + 15 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 17, y - 11)
      =
      fderiv ℝ (fun p =>  9 * p.1 ^ 4 + 13 * p.1 ^ 7) (x - 17, y - 11) +
      fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 12 * p.2 ^ 3 + 19 * p.2 ^ 4 + 15 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 17, y - 11) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  9 * p.1 ^ 4 + 13 * p.1 ^ 7) (x - 17, y - 11)) (17, 11) = 17 * ( 36 * (x-17) ^ 3 + 91 * (x-17) ^ 6)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  9 * p.1 ^ 4 + 13 * p.1 ^ 7) = (fun x =>  9 * x ^ 4 + 13 * x ^ 7) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  20 * p.2 + 15 * p.2 ^ 2 + 12 * p.2 ^ 3 + 19 * p.2 ^ 4 + 15 * p.2 ^ 5 + 15 * p.2 ^ 6) (x - 17, y - 11)) (17, 11) = 11 * ( 20 + 30 * (y-11) + 36 * (y-11) ^ 2 + 76 * (y-11) ^ 3 + 75 * (y-11) ^ 4 + 90 * (y-11) ^ 5)  := by
    have hp2comp : (fun p : ℝ × ℝ =>  20 * p.2 + 15 * p.2 ^ 2 + 12 * p.2 ^ 3 + 19 * p.2 ^ 4 + 15 * p.2 ^ 5 + 15 * p.2 ^ 6) = (fun x =>  20 * x + 15 * x ^ 2 + 12 * x ^ 3 + 19 * x ^ 4 + 15 * x ^ 5 + 15 * x ^ 6) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 11) (17, 11) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _

example (x y c: ℝ) : (fderiv ℝ (fun p ↦  4 * p.1 ^ 2 + 9 * p.1 ^ 4 + 6 * p.1 ^ 6 +  8 * p.2 + 6 * p.2 ^ 2 - c) (x-17, y-20) (17, 20) = 0) → (17 * ( 8 * (x-17) + 36 * (x-17) ^ 3 + 36 * (x-17) ^ 5) + 20 * ( 8 + 12 * (y-20)) = 0) := by
  intro h
  rw [fderiv_sub] at h

  have h_split
  (hp1: DifferentiableAt ℝ (fun p =>  4 * p.1 ^ 2 + 9 * p.1 ^ 4 + 6 * p.1 ^ 6) (x - 17, y - 20))
  (hp2: DifferentiableAt ℝ (fun p =>  8 * p.2 + 6 * p.2 ^ 2) (x - 17, y - 20)):
    fderiv ℝ (fun p : ℝ × ℝ =>
       4 * p.1 ^ 2 + 9 * p.1 ^ 4 + 6 * p.1 ^ 6 +  8 * p.2 + 6 * p.2 ^ 2) (x - 17, y - 20)
      =
      fderiv ℝ (fun p =>  4 * p.1 ^ 2 + 9 * p.1 ^ 4 + 6 * p.1 ^ 6) (x - 17, y - 20) +
      fderiv ℝ (fun p =>  8 * p.2 + 6 * p.2 ^ 2) (x - 17, y - 20) := by
    rw [←fderiv_add]
    congr 1
    ext p
    ring
    exact hp1
    exact hp2

  rw [h_split] at h
  rw [ContinuousLinearMap.sub_apply] at h
  rw [ContinuousLinearMap.add_apply] at h

  have h1 : (fderiv ℝ (fun p =>  4 * p.1 ^ 2 + 9 * p.1 ^ 4 + 6 * p.1 ^ 6) (x - 17, y - 20)) (17, 20) = 17 * ( 8 * (x-17) + 36 * (x-17) ^ 3 + 36 * (x-17) ^ 5)  := by
    have hp1comp : (fun p : ℝ × ℝ =>  4 * p.1 ^ 2 + 9 * p.1 ^ 4 + 6 * p.1 ^ 6) = (fun x =>  4 * x ^ 2 + 9 * x ^ 4 + 6 * x ^ 6) ∘ (fun p => p.1) := rfl
    rw [hp1comp]
    rw [fderiv_comp]
    rw [fderiv_fst]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_fst']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_fst

  have h2 : (fderiv ℝ (fun p =>  8 * p.2 + 6 * p.2 ^ 2) (x - 17, y - 20)) (17, 20) = 20 * ( 8 + 12 * (y-20))  := by
    have hp2comp : (fun p : ℝ × ℝ =>  8 * p.2 + 6 * p.2 ^ 2) = (fun x =>  8 * x + 6 * x ^ 2) ∘ (fun p => p.2) := rfl
    rw [hp2comp]
    rw [fderiv_comp]
    rw [fderiv_snd]
    rw [←deriv_fderiv]
    nth_rewrite 1 [deriv_add]
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_id'']
    nth_rewrite 1 [deriv_mul]
    nth_rewrite 1 [deriv_const]
    nth_rewrite 1 [deriv_pow'']
    nth_rewrite 1 [deriv_id'']

    rw [ContinuousLinearMap.comp_apply]
    rw [ContinuousLinearMap.smulRight_apply]
    rw [ContinuousLinearMap.coe_snd']
    field_simp
    ring
    exact differentiableAt_id
    exact differentiableAt_const _
    exact differentiableAt_pow _
    exact differentiableAt_const _
    exact differentiableAt_id
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)
    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))

    exact differentiableAt_snd

  have h3 : fderiv ℝ (fun p : ℝ × ℝ => (c:ℝ)) (x - 17, y - 20) (17, 20) = 0 := by
    rw [fderiv_const]
    field_simp

  rw [h1] at h
  rw [h2] at h
  rw [h3] at h
  ring_nf at h
  linarith

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_fst.pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_snd.pow _))

  exact differentiableAt_const _
