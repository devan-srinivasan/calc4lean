[
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 5 * x ^ 5 - 82 * x ^ 2 + 127 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 25 * x ^ 4 - 164 * x + 127 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 100 * x ^ 3 - 164 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x ^ 6 + 5 * x ^ 5 - 82 * x ^ 2 + 127 * x has a local maximum at x=1, we need to demonstrate two conditions: f'(1) = 0 and f''(1) < 0. First, we derive the first derivative f'(x) and confirm it equals 0 at x=1 by substituting and simplifying. Next, we derive the second derivative f''(x) and show it is negative at x=1 through substitution and simplification. The process involves systematically applying derivative rules and ensuring the function's differentiability at required points. The proof is structured into clear steps, focusing on the necessary calculations and logical arguments to establish the local maximum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 - x ^ 3  ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 - 3 * x ^ 2   := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 - 6 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that both the first and second derivatives of the function f(x) = 2 * x^4 - x^3 are zero at x = 0. Begin by defining the function. Next, calculate the first derivative f'(x) = 8 * x^3 - 3 * x^2 by extending with respect to x, expanding f(x), applying derivative rules, computing derivatives of each term, simplifying, and justifying differentiability. Then, find the second derivative f''(x) = 24 * x^2 - 6 * x using a similar process. Finally, split the main goal into two parts: showing f'(0) = 0 and f''(0) = 0, substituting x = 0 into the derived formulas, and simplifying to confirm both derivatives equal zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 17 * x ^ 2 + 96 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 34 * x + 96 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 34 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To verify that the function f(x) = x^3 - 17x^2 + 96x has a minimum at x = 6, we need to show that the first derivative f'(6) is zero and the second derivative f''(6) is positive. First, we define the function and calculate its first derivative, f'(x) = 3x^2 - 34x + 96, by applying derivative rules and simplifying. Next, we find the second derivative, f''(x) = 6x - 34, using similar methods. The final goal is divided into two parts: substituting x = 6 into f' to confirm it equals zero, and substituting x = 6 into f'' to ensure it is positive. This process involves justifying differentiability at each step."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 121 * x ^ 2 + 324 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 242 * x + 324 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 242 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^4 - 121 * x^2 + 324 * x has a maximum at x = 2 by proving two conditions: f'(2) = 0 and f''(2) < 0. First, define the function and derive the first derivative f'(x) = 20 * x^3 - 242 * x + 324, ensuring to justify differentiability and simplify the expression. Next, derive the second derivative f''(x) = 60 * x^2 - 242, again confirming differentiability and simplifying. Finally, evaluate f'(2) to confirm it equals zero and compute f''(2) to show it is negative, thus establishing that x = 2 is indeed a maximum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 + 30 * x ^ 2 + 60 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 + 60 * x + 60 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x + 60 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function f(x) = 5 * x^3 + 30 * x^2 + 60 * x vanish at x = -2. First, define the function and compute the first derivative f'(x) = 15 * x^2 + 60 * x + 60 by applying differentiation rules and combining like terms. Next, find the second derivative f''(x) = 30 * x + 60 using the result from the first derivative, again applying differentiation rules. After establishing differentiability for both f and f', use a case split to separately show that f'(-2) = 0 and f''(-2) = 0 by substituting x = -2 into the derived formulas and simplifying to confirm both equal zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 - 4 * x ^ 5 + 4 * x ^ 4 - 3726 * x ^ 2 - 17388 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 - 20 * x ^ 4 + 16 * x ^ 3 - 7452 * x - 17388 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 80 * x ^ 3 + 48 * x ^ 2 - 7452 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the first and second derivatives of the function \\( f(x) = 2x^6 - 4x^5 + 4x^4 - 3726x^2 - 17388x \\) equal zero at \\( x = -3 \\). First, define \\( f(x) \\) and compute its first derivative \\( f'(x) = 12x^5 - 20x^4 + 16x^3 - 7452x - 17388 \\) by applying derivative rules and simplifying. Next, find the second derivative \\( f''(x) = 60x^4 - 80x^3 + 48x^2 - 7452 \\) using similar methods. Finally, evaluate both derivatives at \\( x = -3 \\) by substituting into the respective equations \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\) and simplifying the results to confirm that they vanish at this point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 has a minimum at x=0, we need to demonstrate two conditions: f'(0) = 0 and f''(0) > 0. First, we define the function and calculate its first derivative, f'(x) = 2x, by applying derivative rules and simplifying. Next, we find the second derivative, f''(x) = 2, using similar steps. We then split the proof into two parts: verifying that f'(0) equals zero and that f''(0) is greater than zero. By substituting x=0 into both derivatives, we confirm that f'(0) = 0 and f''(0) = 2, thus establishing that f(x) has a minimum at x=0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 + 3 * x ^ 3 + 20 * x - 17 * x ^ 2) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 + 9 * x ^ 2 + 20 - 34 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 + 18 * x - 34 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^5 + 3x^3 + 20x - 17x^2 has a minimum at x = 1 by demonstrating that f'(1) = 0 and f''(1) > 0. First, define the function and compute its first derivative, f'(x), using derivative rules and algebraic simplification. Next, calculate the second derivative, f''(x), following similar steps. The proof is divided into two main parts: verifying that f'(1) equals zero and that f''(1) is positive. Substitute x = 1 into both derivatives to confirm these conditions, thereby establishing that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 + 2 * x ^ 3 - 214 * x ^ 2 + 1104 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 + 6 * x ^ 2 - 428 * x + 1104 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 + 12 * x - 428 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x ^ 4 + 2 * x ^ 3 - 214 * x ^ 2 + 1104 * x has a local minimum at x=4, we need to demonstrate two conditions: f'(4) = 0 and f''(4) > 0. First, define the function and calculate its first derivative, f'(x) = 8 * x ^ 3 + 6 * x ^ 2 - 428 * x + 1104, by applying differentiation theorems and simplifying. Next, find the second derivative, f''(x) = 24 * x ^ 2 + 12 * x - 428, using similar methods. Finally, evaluate both derivatives at x=4 to confirm that f'(4) equals zero and f''(4) is positive, thereby establishing that a local minimum exists at this point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 3 * x ^ 5 - x ^ 4 + 4 * x ^ 3 + 109488 * x - 17230 * x ^ 2) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 15 * x ^ 4 - 4 * x ^ 3 + 12 * x ^ 2 + 109488 - 34460 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 60 * x ^ 3 - 12 * x ^ 2 + 24 * x - 34460 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 4x^6 + 3x^5 - x^4 + 4x^3 + 109488x - 17230x^2 \\) has a local minimum at \\( x=4 \\), we need to demonstrate two conditions: \\( f'(4) = 0 \\) and \\( f''(4) > 0 \\). First, we derive the first derivative \\( f'(x) \\) and confirm its differentiability, then simplify it. Next, we derive the second derivative \\( f''(x) \\) and ensure its differentiability as well. Finally, we evaluate both derivatives at \\( x=4 \\): substituting into \\( f'(x) \\) should yield zero, while substituting into \\( f''(x) \\) should yield a positive value, confirming the local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 36 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 36 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 3 * x^2 + 36 * x has a minimum at x = -6, we need to demonstrate two conditions: f'(-6) = 0 and f''(-6) > 0. First, define the function and calculate its first derivative, f'(x) = 6 * x + 36, by applying derivative rules and simplifying. Next, find the second derivative, f''(x) = 6, confirming its differentiability. Then, split the proof into two parts: substitute -6 into f' to show f'(-6) = 0, and substitute -6 into f'' to show f''(-6) > 0. This process validates that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + 2 * x ^ 5 + x ^ 4 - 4 * x ^ 3 - 93166 * x ^ 2 - 896376 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 10 * x ^ 4 + 4 * x ^ 3 - 12 * x ^ 2 - 186332 * x - 896376 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 40 * x ^ 3 + 12 * x ^ 2 - 24 * x - 186332 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^6 + 2 * x^5 + x^4 - 4 * x^3 - 93166 * x^2 - 896376 * x has a minimum at x = -6. This involves proving two conditions: f'(-6) = 0 and f''(-6) > 0. First, derive the first derivative f'(x) and confirm its formula through differentiation rules, then simplify. Next, derive the second derivative f''(x) using similar methods. After establishing both derivatives, substitute x = -6 into f' and f'' to verify that f'(-6) equals zero and f''(-6) is positive, thus confirming the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - x ^ 4 - 214 * x ^ 2 + 987 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 4 * x ^ 3 - 428 * x + 987 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 12 * x ^ 2 - 428 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = x^5 - x^4 - 214x^2 + 987x \\) has a local minimum at \\( x = 3 \\), we need to demonstrate two conditions: \\( f'(3) = 0 \\) and \\( f''(3) > 0 \\). First, we define the function and calculate its first derivative \\( f'(x) = 5x^4 - 4x^3 - 428x + 987 \\) by applying derivative rules and simplifying. Next, we compute the second derivative \\( f''(x) = 20x^3 - 12x^2 - 428 \\) using similar methods. Finally, we evaluate both derivatives at \\( x = 3 \\) to confirm that \\( f'(3) = 0 \\) and \\( f''(3) > 0 \\), thus establishing the presence of a local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 15 * x ^ 2 + 15 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 30 * x + 15 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 30 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that both the first and second derivatives of the function f(x) = 5 * x^3 - 15 * x^2 + 15 * x are zero at x = 1. First, define the function and compute the first derivative f'(x) = 15 * x^2 - 30 * x + 15 by applying derivative rules and simplifying. Next, compute the second derivative f''(x) = 30 * x - 30 using similar steps. After establishing differentiability for both derivatives, evaluate f'(1) and f''(1) by substituting x = 1 into their respective formulas and confirming that both equal zero through calculation."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 - 5 * x ^ 4 - 4 * x ^ 3 - 258 * x ^ 2 + 840 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 - 20 * x ^ 3 - 12 * x ^ 2 - 516 * x + 840 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 - 60 * x ^ 2 - 24 * x - 516 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^5 - 5 * x^4 - 4 * x^3 - 258 * x^2 + 840 * x has a local maximum at x = 2. This involves proving two conditions: f'(2) = 0 and f''(2) < 0. First, define the function and calculate its first derivative f'(x) = 25 * x^4 - 20 * x^3 - 12 * x^2 - 516 * x + 840, ensuring to justify each step of differentiation. Next, compute the second derivative f''(x) = 100 * x^3 - 60 * x^2 - 24 * x - 516, again justifying the process. Finally, evaluate both derivatives at x = 2, simplifying to confirm that f'(2) equals zero and f''(2 is negative, thus proving the local maximum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 - 4319 * x ^ 2 + 38868 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 - 8638 * x + 38868 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 - 8638 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^5 - 4319 * x^2 + 38868 * x has a local minimum at x = 6 by proving two conditions: f'(6) = 0 and f''(6) > 0. First, define the function and derive its first derivative, f'(x) = 10 * x^4 - 8638 * x + 38868, using derivative rules and confirming differentiability. Next, derive the second derivative, f''(x) = 40 * x^3 - 8638, following similar steps. Finally, evaluate f'(6) and f''(6) by substituting x = 6 into the derived formulas, ensuring that f'(6) equals zero and f''(6) is greater than zero to confirm the local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^2 - 24 * x has a minimum at x=6 by demonstrating that its first derivative f'(x) equals 0 and its second derivative f''(x) is greater than 0 at that point. The process involves several steps: first, define the function and calculate the first derivative f'(x) = 4 * x - 24, applying derivative rules and verifying differentiability. Next, compute the second derivative f''(x) = 4, again using derivative rules and checking differentiability. Finally, evaluate f'(6) to confirm it equals 0 and f''(6) to show it is greater than 0, thus establishing the minimum at x=6."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 24 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 + 24 * x has a minimum at x = -6 by proving two conditions: f'(-6) = 0 and f''(-6) > 0. First, define the function and compute its first derivative, f'(x) = 4 * x + 24, by applying differentiation rules and simplifying. Next, establish that the function is differentiable. Then, calculate the second derivative, f''(x) = 4, using similar reasoning and justification for differentiability. Finally, verify the two conditions by substituting x = -6 into the derived formulas for f' and f'', confirming that f'(-6) equals 0 and f''(-6) is greater than 0, thus proving the existence of a minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 24 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x^2 + 24 * x has a minimum at x = -6, we need to demonstrate two conditions: f'(-6) = 0 and f''(-6) > 0. First, define the function and compute its first derivative, f'(x) = 4 * x + 24, by applying derivative rules and simplifying. Next, find the second derivative, f''(x) = 4, using similar steps. Then, verify the differentiability of both derivatives. Finally, evaluate f'(-6) to confirm it equals zero and f''(-6) to show it is greater than zero, thus establishing that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 75 * x ^ 2 + 375 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 150 * x + 375 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 150 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x ^ 3 - 75 * x ^ 2 + 375 * x has a higher order stationary point at x = 5 by proving f'(5) = 0 and f''(5) = 0. First, define the function and compute its first derivative f'(x) = 15 * x ^ 2 - 150 * x + 375 using differentiation rules, ensuring differentiability at each step. Next, calculate the second derivative f''(x) = 30 * x - 150, again confirming differentiability. Finally, evaluate f'(5) and f''(5) by substituting x = 5 into the respective derivatives and simplify to show both equal zero, thus proving the higher order stationary point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 4 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^2 + 4x has a minimum at x = -2 by demonstrating that f'(-2) = 0 and f''(-2) > 0. First, define the function and calculate the first derivative f'(x) = 2x + 4 through substitution and algebraic simplification. Next, compute the second derivative f''(x) = 2, again using substitution and simplification. Justify differentiability as necessary. Finally, verify the conditions for the minimum by substituting x = -2 into both derivatives: confirm that f'(-2) equals zero and f''(-2) is greater than zero, thus establishing that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 2 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 2 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^2 + 2x has a minimum at x = -1 by verifying two conditions: f'(-1) = 0 and f''(-1) > 0. First, define the function and compute its first derivative, f'(x) = 2x + 2, ensuring it is differentiable everywhere. Next, calculate the second derivative, f''(x) = 2, and confirm its differentiability. Finally, check the two conditions by substituting x = -1 into the derivatives: confirm that f'(-1) equals zero and f''(-1) is greater than zero, thus establishing that x = -1 is indeed a minimum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 18 * x ^ 2 + 108 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 36 * x + 108 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 36 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^3 + 18x^2 + 108x has a stationary point at x = -6 by proving that both its first and second derivatives equal zero at this point. First, define the function and compute the first derivative f'(x) = 3x^2 + 36x + 108 using differentiation rules and algebraic simplification. Next, find the second derivative f''(x) = 6x + 36 by applying similar differentiation techniques. The goal is then divided into two parts: verifying that f'(-6) = 0 and f''(-6) = 0. Substitute x = -6 into both derivatives and confirm that they simplify to zero, thus proving the existence of a stationary point at x = -6."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 + 5 * x ^ 3 - 2635 * x - 376 * x ^ 2) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 + 15 * x ^ 2 - 2635 - 752 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 + 30 * x - 752 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^4 + 5 * x^3 - 2635 * x - 376 * x^2 has a local maximum at x = -5 by proving two conditions: f'(-5) = 0 and f''(-5) < 0. First, define the function and compute its first derivative f'(x) = 12 * x^3 + 15 * x^2 - 2635 - 752 * x, ensuring to apply derivative rules and simplify. Next, compute the second derivative f''(x) = 36 * x^2 + 30 * x - 752, again using derivative rules. Finally, evaluate f'(-5) and f''(-5) by substituting -5 into the respective derivatives, confirming that f'(-5) equals zero and f''(-5) is negative, thus proving the local maximum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 24 * x has a minimum at x = 6 by analyzing its first and second derivatives. First, define the function and calculate the first derivative, f'(x) = 4 * x - 24, ensuring to show its differentiability. Next, compute the second derivative, f''(x) = 4, confirming its differentiability as well. The goal is to verify that f'(6) = 0 and f''(6) > 0. For f'(6), substitute x = 6 into the first derivative and confirm the result is zero. For f''(6), substitute into the second derivative to show it is positive. This process establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 6 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The objective is to demonstrate that the function f(x) = 3 * x^2 + 6 * x has a minimum at x = -1. This involves proving two conditions: f'(-1) = 0 and f''(-1) > 0. First, define the function and calculate its first derivative, f'(x) = 6 * x + 6, by applying derivative rules and simplifying. Next, find the second derivative, f''(x) = 6, using similar steps. Finally, verify the critical point by substituting x = -1 into f'(x) to show it equals zero, and into f''(x) to confirm it is positive. This confirms that x = -1 is indeed a local minimum for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 4 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 4 * x has a minimum at x=1 by proving two conditions: f'(1) = 0 and f''(1) > 0. First, define the function and derive its first derivative, f'(x) = 4 * x - 4, by applying differentiation rules and simplifying. Next, derive the second derivative, f''(x) = 4, using similar methods. After establishing the derivatives, evaluate f'(1) and f''(1) by substituting x = 1 into their respective formulas to confirm that f'(1) equals 0 and f''(1) is greater than 0, thus proving the minimum condition at x=1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 2 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 4 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 3 * x^4 - 2 * x^2 has a local maximum at x=0 by demonstrating that f'(0) = 0 and f''(0) < 0. First, define the function and calculate its first derivative, f'(x) = 12 * x^3 - 4 * x, using differentiation rules and algebraic manipulation. Next, find the second derivative, f''(x) = 36 * x^2 - 4, again applying differentiation rules. The proof is divided into two parts: verifying that f'(0) equals 0 and that f''(0) is negative. Substitute x=0 into both derivatives to confirm these conditions, thereby establishing that a local maximum exists at x=0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 12 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^2 + 12 * x has a local minimum at x = -3 by demonstrating that f'(-3) = 0 and f''(-3) > 0. First, define the function and calculate its first derivative, f'(x) = 4 * x + 12, using differentiation rules. Then, find the second derivative, f''(x) = 4, confirming its differentiability. Next, split the proof into two parts: for f'(-3), substitute -3 into the first derivative to show it equals zero; for f''(-3), evaluate the second derivative at -3 to confirm it is greater than zero. This establishes the conditions for a local minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 - x ^ 5 + 3 * x ^ 3 - 60426 * x ^ 2 - 578988 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 - 5 * x ^ 4 + 9 * x ^ 2 - 120852 * x - 578988 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 - 20 * x ^ 3 + 18 * x - 120852 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the first and second derivatives of the function \\( f(x) = 3x^6 - x^5 + 3x^3 - 60426x^2 - 578988x \\) equal zero at \\( x = -6 \\). First, derive the first derivative \\( f'(x) \\) and confirm its formula through differentiation and simplification. Next, derive the second derivative \\( f''(x) \\) similarly. After establishing both derivatives, evaluate \\( f'(-6) \\) and \\( f''(-6) \\) by substituting \\( -6 \\) into their respective formulas to verify that both results equal zero. The process includes ensuring differentiability and performing necessary algebraic manipulations throughout the derivation steps."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 8 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 8 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 + 8 * x has a minimum at x = -2 by proving two conditions: f'(-2) = 0 and f''(-2) > 0. First, introduce the function and compute its first derivative, f'(x) = 4 * x + 8, by applying derivative theorems and simplifying. Next, calculate the second derivative, f''(x) = 4, using similar methods. After establishing differentiability for both derivatives, split the main goal into two parts: proving f'(-2) = 0 and f''(-2) > 0. Finally, expand and simplify the expressions for f'(-2) and f''(-2) to confirm that f'(-2) equals zero and f''(-2) is greater than zero, thus proving the minimum at x = -2."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 4 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x^2 + 4 * x has a minimum at x = -1, we need to demonstrate two conditions: f'(-1) = 0 and f''(-1) > 0. First, define the function and calculate its first derivative, f'(x) = 4 * x + 4, by applying differentiation rules and simplifying. Next, confirm that f(x) is differentiable everywhere. Then, find the second derivative, f''(x) = 4, using similar differentiation techniques and proving the differentiability of f'(x). Finally, evaluate f'(-1) and f''(-1) by substituting -1 into the derivatives, showing that f'(-1) equals zero and f''(-1) is positive, thus confirming the minimum at x = -1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 3 + 80 * x + 22 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 2 + 80 + 44 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x + 44 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that x = -4 is a critical point of the function f(x) = 2 * x^3 + 80 * x + 22 * x^2, indicating a local maximum. First, define f(x) and compute its first derivative, f'(x) = 6 * x^2 + 80 + 44 * x, ensuring to justify differentiability and simplify the expression. Next, find the second derivative, f''(x) = 12 * x + 44, again justifying differentiability. The goal is to prove two conditions: f'(-4) = 0 and f''(-4) < 0. Substitute -4 into both derivatives, simplify, and confirm that f'(-4) equals zero and f''(-4) is negative, thus establishing that x = -4 is a critical point with a local maximum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 + 5 * x ^ 3 - 39 * x ^ 2 + 47 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 + 15 * x ^ 2 - 78 * x + 47 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 + 30 * x - 78 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function \\( f(x) = 4x^4 + 5x^3 - 39x^2 + 47x \\) equal zero at \\( x = 1 \\). First, define the function and compute the first derivative \\( f'(x) = 16x^3 + 15x^2 - 78x + 47 \\) using differentiation rules. Confirm that polynomials are differentiable everywhere. Next, calculate the second derivative \\( f''(x) = 48x^2 + 30x - 78 \\) and again affirm its differentiability. Finally, evaluate both derivatives at \\( x = 1 \\) by substituting into the derived formulas and simplifying to show that \\( f'(1) = 0 \\) and \\( f''(1) = 0 \\)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 - x ^ 4 - 2347 * x ^ 2 + 17720 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 - 4 * x ^ 3 - 4694 * x + 17720 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 - 12 * x ^ 2 - 4694 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^5 - x^4 - 2347 * x^2 + 17720 * x has a minimum at x=5 by demonstrating that f'(5) = 0 and f''(5) > 0. First, define the function f and derive its first derivative f'(x) = 10 * x^4 - 4 * x^3 - 4694 * x + 17720 through differentiation rules and simplification. Next, derive the second derivative f''(x) = 40 * x^3 - 12 * x^2 - 4694 using similar methods. Finally, evaluate f'(5) and f''(5) by substituting x=5 into their respective formulas, confirming that f'(5) equals zero and f''(5) is positive, thus proving the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 9 * x ^ 2 + 27 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 18 * x + 27 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 18 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the function f(x) = x^3 - 9x^2 + 27x has both its first and second derivatives equal to zero at x = 3. First, define the function and compute the first derivative f'(x) = 3x^2 - 18x + 27 by applying differentiation rules and simplifying. Next, find the second derivative f''(x) = 6x - 18 using similar differentiation techniques. After establishing the differentiability of each term, split the goal into two parts: showing f'(3) = 0 and f''(3) = 0. Finally, substitute x = 3 into both derivatives to verify the calculations and confirm that both derivatives equal zero at this point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^2 has a stationary point at x = 0, indicating a local minimum. First, define the function explicitly. Then, compute the first derivative f'(x) = 6 * x by applying differentiation rules and simplifying. Establish that f is differentiable. Next, find the second derivative f''(x) = 6, again using differentiation rules and confirming differentiability. The goal is to show that f'(0) = 0 and f''(0) > 0. This is achieved by substituting x = 0 into the first derivative to confirm f'(0) = 0, and evaluating the second derivative at x = 0 to show f''(0) > 0, thus proving that x = 0 is a local minimum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 3 + 9 * x ^ 2 + 12 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 2 + 18 * x + 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x + 18 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^3 + 9 * x^2 + 12 * x has a maximum at x = -2 by demonstrating that f'(-2) = 0 and f''(-2) < 0. First, define the function f and calculate its first derivative f'(x) = 6 * x^2 + 18 * x + 12 using differentiation rules. Next, find the second derivative f''(x) = 12 * x + 18. Justify the differentiability of each term in both derivatives. Then, split the proof into two parts: first, show that f'(-2) equals zero by substituting -2 into f', and second, demonstrate that f''(-2) is negative by substituting -2 into f''."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 20 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 20 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 20 * x has a minimum at x = 5 by proving two conditions: f'(5) = 0 and f''(5) > 0. First, define the function and calculate its first derivative, f'(x) = 4 * x - 20, using differentiation rules and simplifying the expression. Next, find the second derivative, f''(x) = 4, and confirm its positivity. The proof involves verifying that f'(5) equals zero and that f''(5) is greater than zero, ensuring the function is differentiable at the necessary points. The process includes expanding and simplifying expressions, as well as substituting values to validate the conditions for a minimum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - 4 * x ^ 4 + 5 * x ^ 3 - 13 * x ^ 2 + 40 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 16 * x ^ 3 + 15 * x ^ 2 - 26 * x + 40 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 48 * x ^ 2 + 30 * x - 26 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task involves analyzing the function f(x) = x^5 - 4x^4 + 5x^3 - 13x^2 + 40x to demonstrate that it has a critical point at x = 2 and that this point is a minimum. First, the derivative f'(x) is calculated using differentiation rules, ensuring to simplify and verify differentiability. Next, the second derivative f''(x) is derived similarly. The final goal is divided into two parts: confirming that f'(2) = 0 and f''(2) > 0. By substituting x = 2 into both derivatives, it is shown that f'(2) equals zero, indicating a critical point, and f''(2) is positive, confirming that this critical point is a minimum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3 - 121 * x ^ 2 - 616 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2 - 242 * x - 616 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x - 242 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^4 - 2 * x^3 - 121 * x^2 - 616 * x has a maximum at x = -4 by proving two conditions: f'(-4) = 0 and f''(-4) < 0. First, define the function and compute its first derivative f'(x) = 4 * x^3 - 6 * x^2 - 242 * x - 616 using differentiation rules. Next, find the second derivative f''(x) = 12 * x^2 - 12 * x - 242. Then, verify the conditions by substituting x = -4 into both derivatives, showing that f'(-4) simplifies to 0 and f''(-4) yields a negative result. This confirms the presence of a maximum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 + x ^ 4 + x ^ 3 + 8445 * x ^ 2 + 76176 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 + 4 * x ^ 3 + 3 * x ^ 2 + 16890 * x + 76176 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 + 12 * x ^ 2 + 6 * x + 16890 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function \\( f(x) = 4x^5 + x^4 + x^3 + 8445x^2 + 76176x \\) has a minimum at \\( x = -6 \\). This involves demonstrating that the first derivative \\( f'(-6) = 0 \\) and the second derivative \\( f''(-6) > 0 \\). The process begins with defining the function and calculating its first derivative \\( f'(x) \\) using differentiation rules. Next, the second derivative \\( f''(x) \\) is derived from \\( f'(x) \\). The final steps require substituting \\( x = -6 \\) into both derivatives to confirm that \\( f'(-6) = 0 \\) and \\( f''(-6) > 0 \\), thereby establishing the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 + x ^ 3 + 279 * x ^ 2 + 1242 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 + 3 * x ^ 2 + 558 * x + 1242 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 + 6 * x + 558 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function \\( f(x) = x^5 + x^3 + 279x^2 + 1242x \\) equal zero at \\( x = -3 \\). First, define the function and compute its first derivative \\( f'(x) = 5x^4 + 3x^2 + 558x + 1242 \\) using the power and sum rules. Next, derive the second derivative \\( f''(x) = 20x^3 + 6x + 558 \\) through similar differentiation techniques. After establishing both derivatives, evaluate \\( f'(-3) \\) and \\( f''(-3) \\) by substituting \\( x = -3 \\) into the derived expressions and simplifying to confirm that both derivatives equal zero, thus achieving the proof goal."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 4 * x ^ 5 + 3 * x ^ 4 + 4 * x ^ 3 - 42387 * x ^ 2 + 340820 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 20 * x ^ 4 + 12 * x ^ 3 + 12 * x ^ 2 - 84774 * x + 340820 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 80 * x ^ 3 + 36 * x ^ 2 + 24 * x - 84774 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To demonstrate that the function \\( f(x) = 5x^6 - 4x^5 + 3x^4 + 4x^3 - 42387x^2 + 340820x \\) has a local maximum at \\( x = 5 \\), follow these steps: First, define the function. Next, compute the first derivative \\( f'(x) = 30x^5 - 20x^4 + 12x^3 + 12x^2 - 84774x + 340820 \\) by applying derivative rules and justifying differentiability. Then, find the second derivative \\( f''(x) = 150x^4 - 80x^3 + 36x^2 + 24x - 84774 \\) using similar methods. Split the goal into two parts: show \\( f'(5) = 0 \\) by substituting \\( x=5 \\) into \\( f'(x) \\) and simplifying, and show \\( f''(5) < 0 \\) by substituting \\( x=5 \\) into \\( f''(x) \\) and confirming it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 + x ^ 4 + 2 * x ^ 3  ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 + 4 * x ^ 3 + 6 * x ^ 2   := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 + 12 * x ^ 2 + 12 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function f(x) = 5 * x^5 + x^4 + 2 * x^3 vanish at x = 0. First, define the function and compute the first derivative f'(x) = 25 * x^4 + 4 * x^3 + 6 * x^2 by applying derivative rules and simplifying. Next, compute the second derivative f''(x) = 100 * x^3 + 12 * x^2 + 12 * x using similar steps. After obtaining both derivatives, evaluate them at x = 0. Finally, confirm that f'(0) = 0 and f''(0) = 0, thereby proving the initial hypothesis."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 - 2 * x ^ 3 - 170 * x ^ 2 + 944 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 - 6 * x ^ 2 - 340 * x + 944 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 - 12 * x - 340 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 2x^4 - 2x^3 - 170x^2 + 944x \\) has a maximum at \\( x = 4 \\), we need to demonstrate two conditions: \\( f'(4) = 0 \\) and \\( f''(4) < 0 \\). First, we define the function and compute its first derivative \\( f'(x) = 8x^3 - 6x^2 - 340x + 944 \\) by applying derivative rules and simplifying. Next, we find the second derivative \\( f''(x) = 24x^2 - 12x - 340 \\) using similar methods. We then evaluate both derivatives at \\( x = 4 \\): for \\( f'(4) \\), we verify it equals zero, and for \\( f''(4) \\), we confirm it is negative. This establishes that \\( f(x) \\) has a maximum at \\( x = 4 \\)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 - 2 * x ^ 4 - x ^ 3 - 2996 * x ^ 2 + 18128 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 - 8 * x ^ 3 - 3 * x ^ 2 - 5992 * x + 18128 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 - 24 * x ^ 2 - 6 * x - 5992 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that both the first and second derivatives of the function \\( f(x) = 5x^5 - 2x^4 - x^3 - 2996x^2 + 18128x \\) equal zero at \\( x = 4 \\). First, define the function and compute the first derivative \\( f'(x) = 25x^4 - 8x^3 - 3x^2 - 5992x + 18128 \\) by applying derivative rules and simplifying. Next, compute the second derivative \\( f''(x) = 100x^3 - 24x^2 - 6x - 5992 \\) using similar methods. Finally, verify that both \\( f'(4) \\) and \\( f''(4) \\) equal zero by substituting \\( x = 4 \\) into the respective derivative formulas and confirming the results through expansion and simplification."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 20 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 20 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 20 * x has a minimum at x=5 by proving that its first derivative f'(x) is zero and its second derivative f''(x) is positive at that point. First, define the function and compute the first derivative f'(x) = 4 * x - 20 using rules of differentiation. Confirm that f(x) is differentiable everywhere. Next, calculate the second derivative f''(x) = 4, ensuring it is also differentiable. Finally, evaluate f'(5) to show it equals zero and f''(5) to confirm it is positive, thus establishing that x=5 is indeed a minimum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 5 * x ^ 3 - 158 * x ^ 2 + 768 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 15 * x ^ 2 - 316 * x + 768 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 30 * x - 316 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^4 + 5x^3 - 158x^2 + 768x has a local maximum at x = 4 by demonstrating two conditions: f'(4) = 0 and f''(4) < 0. First, derive the first derivative f'(x) = 4x^3 + 15x^2 - 316x + 768 using differentiation rules and confirm that f(x) is differentiable everywhere. Next, derive the second derivative f''(x) = 12x^2 + 30x - 316, ensuring its differentiability as well. Finally, evaluate f'(4) and f''(4) by substituting x = 4 into their respective formulas, simplifying to show that f'(4) equals 0 and f''(4) is negative, thus confirming the local maximum at x = 4."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 4 * x ^ 3 - 71 * x ^ 2 + 106 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 12 * x ^ 2 - 142 * x + 106 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 24 * x - 142 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function \\( f(x) = 4x^6 + 4x^3 - 71x^2 + 106x \\) has a critical point at \\( x=1 \\) and that this point is a local minimum. First, define the function and compute its first derivative \\( f'(x) = 24x^5 + 12x^2 - 142x + 106 \\) using the appropriate derivative rules. Next, find the second derivative \\( f''(x) = 120x^4 + 24x - 142 \\). The goal is to show \\( f'(1) = 0 \\) and \\( f''(1) > 0 \\). Substitute \\( x=1 \\) into both derivatives to confirm the evaluations and their respective conditions, ensuring the differentiability of each term throughout the process."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 16 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 16 * x has a minimum at x=4 by verifying two conditions: the first derivative f'(4) = 0 and the second derivative f''(4) > 0. First, define the function and derive the first derivative f'(x) = 4 * x - 16 through differentiation rules and simplification. Next, establish that the second derivative f''(x) = 4 is constant. Then, confirm that f'(4) equals zero by substituting x=4 into the first derivative and validating the equation. Finally, substitute x=4 into the second derivative to show that it is greater than zero, thus confirming the presence of a minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3  - 3 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2  - 3 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^3 - 3x has a local minimum at x = 1, we need to demonstrate two conditions: f'(1) = 0 and f''(1) > 0. First, we define the function and compute its first derivative, f'(x) = 3x^2 - 3, by applying derivative rules and simplifying. Next, we find the second derivative, f''(x) = 6x, using similar steps. After establishing differentiability, we focus on the specific values at x = 1. We substitute x = 1 into f'(x) to show that f'(1) = 0, and into f''(x) to confirm that f''(1) > 0. This completes the proof that f(x) has a local minimum at x = 1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3  + 2 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2  + 2 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to prove that the first and second derivatives of the function f(x) = x^4 - 2x^3 + 2x at x=1 are both zero. First, define the function and calculate the first derivative f'(x) = 4x^3 - 6x^2 + 2 by applying derivative rules and simplifying. Next, find the second derivative f''(x) = 12x^2 - 12x using the first derivative and similar differentiation techniques. After obtaining both derivatives, the next step is to evaluate f'(1) and f''(1) by substituting x=1 into their respective formulas and simplifying to confirm that both equal zero. Each step should include justifications for differentiability and algebraic simplifications."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 + x ^ 3 - 27 * x ^ 2 - 37 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 + 3 * x ^ 2 - 54 * x - 37 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 + 6 * x - 54 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^4 + x^3 - 27 * x^2 - 37 * x has a critical point at x = -1, where both the first and second derivatives equal zero. First, define the function and compute the first derivative f'(x) = 20 * x^3 + 3 * x^2 - 54 * x - 37, ensuring to apply differentiation rules and confirm differentiability. Next, calculate the second derivative f''(x) = 60 * x^2 + 6 * x - 54, again confirming differentiability. Finally, evaluate f'(-1) and f''(-1) by substituting x = -1 into the derived expressions to verify that both derivatives equal zero, thus proving the existence of a critical point at x = -1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 8 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 8 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 - 8x has a minimum at x=4, we need to demonstrate two conditions: f'(4) = 0 and f''(4) > 0. First, we define the function and compute its first derivative, f'(x) = 2x - 8, using differentiation rules and confirming its differentiability. Next, we find the second derivative, f''(x) = 2, again applying differentiation rules and proving differentiability. We then split the proof into two parts: verifying that f'(4) equals 0 by substituting x=4 into the first derivative, and confirming that f''(4) is greater than 0 by substituting into the second derivative. This process establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3 - 180 * x ^ 2 + 1512 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2 - 360 * x + 1512 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x - 360 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to prove that both the first and second derivatives of the function f(x) = x^4 - 2x^3 - 180x^2 + 1512x at x=6 are zero. First, define the function f and derive its first derivative f'(x) = 4x^3 - 6x^2 - 360x + 1512 by applying derivative rules and simplifying. Next, derive the second derivative f''(x) = 12x^2 - 12x - 360 using the previously obtained f'(x). After confirming differentiability, split the goal into two parts: proving f'(6) = 0 and f''(6) = 0. Finally, evaluate both derivatives at x=6 to demonstrate that they equal zero, completing the proof."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - x ^ 5 + x ^ 4 + 3 * x ^ 3 - 1164 * x ^ 2 + 3708 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 5 * x ^ 4 + 4 * x ^ 3 + 9 * x ^ 2 - 2328 * x + 3708 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 20 * x ^ 3 + 12 * x ^ 2 + 18 * x - 2328 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^6 - x^5 + x^4 + 3 * x^3 - 1164 * x^2 + 3708 * x has a local maximum at x = 2 by proving two conditions: f'(2) = 0 and f''(2) < 0. First, define the function and derive its first derivative f'(x) using differentiation rules, ensuring to justify differentiability. Next, derive the second derivative f''(x) similarly. Finally, evaluate both derivatives at x = 2 to confirm that f'(2) equals zero and f''(2) is negative, thus establishing the local maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 18 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 18 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 3 * x^2 + 18 * x has a minimum at x = -3, we need to demonstrate two conditions: f'(-3) = 0 and f''(-3) > 0. First, we assume the function definition and derive the first derivative, f'(x) = 6 * x + 18, by applying differentiation rules and simplifying. Next, we find the second derivative, f''(x) = 6, using similar steps. We then split the proof into two parts: calculating f'(-3) to confirm it equals 0, and calculating f''(-3) to show it equals 6, which is greater than 0. This confirms that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 - x ^ 3 - 397 * x ^ 2 - 2104 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 - 3 * x ^ 2 - 794 * x - 2104 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 - 6 * x - 794 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 4x^4 - x^3 - 397x^2 - 2104x \\) has a maximum at \\( x = -4 \\), we need to demonstrate two conditions: \\( f'(-4) = 0 \\) and \\( f''(-4) < 0 \\). First, we define the function and calculate its first derivative \\( f'(x) = 16x^3 - 3x^2 - 794x - 2104 \\) by applying derivative rules and simplifying. Next, we find the second derivative \\( f''(x) = 48x^2 - 6x - 794 \\) using similar methods. The main goal is divided into two subgoals: substituting \\( x = -4 \\) into \\( f' \\) to confirm it equals zero, and into \\( f'' \\) to show it is negative, thus proving the maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 - x ^ 5 - 2 * x ^ 4 + 5 * x ^ 3 - 59958 * x ^ 2 - 575316 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 - 5 * x ^ 4 - 8 * x ^ 3 + 15 * x ^ 2 - 119916 * x - 575316 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 - 20 * x ^ 3 - 24 * x ^ 2 + 30 * x - 119916 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that the first and second derivatives of the function f(x) = 3 * x^6 - x^5 - 2 * x^4 + 5 * x^3 - 59958 * x^2 - 575316 * x are both zero at x = -6. First, define the function and derive the first derivative f'(x) using function extensionality, term-by-term differentiation, and algebraic simplification. Next, derive the second derivative f''(x) similarly, ensuring each term's differentiability. Finally, split the goal into two statements: f'(-6) = 0 and f''(-6) = 0, and substitute x = -6 into both derivatives to demonstrate that they evaluate to zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 5 - 4 * x ^ 4 - 2 * x ^ 3 - 2 * x ^ 2 + 11 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 4 - 16 * x ^ 3 - 6 * x ^ 2 - 4 * x + 11 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 3 - 48 * x ^ 2 - 12 * x - 4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 3x^5 - 4x^4 - 2x^3 - 2x^2 + 11x \\) has a maximum at \\( x=1 \\), we need to demonstrate two conditions: \\( f'(1) = 0 \\) and \\( f''(1) < 0 \\). First, derive the first derivative \\( f'(x) = 15x^4 - 16x^3 - 6x^2 - 4x + 11 \\) by applying differentiation rules and simplifying. Next, derive the second derivative \\( f''(x) = 60x^3 - 48x^2 - 12x - 4 \\) using similar methods. Then, evaluate \\( f'(1) \\) and \\( f''(1) \\) by substituting \\( x=1 \\) into their respective formulas, ensuring that \\( f'(1) \\) equals zero and \\( f''(1) \\) is negative, confirming the maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 1200 * x ^ 2 + 3840 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 2400 * x + 3840 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 2400 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function f(x) = 5 * x^6 - 1200 * x^2 + 3840 * x vanish at x = 2. First, define f(x) and compute its first derivative, f'(x) = 30 * x^5 - 2400 * x + 3840, by applying derivative properties and simplifying. Next, find the second derivative, f''(x) = 150 * x^4 - 2400, using the first derivative and similar derivative rules. After establishing both derivatives, the goal is to evaluate f'(2) and f''(2). Substitute x = 2 into both derivative formulas to confirm that f'(2) = 0 and f''(2) = 0, thus proving the required conditions."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 has a minimum at x=0, we need to demonstrate two conditions: f'(0) = 0 and f''(0) > 0. First, we define the function and calculate its first derivative, f'(x) = 2x, by applying derivative theorems and simplifying. We also confirm the differentiability of f(x). Next, we find the second derivative, f''(x) = 2, using similar steps and proving the differentiability of f'(x). Finally, we break down the goals into two parts: verifying that f'(0) equals 0 and that f''(0) is greater than 0, expanding both definitions to confirm their validity."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 + x ^ 4 + 5 * x ^ 3 - 38 * x ^ 2 + 47 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 + 4 * x ^ 3 + 15 * x ^ 2 - 76 * x + 47 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 + 12 * x ^ 2 + 30 * x - 76 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^5 + x^4 + 5 * x^3 - 38 * x^2 + 47 * x has a stationary point at x=1, which is a local minimum. First, define the function and compute its first derivative, f'(x), using standard differentiation rules, ensuring to simplify and justify differentiability. Next, calculate the second derivative, f''(x), following similar steps. The final goal is to verify two conditions: that f'(1) = 0 and f''(1) > 0. Substitute x=1 into both derivatives to confirm that the first derivative equals zero and the second derivative is positive, thus establishing that x=1 is indeed a local minimum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 8 * x ^ 2 + 7 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 16 * x + 7 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 16 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 3 * x^3 + 8 * x^2 + 7 * x has a maximum at x = -1 by demonstrating that f'(-1) = 0 and f''(-1) < 0. First, define the function and compute its first derivative, f'(x) = 9 * x^2 + 16 * x + 7, by applying derivative rules and ensuring differentiability. Next, calculate the second derivative, f''(x) = 18 * x + 16, using similar methods. Finally, verify the conditions by substituting x = -1 into both derivatives, confirming that f'(-1) equals zero and f''(-1) is negative, thus establishing the maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 - 5 * x ^ 5 - 5 * x ^ 4 - 3 * x ^ 3 + 2 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 - 25 * x ^ 4 - 20 * x ^ 3 - 9 * x ^ 2 + 4 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 - 100 * x ^ 3 - 60 * x ^ 2 - 18 * x + 4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function \\( f(x) = 3 x^6 - 5 x^5 - 5 x^4 - 3 x^3 + 2 x^2 \\) has a stationary point at \\( x=0 \\) and that its second derivative at this point is positive. First, we need to compute the first derivative \\( f'(x) \\) and show that \\( f'(0) = 0 \\) by evaluating and simplifying the expression. Next, we calculate the second derivative \\( f''(x) \\) and prove that \\( f''(0) > 0 \\) through direct evaluation. The process involves applying differentiation rules, justifying differentiability at each step, and simplifying the resulting polynomials to achieve the desired results."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 10 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The objective is to prove that the function f(x) = x^2 + 10x has a minimum at x = -5 by demonstrating that the first derivative f'(-5) equals zero and the second derivative f''(-5) is greater than zero. First, define the function and compute its first derivative f'(x) = 2x + 10 using derivative properties. Next, calculate the second derivative f''(x) = 2. After establishing these derivatives, split the goal into two parts: verifying f'(-5) = 0 and f''(-5) > 0. Finally, substitute x = -5 into both derivatives to confirm the calculations, thereby proving the minimum point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - x ^ 3 - 16 * x ^ 2 + 44 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 3 * x ^ 2 - 32 * x + 44 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 6 * x - 32 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^4 - x^3 - 16x^2 + 44x has a minimum at x = 2 by demonstrating that the first derivative f\u2032(2) = 0 and the second derivative f\u2032\u2032(2) > 0. First, define the function and calculate the first derivative f\u2032(x) = 4x^3 - 3x^2 - 32x + 44 through polynomial expansion and derivative properties. Next, find the second derivative f\u2032\u2032(x) = 12x^2 - 6x - 32 using similar methods. Finally, evaluate both derivatives at x = 2, confirming that f\u2032(2) equals zero and f\u2032\u2032(2) is positive, thus establishing the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + x ^ 3 - 29115 * x - 6063 * x ^ 2) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 3 * x ^ 2 - 29115 - 12126 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 6 * x - 12126 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 5 * x^6 + x^3 - 29115 * x - 6063 * x^2 has a minimum at x = -3 by demonstrating two conditions: f'(-3) = 0 and f''(-3) > 0. First, define the function and derive its first derivative, f'(x), using rules of differentiation, and simplify the expression. Next, derive the second derivative, f''(x), and simplify it as well. Then, evaluate f'(-3) by substituting -3 into the first derivative to confirm it equals zero. Finally, evaluate f''(-3) by substituting -3 into the second derivative to show it is positive, thus confirming the minimum at x = -3."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 8 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 8 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The objective is to demonstrate that the function f(x) = x^2 + 8x has a minimum at x = -4 by verifying two conditions: the first derivative f'(-4) = 0 and the second derivative f''(-4) > 0. First, define the function and compute the first derivative f'(x) = 2x + 8 through differentiation rules, ensuring to simplify and justify differentiability. Next, calculate the second derivative f''(x) = 2, again applying derivative rules and justifying differentiability. Finally, evaluate both derivatives at x = -4, confirming that f'(-4) equals zero and f''(-4) is positive, thus proving the minimum condition at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 - 57 * x ^ 2 + 360 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 - 114 * x + 360 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x - 114 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^3 - 57 * x^2 + 360 * x has a maximum at x = 6 by verifying two conditions: f'(6) = 0 and f''(6) < 0. First, define the function and compute its first derivative f'(x) = 9 * x^2 - 114 * x + 360 using derivative rules and algebraic simplification. Next, find the second derivative f''(x) = 18 * x - 114, again applying derivative rules and simplifying. Finally, evaluate f'(6) and f''(6) by substituting x = 6 into the respective derivatives to confirm that f'(6) equals zero and f''(6) is negative, thus proving the maximum condition."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 16 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^2 + 16 * x has a minimum at x = -4 by demonstrating that f'(-4) = 0 and f''(-4) > 0. First, define the function and compute its first derivative, f'(x) = 4 * x + 16, using derivative rules and justifying differentiability. Next, calculate the second derivative, f''(x) = 4, following similar steps. Then, split the proof into two parts: verify that f'(-4) equals 0 and that f''(-4) is greater than 0 by substituting -4 into the derived expressions. This structured approach confirms the minimum point of the function at x = -4."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 12 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 3 * x^2 - 12 * x has a minimum at x=2 by demonstrating that f'(2) = 0 and f''(2) > 0. First, define the function and calculate its first derivative, f'(x) = 6 * x - 12, by applying derivative theorems and simplifying. Next, compute the second derivative, f''(x) = 6, using similar methods. Then, split the main goal into two parts: verify that f'(2) equals 0 by substituting x=2 into f'(x), and confirm that f''(2) is greater than 0 by substituting x=2 into f''(x). This structured approach ensures clarity in proving the existence of a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 39 * x ^ 2 + 126 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 78 * x + 126 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 78 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 4 * x^3 + 39 * x^2 + 126 * x has a minimum at x = -3 by verifying two conditions: f'(-3) = 0 and f''(-3) > 0. First, define the function and compute its first derivative f'(x) = 12 * x^2 + 78 * x + 126, ensuring it is differentiable. Next, calculate the second derivative f''(x) = 24 * x + 78, confirming its differentiability as well. The main goal is divided into two parts: first, substitute -3 into f' to show it equals zero; second, substitute -3 into f'' to confirm it is positive. This process establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 72 * x ^ 2 + 432 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 144 * x + 432 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 144 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 4 * x^3 + 72 * x^2 + 432 * x has a stationary inflection point at x = -6 by proving that both its first and second derivatives equal zero at this point. First, define the function and compute the first derivative f'(x) = 12 * x^2 + 144 * x + 432 using differentiation rules and algebraic simplification. Next, calculate the second derivative f''(x) = 24 * x + 144, applying similar differentiation techniques. The proof is divided into two subgoals: showing f'(-6) = 0 and f''(-6) = 0. Finally, perform direct calculations to confirm that both derivatives equal zero at x = -6, thereby establishing the stationary inflection point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 24 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x^2 + 24 * x has a minimum at x = -6, we need to demonstrate two conditions: f'(-6) = 0 and f''(-6) > 0. First, we define the function and calculate its first derivative, f'(x) = 4 * x + 24, using function extensionality and differentiation rules. We then find the second derivative, f''(x) = 4, following similar steps. After establishing the derivatives, we split the proof into two goals: verifying that f'(-6) equals zero and that f''(-6) is positive. Finally, we substitute -6 into the expressions for the first and second derivatives to confirm both conditions are satisfied, thus proving the minimum point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 4 * x ^ 3 - 48 * x ^ 2 - 84 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 12 * x ^ 2 - 96 * x - 84 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 24 * x - 96 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that both the first and second derivatives of the function f(x) = 4 * x^6 + 4 * x^3 - 48 * x^2 - 84 * x are zero at x = -1. First, define the function and compute the first derivative f\u2032(x) = 24 * x^5 + 12 * x^2 - 96 * x - 84, ensuring to apply derivative properties and simplify. Next, compute the second derivative f\u2032\u2032(x) = 120 * x^4 + 24 * x - 96, following similar steps for differentiation and simplification. Prove the differentiability of both f(x) and f\u2032(x). Finally, evaluate f\u2032(-1) and f\u2032\u2032(-1) using the derived formulas to confirm both equal zero, thus achieving the goals."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 749 * x ^ 2 + 4990 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 1498 * x + 4990 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 1498 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^4 - 749 * x^2 + 4990 * x has a minimum at x = 5. This involves proving two conditions: f'(5) = 0 and f''(5) > 0. First, define the function and compute its first derivative, f'(x) = 20 * x^3 - 1498 * x + 4990, by extending, expanding, and applying derivative theorems. Next, compute the second derivative, f''(x) = 60 * x^2 - 1498, using similar steps. Finally, verify the two conditions by substituting x = 5 into f'(x) and f''(x) to show that f'(5) equals 0 and f''(5) is positive, confirming the presence of a minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 176 * x + 46 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 176 + 92 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 92 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 4 * x^3 + 176 * x + 46 * x^2 has a maximum at x = -4 by showing that f'(-4) = 0 and f''(-4) < 0. First, define the function and derive its first derivative f'(x) = 12 * x^2 + 176 + 92 * x using differentiation rules and function extensionality. Next, derive the second derivative f''(x) = 24 * x + 92, again applying the same rules. The proof is divided into two parts: substituting x = -4 into f'(x) to confirm it equals zero, and substituting x = -4 into f''(x) to show it is negative. This confirms the presence of a maximum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 4 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x^2 + 4 * x has a minimum at x = -1, we need to demonstrate two conditions: f'(-1) = 0 and f''(-1) > 0. First, we define the function and calculate the first derivative, f'(x) = 4 * x + 4, by applying derivative rules and simplifying. Next, we establish that the function is differentiable. Then, we find the second derivative, f''(x) = 4, using similar derivative rules and confirm the differentiability of the first derivative. Finally, we evaluate f'(-1) and f''(-1) by substituting x = -1 into their respective expressions, confirming that f'(-1) equals 0 and f''(-1) is positive, thus proving the existence of a local minimum at x = -1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 12 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 3 * x^2 + 12 * x has a minimum at x = -2 by demonstrating two conditions: f'(-2) = 0 and f''(-2) > 0. First, define the function and calculate its first derivative, f'(x) = 6 * x + 12, using derivative properties and algebraic simplification. Next, find the second derivative, f''(x) = 6, by applying the same rules. The proof is divided into two parts: first, substitute x = -2 into f' to show it equals 0; second, substitute x = -2 into f'' to confirm it is greater than 0. This establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 16 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 + 16 * x has a minimum at x = -4 by proving two conditions: f'(-4) = 0 and f''(-4) > 0. First, introduce the function and derive its first derivative, f'(x) = 4 * x + 16, by applying differentiation rules and confirming differentiability. Next, compute the second derivative, f''(x) = 4, showing it is a constant function and confirming the differentiability of f'(x). Finally, verify the conditions by substituting x = -4 into both derivatives, simplifying to show that f'(-4) equals zero and f''(-4) is positive, thus confirming the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - 12 * x ^ 2 + 19 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 24 * x + 19 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 24 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^5 - 12x^2 + 19x has a local maximum at x = 1 by proving two conditions: f'(1) = 0 and f''(1) < 0. First, define the function and compute its first derivative f'(x) = 5x^4 - 24x + 19 using differentiation rules. Confirm the differentiability of each term. Next, calculate the second derivative f''(x) = 20x^3 - 24, again ensuring differentiability. Finally, evaluate f'(1) and f''(1) by substituting x = 1 into the derivatives to verify that f'(1) equals 0 and f''(1) is less than 0, thus confirming the local maximum at x = 1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + x ^ 5 + x ^ 4 - 5 * x ^ 3 - 54 * x ^ 2 - 76 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 5 * x ^ 4 + 4 * x ^ 3 - 15 * x ^ 2 - 108 * x - 76 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 20 * x ^ 3 + 12 * x ^ 2 - 30 * x - 108 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 3 * x^6 + x^5 + x^4 - 5 * x^3 - 54 * x^2 - 76 * x has a minimum at x = -1. This involves demonstrating that the first derivative f'(-1) equals 0 and the second derivative f''(-1) is greater than 0. The process begins with defining the function and calculating its first derivative, f'(x), through differentiation rules and simplification. Next, the second derivative, f''(x), is derived similarly. The proof is divided into two parts: first, compute f'(-1) to confirm it equals 0, and second, compute f''(-1) to verify it is positive, thus establishing the minimum at x = -1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 150 * x ^ 2 + 1000 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 300 * x + 1000 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 300 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that the derivatives of the function f(x) = x^4 - 150 * x^2 + 1000 * x at x = 5 are both zero. First, define the function and calculate the first derivative f'(x) = 4 * x^3 - 300 * x + 1000 by applying derivative rules and simplifying. Next, find the second derivative f''(x) = 12 * x^2 - 300 using the first derivative and similar rules. After establishing the derivatives, split the goal into two parts: proving f'(5) = 0 and f''(5) = 0. Finally, substitute x = 5 into both derivatives and simplify to demonstrate that both equal zero, confirming the hypothesis."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 + 42 * x ^ 2 + 64 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 + 84 * x + 64 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 + 84 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 4 * x^5 + 42 * x^2 + 64 * x has a minimum at x = -1, we need to demonstrate two conditions: f'(-1) = 0 and f''(-1) > 0. First, define the function and calculate its first derivative, f'(x) = 20 * x^4 + 84 * x + 64, by applying differentiation rules and confirming the differentiability of its terms. Next, find the second derivative, f''(x) = 80 * x^3 + 84, using similar differentiation techniques. Finally, evaluate both derivatives at x = -1, showing that f'(-1) equals zero and f''(-1) is greater than zero, thus confirming the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 21 * x ^ 2 + 36 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 42 * x + 36 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 42 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 4 * x^3 + 21 * x^2 + 36 * x has a maximum at x = -2 by verifying two conditions: f'(-2) = 0 and f''(-2) < 0. First, define the function and calculate its first derivative f'(x) = 12 * x^2 + 42 * x + 36, using function extensionality and derivative rules. Next, find the second derivative f''(x) = 24 * x + 42, again applying similar principles. Then, split the proof into two parts: compute f'(-2) and confirm it equals zero, and compute f''(-2) to show it is negative. Finally, substitute -2 into both derivatives to complete the proof."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 10 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^2 - 10x has a minimum at x=5 by demonstrating that the first derivative f'(5) equals zero and the second derivative f''(5) is greater than zero. The process begins with defining the function and calculating the first derivative f'(x) = 2x - 10 through various derivative theorems and simplifications. Next, the second derivative f''(x) is found to be 2, again using derivative rules. The proof is divided into two parts: first, substituting to show f'(5) = 0, and second, confirming that f''(5) equals 2, which is greater than zero. This establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 - 46 * x ^ 2 + 235 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 - 92 * x + 235 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x - 92 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The goal is to prove that the function f(x) = 3 * x^3 - 46 * x^2 + 235 * x has a maximum at x=5 by demonstrating that f'(5) = 0 and f''(5) < 0. First, define the function and compute its first derivative, f'(x) = 9 * x^2 - 92 * x + 235, using derivative rules and algebraic simplification. Next, find the second derivative, f''(x) = 18 * x - 92, following similar steps. Then, evaluate f'(5) and f''(5) by substituting x=5 into the derived expressions. Finally, confirm that f'(5) equals 0 and f''(5) is less than 0, thereby establishing that a maximum occurs at x=5."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3 - 69 * x ^ 2 + 392 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2 - 138 * x + 392 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x - 138 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^4 - 2 * x^3 - 69 * x^2 + 392 * x has a minimum at x=4 by proving two conditions: f'(4) = 0 and f''(4) > 0. First, derive the first derivative f'(x) = 4 * x^3 - 6 * x^2 - 138 * x + 392 using differentiation rules and confirm its validity for all x. Next, derive the second derivative f''(x) = 12 * x^2 - 12 * x - 138, ensuring it also holds for all x. Finally, evaluate both derivatives at x=4, simplifying to show that f'(4) equals zero and f''(4) is positive, thus confirming the presence of a minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 4 * x ^ 2 + 5 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 8 * x + 5 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 8 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^3 - 4x^2 + 5x has a local maximum at x = 1 by verifying two conditions: f'(1) = 0 and f''(1) < 0. First, define the function and calculate its first derivative, f'(x) = 3x^2 - 8x + 5, by applying derivative rules and simplifying. Next, find the second derivative, f''(x) = 6x - 8, using similar methods. Finally, evaluate f'(1) and f''(1) by substituting x = 1 into the derivatives, confirming that f'(1) equals zero and f''(1) is negative, thus proving the existence of a local maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 32 * x + 10 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 32 + 20 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 20 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = x^3 + 32x + 10x^2 \\) has a maximum at \\( x = -4 \\), we need to demonstrate two conditions: \\( f'(-4) = 0 \\) and \\( f''(-4) < 0 \\). First, we define the function and compute its first derivative \\( f'(x) = 3x^2 + 20x + 32 \\) by applying differentiation rules and justifying its differentiability. Next, we find the second derivative \\( f''(x) = 6x + 20 \\) using similar steps. The proof is divided into two parts: substituting \\( x = -4 \\) into \\( f'(x) \\) to confirm it equals zero, and substituting \\( x = -4 \\) into \\( f''(x) \\) to show it is negative, thus confirming the maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 - 48 * x ^ 2 - 128 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 - 96 * x - 128 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 - 96 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function f(x) = 2 * x ^ 4 - 48 * x ^ 2 - 128 * x at x = -2 are both zero. First, define the function and compute its first derivative, f'(x) = 8 * x ^ 3 - 96 * x - 128, by applying differentiation rules and simplifying. Next, find the second derivative, f''(x) = 24 * x ^ 2 - 96, using similar steps. After establishing both derivatives, evaluate f'(-2) and f''(-2) by substituting -2 into their respective expressions to confirm that both equal zero. Each step must include justifications for differentiability and simplifications."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 60 * x ^ 2 + 300 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 120 * x + 300 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 120 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that both the first and second derivatives of the function f(x) = 4 * x^3 + 60 * x^2 + 300 * x vanish at x = -5. First, define the function and compute the first derivative f'(x) = 12 * x^2 + 120 * x + 300 by applying derivative rules and simplifying. Next, compute the second derivative f''(x) = 24 * x + 120 using similar methods. After establishing the differentiability of each term, the goal is split into two parts: showing f'(-5) = 0 and f''(-5) = 0. Substitute -5 into the derived formulas for both derivatives and simplify to confirm that they equal zero, thus proving the hypothesis."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + 3 * x ^ 5 + 2 * x ^ 4 + 2 * x ^ 3 - 122 * x ^ 2 + 185 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 15 * x ^ 4 + 8 * x ^ 3 + 6 * x ^ 2 - 244 * x + 185 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 60 * x ^ 3 + 24 * x ^ 2 + 12 * x - 244 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task involves analyzing the function f(x) = 5 * x^6 + 3 * x^5 + 2 * x^4 + 2 * x^3 - 122 * x^2 + 185 * x to demonstrate that it has a critical point at x=1, which is a local minimum. First, the first derivative f'(x) is derived as 30 * x^5 + 15 * x^4 + 8 * x^3 + 6 * x^2 - 244 * x + 185 through differentiation rules and simplification. Next, the second derivative f''(x) is calculated as 150 * x^4 + 60 * x^3 + 24 * x^2 + 12 * x - 244. Finally, the critical point is confirmed by showing f'(1) = 0 and f''(1) > 0 through substitution and computation."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 76 * x ^ 2 + 385 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 152 * x + 385 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 152 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 5 * x^3 - 76 * x^2 + 385 * x has a maximum at x = 5, we need to demonstrate two conditions: f'(5) = 0 and f''(5) < 0. First, we define the function and compute its first derivative, f'(x) = 15 * x^2 - 152 * x + 385, by applying derivative rules and simplifying. Next, we find the second derivative, f''(x) = 30 * x - 152, using similar steps. We then evaluate both derivatives at x = 5. By substituting x = 5 into f'(x), we confirm f'(5) = 0, and substituting into f''(x) shows that f''(5) < 0, thus proving that a maximum exists at this point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + 4 * x ^ 5 + 5 * x ^ 4 - x ^ 3 - 105 * x - 69 * x ^ 2) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 20 * x ^ 4 + 20 * x ^ 3 - 3 * x ^ 2 - 105 - 138 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 80 * x ^ 3 + 60 * x ^ 2 - 6 * x - 138 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To demonstrate that the function \\( f(x) = 5x^6 + 4x^5 + 5x^4 - x^3 - 69x^2 - 105x \\) has a local maximum at \\( x = -1 \\), we need to verify two conditions: \\( f'(-1) = 0 \\) and \\( f''(-1) < 0 \\). First, we derive the first derivative \\( f'(x) \\) using differentiation rules, ensuring each term is differentiable. Next, we find the second derivative \\( f''(x) \\) similarly. After obtaining both derivatives, we evaluate \\( f'(-1) \\) to confirm it equals zero and \\( f''(-1) \\) to show it is negative. This process involves substituting \\( x = -1 \\) into the derived formulas and simplifying the results to meet the criteria for a local maximum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 - 4 * x ^ 5 - 3 * x ^ 4 - 4 * x ^ 3 + 289872 * x - 29520 * x ^ 2) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 - 20 * x ^ 4 - 12 * x ^ 3 - 12 * x ^ 2 + 289872 - 59040 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 80 * x ^ 3 - 36 * x ^ 2 - 24 * x - 59040 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that the first and second derivatives of the function \\( f(x) = 2x^6 - 4x^5 - 3x^4 - 4x^3 + 289872x - 29520x^2 \\) equal zero at \\( x = 6 \\). First, define \\( f \\) and compute its first derivative \\( f'(x) \\) using derivative rules and algebraic simplification, ensuring differentiability for each term. Next, derive the second derivative \\( f''(x) \\) similarly, confirming differentiability. The main goal is divided into two parts: verifying \\( f'(6) = 0 \\) and \\( f''(6) = 0 \\). For each part, substitute \\( x = 6 \\) into the respective derivative expressions and simplify to check the results."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 4 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 2 * x\u00b2 - 4 * x has a local minimum at x = 1, we need to demonstrate two conditions: f'(1) = 0 and f''(1) > 0. First, we define the function and compute its first derivative, f'(x) = 4 * x - 4, ensuring to justify the differentiability of each term. Next, we find the second derivative, f''(x) = 4, confirming its constancy and differentiability. We then split the proof into two parts: substituting x = 1 into f'(x) to show it equals 0, and substituting x = 1 into f''(x) to verify it is positive. This confirms that f(x) has a local minimum at x = 1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 + 2 * x ^ 3 + 45 * x ^ 2 + 64 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 + 6 * x ^ 2 + 90 * x + 64 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 + 12 * x + 90 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 4 * x^5 + 2 * x^3 + 45 * x^2 + 64 * x has a local maximum at x = -1. This involves verifying two conditions: f'(-1) = 0 and f''(-1) < 0. First, define the function and compute its first derivative f'(x) = 20 * x^4 + 6 * x^2 + 90 * x + 64, ensuring each term is differentiable. Next, calculate the second derivative f''(x) = 80 * x^3 + 12 * x + 90, again confirming differentiability. Finally, evaluate both derivatives at x = -1 to confirm that f'(-1) equals 0 and f''(-1) is negative, thus establishing the local maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 - 4 * x ^ 4 - 2 * x ^ 3 + 9470 * x ^ 2 + 84480 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 - 16 * x ^ 3 - 6 * x ^ 2 + 18940 * x + 84480 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 - 48 * x ^ 2 - 12 * x + 18940 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 4x^5 - 4x^4 - 2x^3 + 9470x^2 + 84480x \\) has a minimum at \\( x = -6 \\), we need to demonstrate two conditions: \\( f'(-6) = 0 \\) and \\( f''(-6) > 0 \\). The process involves several steps: first, define the function \\( f \\) and derive the first derivative \\( f' \\) using differentiation rules and algebraic simplification. Next, derive the second derivative \\( f'' \\) similarly. After obtaining explicit formulas for both derivatives, evaluate \\( f'(-6) \\) to confirm it equals zero, and evaluate \\( f''(-6) \\) to ensure it is positive. Each step requires justifying the differentiability of the functions involved."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 + 5 * x ^ 5 - 2 * x ^ 4 + 5 * x ^ 3 + 290 * x ^ 2 + 822 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 + 25 * x ^ 4 - 8 * x ^ 3 + 15 * x ^ 2 + 580 * x + 822 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 + 100 * x ^ 3 - 24 * x ^ 2 + 30 * x + 580 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^6 + 5x^5 - 2x^4 + 5x^3 + 290x^2 + 822x has a minimum at x = -3 by showing that f'(-3) = 0 and f''(-3) > 0. First, define the function and compute its first derivative f'(x) using standard differentiation rules, ensuring differentiability throughout. Next, compute the second derivative f''(x) similarly. Split the proof into two parts: first, substitute x = -3 into f' to confirm it equals zero; second, substitute x = -3 into f'' to show it is positive. This structured approach will validate the minimum condition at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 89 * x ^ 2 + 528 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 178 * x + 528 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 178 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^3 - 89 * x^2 + 528 * x has a minimum at x=6 by verifying two conditions: f'(6) = 0 and f''(6) > 0. First, define the function and compute its first derivative, f'(x) = 15 * x^2 - 178 * x + 528, by applying derivative properties and simplifying. Next, find the second derivative, f''(x) = 30 * x - 178, using similar steps. Finally, evaluate both derivatives at x=6: confirm that f'(6) equals zero and f''(6) is positive, thus establishing that x=6 is indeed a minimum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 - 5 * x ^ 4 + 2 * x ^ 3 - 28 * x ^ 2 + 45 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 - 20 * x ^ 3 + 6 * x ^ 2 - 56 * x + 45 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 - 60 * x ^ 2 + 12 * x - 56 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^5 - 5 * x^4 + 2 * x^3 - 28 * x^2 + 45 * x has a local maximum at x = 1 by proving two conditions: f'(1) = 0 and f''(1) < 0. First, define the function and compute its first derivative f'(x) = 25 * x^4 - 20 * x^3 + 6 * x^2 - 56 * x + 45, using function extensionality and derivative rules. Next, compute the second derivative f''(x) = 100 * x^3 - 60 * x^2 + 12 * x - 56, again applying similar methods. Finally, verify the conditions by substituting x = 1 into both derivatives and simplifying to confirm that f'(1) equals zero and f''(1) is less than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 3 - 18 * x ^ 2 + 54 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 2 - 36 * x + 54 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x - 36 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to prove that both the first and second derivatives of the function f(x) = 2 * x^3 - 18 * x^2 + 54 * x equal zero at x=3. First, define the function and derive the first derivative f'(x) = 6 * x^2 - 36 * x + 54 by applying derivative rules and simplifying. Next, derive the second derivative f''(x) = 12 * x - 36 using the first derivative. Establish the differentiability of both f and f' at all x. Finally, split the proof into two parts: calculate f'(3) and f''(3) using their respective formulas, demonstrating that both simplify to zero, thus confirming the initial hypothesis."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 - 38 * x ^ 2 + 160 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 - 76 * x + 160 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x - 76 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^3 - 38 * x^2 + 160 * x has a maximum at x=4 by proving two conditions: f'(4) = 0 and f''(4) < 0. First, define the function and derive its first derivative, f'(x) = 9 * x^2 - 76 * x + 160, through a series of steps including decomposition and simplification. Next, derive the second derivative, f''(x) = 18 * x - 76, using similar methods. Finally, evaluate f'(4) and f''(4) by substituting x=4 into their respective formulas, simplifying the results to confirm that f'(4) equals 0 and f''(4) is negative, thus proving the maximum at x=4."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 3 * x ^ 5 - 50624 * x ^ 2 - 403115 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 15 * x ^ 4 - 101248 * x - 403115 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 60 * x ^ 3 - 101248 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that \\( x = -5 \\) is a local minimum for the function \\( f(x) = 5x^6 - 3x^5 - 50624x^2 - 403115x \\), we need to demonstrate two conditions: \\( f'(-5) = 0 \\) and \\( f''(-5) > 0 \\). First, we derive the first derivative \\( f'(x) = 30x^5 - 15x^4 - 101248x - 403115 \\) by applying differentiation rules and simplifying. Next, we find the second derivative \\( f''(x) = 150x^4 - 60x^3 - 101248 \\) using similar methods. We then evaluate \\( f'(-5) \\) and \\( f''(-5) \\) by substituting \\(-5\\) into their respective formulas, confirming that \\( f'(-5) = 0 \\) and \\( f''(-5) > 0 \\), thus establishing that \\( x = -5 \\) is indeed a local minimum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 5 * x ^ 5 + x ^ 4 - 107 * x ^ 2 - 412 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 25 * x ^ 4 + 4 * x ^ 3 - 214 * x - 412 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 100 * x ^ 3 + 12 * x ^ 2 - 214 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task involves demonstrating that x = -2 is a local extremum for the function f(x) = 2 * x^6 + 5 * x^5 + x^4 - 107 * x^2 - 412 * x by verifying two conditions: f'(-2) = 0 and f''(-2) < 0. First, define the function and compute its first derivative f'(x) using rules of differentiation, ensuring to justify differentiability at each step. Next, calculate the second derivative f''(x) similarly. The proof is divided into two claims: first, substitute -2 into f'(x) to confirm it equals 0, and second, substitute -2 into f''(x) to show it is negative, thus establishing the local extremum and its character."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 55 * x ^ 2 + 222 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 110 * x + 222 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 110 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^4 - 55x^2 + 222x has a local extreme value at x = 3 by proving two conditions: f'(3) = 0 and f''(3) < 0. First, define the function and derive its first derivative, f'(x) = 4x^3 - 110x + 222, by applying differentiation rules and simplifying. Next, derive the second derivative, f''(x) = 12x^2 - 110, using similar differentiation techniques. Then, verify the first condition by substituting x = 3 into f'(x) to confirm it equals zero. Finally, check the second condition by substituting x = 3 into f''(x) to ensure the result is negative, indicating a local maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 - 4 * x ^ 5 + 6804 * x - 1350 * x ^ 2) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 - 20 * x ^ 4 + 6804 - 2700 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 80 * x ^ 3 - 2700 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the first and second derivatives of the function f(x) = 2 * x^6 - 4 * x^5 + 6804 * x - 1350 * x^2 vanish at x = 3. First, define the function and compute the first derivative f'(x) = 12 * x^5 - 20 * x^4 + 6804 - 2700 * x by applying derivative rules and simplifying. Next, calculate the second derivative f''(x) = 60 * x^4 - 80 * x^3 - 2700 using similar steps. Finally, evaluate both derivatives at x = 3, substituting the computed expressions to confirm that f'(3) = 0 and f''(3) = 0, thereby achieving the goal."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 6 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 - 6x has a minimum at x = 3, we need to demonstrate two conditions: f'(3) = 0 and f''(3) > 0. First, we define f(x) and compute its first derivative, f'(x) = 2x - 6, by applying differentiation rules and simplifying. Next, we find the second derivative, f''(x) = 2, using similar differentiation techniques. We then focus on the two goals: confirming that f'(3) equals 0 by substituting x = 3 into f'(x) and simplifying, and verifying that f''(3) is greater than 0 by substituting into f''(x). Both conditions must be satisfied to establish that x = 3 is indeed a minimum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 6 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 - 6x has a minimum at x=3, we need to verify two conditions: f'(3) = 0 and f''(3) > 0. First, we define the function and compute its first derivative, f'(x) = 2x - 6, using differentiation rules and ensuring differentiability. Next, we find the second derivative, f''(x) = 2, confirming its differentiability as well. We then split the proof into two parts: evaluating f'(3) to show it equals zero and evaluating f''(3) to demonstrate it is positive. By substituting x=3 into both derivatives, we confirm that f'(3) = 0 and f''(3) = 2, thus proving that f(x) has a minimum at x=3."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^2 - 24 * x has a minimum at x=6 by demonstrating that f'(6) = 0 and f''(6) > 0. First, introduce the function definition. Then, calculate the first derivative f'(x) = 4 * x - 24 by applying derivative rules and simplifying. Next, compute the second derivative f''(x) = 4, confirming differentiability. The proof is divided into two parts: first, substitute to show f'(6) equals 0; second, substitute to show f''(6) is greater than 0. This structured approach ensures that both conditions for a minimum are satisfied."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 5 * x ^ 3 - 738 * x ^ 2 - 5724 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 15 * x ^ 2 - 1476 * x - 5724 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 30 * x - 1476 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that at x = -6, both the first derivative f'(-6) and the second derivative f''(-6) of the function f(x) = 3 * x^4 - 5 * x^3 - 738 * x^2 - 5724 * x equal zero, indicating a critical point. The process begins with defining f(x) and calculating its first derivative f'(x) = 12 * x^3 - 15 * x^2 - 1476 * x - 5724 through systematic differentiation. Next, the second derivative f''(x) = 36 * x^2 - 30 * x - 1476 is derived similarly. The final steps involve substituting x = -6 into both derivatives to confirm that f'(-6) = 0 and f''(-6) = 0, ensuring all calculations adhere to differentiation rules and verifying the differentiability of the functions involved."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 - 2 * x ^ 5 + x ^ 4 - 35150 * x ^ 2 + 282250 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 - 10 * x ^ 4 + 4 * x ^ 3 - 70300 * x + 282250 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 - 40 * x ^ 3 + 12 * x ^ 2 - 70300 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that the first and second derivatives of the function \\( f(x) = 4x^6 - 2x^5 + x^4 - 35150x^2 + 282250x \\) vanish at \\( x = 5 \\). First, define the function and compute the first derivative \\( f'(x) \\) using differentiation rules, ensuring to simplify and justify the differentiability of each term. Next, calculate the second derivative \\( f''(x) \\) similarly, confirming its differentiability. The proof is divided into two parts: verifying \\( f'(5) = 0 \\) and \\( f''(5) = 0 \\). For each part, substitute \\( x = 5 \\) into the respective derivative expressions and confirm that both equations hold true."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 480 * x ^ 2 - 2560 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 960 * x - 2560 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 960 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that both the first and second derivatives of the function f(x) = 5 * x^4 - 480 * x^2 - 2560 * x vanish at x = -4. First, define the function and derive f'(x) = 20 * x^3 - 960 * x - 2560 by applying differentiation rules and simplifying. Next, derive f''(x) = 60 * x^2 - 960 using the previously obtained f'(x) and similar differentiation techniques. Confirm differentiability at necessary steps. Finally, split the goal into two parts: proving f'(-4) = 0 and f''(-4) = 0 by substituting x = -4 into the derived expressions for f' and f''."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 - 2 * x ^ 5 - x ^ 4  ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 - 10 * x ^ 4 - 4 * x ^ 3   := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 - 40 * x ^ 3 - 12 * x ^ 2  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that for the function f(x) = 4 * x^6 - 2 * x^5 - x^4, both f'(0) and f''(0) equal 0. First, define the function and compute its first derivative, f'(x) = 24 * x^5 - 10 * x^4 - 4 * x^3, using derivative rules and simplifying the expression. Next, calculate the second derivative, f''(x) = 120 * x^4 - 40 * x^3 - 12 * x^2, following similar steps. Finally, evaluate f'(0) and f''(0) by substituting x = 0 into the derived expressions and simplifying to confirm that both derivatives equal 0, thereby proving the hypothesis."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 12 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 - 12*x has a minimum at x=6, we need to demonstrate that the first derivative f'(6) equals 0 and the second derivative f''(6) is greater than 0. First, we define the function and calculate its first derivative, f'(x) = 2*x - 12, by applying derivative rules and simplifying. Next, we find the second derivative, f''(x) = 2, using similar steps. We then break down the proof into two parts: verifying that f'(6) = 0 and f''(6) > 0. Finally, we substitute x=6 into both derivatives to confirm that f'(6) equals 0 and f''(6) is positive, thus establishing that a minimum occurs at x=6."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + 3 * x ^ 5 + 2 * x ^ 4 - 3 * x ^ 3 - 9828 * x ^ 2 - 63376 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 15 * x ^ 4 + 8 * x ^ 3 - 9 * x ^ 2 - 19656 * x - 63376 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 60 * x ^ 3 + 24 * x ^ 2 - 18 * x - 19656 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that the first and second derivatives of the function \\( f(x) = 3x^6 + 3x^5 + 2x^4 - 3x^3 - 9828x^2 - 63376x \\) are both zero at \\( x = -4 \\). First, we compute the first derivative \\( f'(x) \\) and verify it as \\( 18x^5 + 15x^4 + 8x^3 - 9x^2 - 19656x - 63376 \\) by applying differentiation rules and simplifying. Next, we find the second derivative \\( f''(x) \\) as \\( 90x^4 + 60x^3 + 24x^2 - 18x - 19656 \\) using similar methods. Finally, we evaluate both derivatives at \\( x = -4 \\) to confirm that \\( f'(-4) = 0 \\) and \\( f''(-4) = 0 \\)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 + 5 * x ^ 4 - 4 * x ^ 3 - 253 * x ^ 2 + 740 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 + 20 * x ^ 3 - 12 * x ^ 2 - 506 * x + 740 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 + 60 * x ^ 2 - 24 * x - 506 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^5 + 5 * x^4 - 4 * x^3 - 253 * x^2 + 740 * x has a minimum at x = 2 by verifying two conditions: f\u2032(2) = 0 and f\u2033(2) > 0. First, define the function and compute its first derivative f\u2032(x) = 10 * x^4 + 20 * x^3 - 12 * x^2 - 506 * x + 740 using derivative properties and algebraic manipulation. Next, compute the second derivative f\u2033(x) = 40 * x^3 + 60 * x^2 - 24 * x - 506. Finally, evaluate both derivatives at x = 2, confirming that f\u2032(2) equals zero and f\u2033(2) is positive, thus establishing the minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 5 * x ^ 4 + 5 * x ^ 3 - 5175 * x ^ 2 + 24543 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 20 * x ^ 3 + 15 * x ^ 2 - 10350 * x + 24543 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 60 * x ^ 2 + 30 * x - 10350 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that both the first and second derivatives of the function f(x) = 4 * x^6 + 5 * x^4 + 5 * x^3 - 5175 * x^2 + 24543 * x are zero at x = 3. First, define the function and compute the first derivative f'(x) using theorems related to derivatives of sums, differences, and powers. Simplify the resulting polynomial. Next, compute the second derivative f''(x) by differentiating f'(x) and simplifying. Finally, evaluate both derivatives at x = 3, ensuring that f'(3) and f''(3) equal zero after simplification. Justify the differentiability of each term throughout the process."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 5 * x ^ 3 - 72 * x ^ 2 - 595 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 15 * x ^ 2 - 144 * x - 595 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 30 * x - 144 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x\u2074 + 5 x\u00b3 - 72 x\u00b2 - 595 x has a local minimum at x = -5. This involves proving two conditions: f'(-5) = 0 and f''(-5) > 0. First, define the function and compute its first derivative f'(x) = 4 x\u00b3 + 15 x\u00b2 - 144 x - 595 using differentiation rules. Next, find the second derivative f''(x) = 12 x\u00b2 + 30 x - 144. Justify the differentiability of each term throughout the process. Finally, evaluate f'(-5) and f''(-5) by substituting -5 into the respective derivatives, simplifying, and confirming that f'(-5) equals zero and f''(-5) is positive, thus proving the local minimum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 2 * x ^ 3 - 719 * x ^ 2 + 4840 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 6 * x ^ 2 - 1438 * x + 4840 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 12 * x - 1438 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 5 * x^4 - 2 * x^3 - 719 * x^2 + 4840 * x has a minimum at x=5 by demonstrating that f'(5) = 0 and f''(5) > 0. First, define f(x) and compute its first derivative f'(x) = 20 * x^3 - 6 * x^2 - 1438 * x + 4840, ensuring to simplify and confirm differentiability. Next, calculate the second derivative f''(x) = 60 * x^2 - 12 * x - 1438, again confirming differentiability. Finally, evaluate f'(5) and f''(5) separately by substituting x=5 into the derived expressions, confirming that f'(5) equals 0 and f''(5) is positive, thus proving the minimum at x=5."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 2 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 2 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 + 2x has a minimum at x = -1, we need to demonstrate two conditions: f'(-1) = 0 and f''(-1) > 0. First, define the function and calculate its first derivative, f'(x) = 2x + 2, by applying derivative rules and simplifying. Next, confirm the differentiability of f(x). Then, calculate the second derivative, f''(x) = 2, using similar steps. After establishing differentiability for f'(x), split the goal into two parts: compute f'(-1) to show it equals 0, and compute f''(-1) to show it is positive. This confirms that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 + 3 * x ^ 3 - 250 * x ^ 2 - 1376 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 + 9 * x ^ 2 - 500 * x - 1376 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 + 18 * x - 500 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 3x^4 + 3x^3 - 250x^2 - 1376x \\) has a local minimum at \\( x = -4 \\), we need to demonstrate two conditions: \\( f'(-4) = 0 \\) and \\( f''(-4) > 0 \\). First, we derive the first derivative \\( f'(x) = 12x^3 + 9x^2 - 500x - 1376 \\) using the rules of differentiation and confirm its differentiability. Next, we find the second derivative \\( f''(x) = 36x^2 + 18x - 500 \\) through similar steps. Finally, we evaluate both derivatives at \\( x = -4 \\) to show that \\( f'(-4) = 0 \\) and \\( f''(-4) > 0 \\), confirming the presence of a local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 5 * x ^ 3 - 349 * x ^ 2 - 1784 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 15 * x ^ 2 - 698 * x - 1784 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 30 * x - 698 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^4 - 5 * x^3 - 349 * x^2 - 1784 * x has a local maximum at x = -4 by proving two conditions: f'(-4) = 0 and f''(-4) < 0. First, define the function and derive its first derivative f'(x) = 12 * x^3 - 15 * x^2 - 698 * x - 1784 using principles of differentiation and algebraic simplification. Next, derive the second derivative f''(x) = 36 * x^2 - 30 * x - 698, ensuring differentiability at each step. Finally, evaluate both derivatives at x = -4 to confirm that f'(-4) equals zero and f''(-4) is negative, thus establishing the local maximum."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 - 4 * x ^ 5 - 3 * x ^ 4 + 2 * x ^ 3 - 85716 * x ^ 2 - 818856 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 - 20 * x ^ 4 - 12 * x ^ 3 + 6 * x ^ 2 - 171432 * x - 818856 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 - 80 * x ^ 3 - 36 * x ^ 2 + 12 * x - 171432 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that both the first and second derivatives of the function \\( f(x) = 4x^6 - 4x^5 - 3x^4 + 2x^3 - 85716x^2 - 818856x \\) vanish at \\( x = -6 \\). First, derive the first derivative \\( f'(x) \\) using differentiation rules, ensuring to simplify and confirm differentiability. Next, derive the second derivative \\( f''(x) \\) similarly. The proof is divided into two main goals: first, show that \\( f'(-6) = 0 \\) by substituting \\( -6 \\) into \\( f'(x) \\) and simplifying; second, demonstrate that \\( f''(-6) = 0 \\) by substituting \\( -6 \\) into \\( f''(x) \\) and simplifying. Each step requires careful application of differentiation techniques and algebraic simplification."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 4 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The goal is to prove that the function f(x) = 2 * x^2 - 4 * x has a minimum at x=1 by demonstrating that f'(1) = 0 and f''(1) > 0. First, define the function f. Next, calculate the first derivative f'(x) = 4 * x - 4 by applying derivative rules and simplifying. Then, find the second derivative f''(x) = 4, again using derivative properties. After establishing these derivatives, focus on proving both conditions: substitute x=1 into f'(x) to show it equals zero, and substitute into f''(x) to confirm it is positive. This process involves algebraic manipulation and justifying differentiability at each step."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 5 + 3 * x ^ 4 - 3 * x ^ 3 + 12896 * x - 2170 * x ^ 2) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 4 + 12 * x ^ 3 - 9 * x ^ 2 + 12896 - 4340 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 3 + 36 * x ^ 2 - 18 * x - 4340 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task involves analyzing the function f(x) = 3 * x^5 + 3 * x^4 - 3 * x^3 + 12896 * x - 2170 * x^2 to demonstrate that it has a stationary point at x=4 and that this point is a local minimum. First, define the function and compute its first derivative f'(x) using differentiation rules and algebraic simplification. Next, calculate the second derivative f''(x) similarly. The main objectives are to show that f'(4) = 0, confirming a stationary point, and that f''(4) > 0, indicating a local minimum. Substitute x=4 into both derivatives to verify these conditions."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - x ^ 3 - 3 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 3 * x ^ 2 - 6 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 6 * x - 6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x\u2074 - x\u00b3 - 3x\u00b2 has a local maximum at x=0 by demonstrating that f'(0) = 0 and f''(0) < 0. First, define the function and compute its first derivative f'(x) = 4x\u00b3 - 3x\u00b2 - 6x using differentiation rules. Next, find the second derivative f''(x) = 12x\u00b2 - 6x - 6. The proof is divided into two parts: for f'(0), substitute 0 into f'(x) and simplify to show it equals zero; for f''(0), substitute 0 into f''(x) and simplify to confirm it is negative. Each step must justify the differentiability of the expressions involved."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + x ^ 5 - 4 * x ^ 4 + x ^ 3 - 26260 * x ^ 2 - 211550 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 5 * x ^ 4 - 16 * x ^ 3 + 3 * x ^ 2 - 52520 * x - 211550 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 20 * x ^ 3 - 48 * x ^ 2 + 6 * x - 52520 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves proving that the first and second derivatives of the function \\( f(x) = 3x^6 + x^5 - 4x^4 + x^3 - 26260x^2 - 211550x \\) are both zero at \\( x = -5 \\). First, define the function and compute the first derivative \\( f'(x) \\) using differentiation rules, ensuring to simplify and confirm differentiability. Next, calculate the second derivative \\( f''(x) \\) from \\( f'(x) \\) with similar steps. Finally, separately evaluate \\( f'(-5) \\) and \\( f''(-5) \\) using the derived expressions, simplifying each to demonstrate that both equal zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 49128 * x - 7677 * x ^ 2) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 49128 - 15354 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 15354 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^6 + 49128 * x - 7677 * x^2 has a minimum at x = 4 by proving two conditions: f'(4) = 0 and f''(4) > 0. First, define the function and calculate its first derivative, f'(x) = 12 * x^5 + 49128 - 15354 * x, by applying derivative rules and simplifying. Next, find the second derivative, f''(x) = 60 * x^4 - 15354, using similar methods. The overall goal is divided into two subgoals: proving f'(4) = 0 by substituting and simplifying f'(4), and proving f''(4) > 0 by substituting and simplifying f''(4) to verify the inequality."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 + 2 * x ^ 4 - x ^ 3 + 423 * x ^ 2 + 1971 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 + 8 * x ^ 3 - 3 * x ^ 2 + 846 * x + 1971 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 + 24 * x ^ 2 - 6 * x + 846 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to prove that the first and second derivatives of the function \\( f(x) = 2x^5 + 2x^4 - x^3 + 423x^2 + 1971x \\) vanish at \\( x = -3 \\). First, define the function and compute its first derivative \\( f'(x) = 10x^4 + 8x^3 - 3x^2 + 846x + 1971 \\) by applying derivative rules and simplifying. Next, derive the second derivative \\( f''(x) = 40x^3 + 24x^2 - 6x + 846 \\) using similar methods. Finally, evaluate both derivatives at \\( x = -3 \\) to confirm that \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 6 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To demonstrate that the function f(x) = 3 * x^2 - 6 * x has a minimum at x=1, we need to show that f'(1) = 0 and f''(1) > 0. First, define the function and compute its first derivative, f'(x) = 6 * x - 6, by applying derivative properties and simplifying. Next, calculate the second derivative, f''(x) = 6, using similar derivative rules. After establishing both derivatives, separately verify that f'(1) equals 0 and f''(1) is greater than 0 by substituting x=1 into the derived expressions. This process confirms that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 12 * x ^ 2 + 48 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 24 * x + 48 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 24 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^3 + 12x^2 + 48x has a stationary point at x = -4, where both the first and second derivatives vanish. First, define the function and compute the first derivative f'(x) = 3x^2 + 24x + 48 by applying derivative rules and simplifying. Next, compute the second derivative f''(x) = 6x + 24 using similar methods. Establish the differentiability of both f(x) and f'(x) at all relevant points. Finally, verify the conditions for the stationary point by substituting x = -4 into both f'(-4) and f''(-4) to confirm that they equal zero, thus proving the existence of the stationary point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 18 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 18 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 3 * x^2 - 18 * x has a minimum at x=3 by demonstrating that f'(3) = 0 and f''(3) > 0. First, define the function and derive the first derivative, f'(x) = 6 * x - 18, using differentiation rules and confirming differentiability. Next, derive the second derivative, f''(x) = 6, and again confirm differentiability. The overall goal is divided into two parts: first, substitute x=3 into f'(x) to show it equals zero; second, substitute x=3 into f''(x) to confirm it is positive. This process establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 42 * x - 31 * x ^ 2) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 42 - 62 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 62 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 5 * x^4 - 42 * x - 31 * x^2 has a maximum at x = -1. This involves showing that the first derivative f'(-1) = 0, indicating a stationary point, and that the second derivative f''(-1) < 0, confirming it as a maximum. The process includes defining the function, calculating the first derivative f'(x) using differentiation rules, and simplifying it. Next, the second derivative f''(x) is derived similarly. Finally, the values of f'(-1) and f''(-1) are evaluated to verify that f'(-1) equals zero and f''(-1) is negative, thus establishing the maximum at x = -1."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 + x ^ 4 - 2 * x ^ 3 - 2343 * x ^ 2 + 20988 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 + 4 * x ^ 3 - 6 * x ^ 2 - 4686 * x + 20988 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 + 12 * x ^ 2 - 12 * x - 4686 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^5 + x^4 - 2x^3 - 2343x^2 + 20988x has a local maximum at x=6 by proving two conditions: f'(6) = 0 and f''(6) < 0. First, derive the first derivative f'(x) = 5x^4 + 4x^3 - 6x^2 - 4686x + 20988 by applying differentiation rules and simplifying. Next, derive the second derivative f''(x) = 20x^3 + 12x^2 - 12x - 4686 using similar methods. Finally, evaluate f'(6) and f''(6) by substituting x=6 into their respective formulas to confirm that f'(6) equals zero and f''(6) is negative, thus proving the local maximum at x=6."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 46873 * x ^ 2 + 374980 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 93746 * x + 374980 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 93746 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^6 - 46873 * x^2 + 374980 * x has a minimum at x=5 by proving two conditions: f'(5) = 0 and f''(5) > 0. First, define the function and derive its first derivative, f'(x) = 30 * x^5 - 93746 * x + 374980, by applying derivative rules and confirming differentiability. Next, derive the second derivative, f''(x) = 150 * x^4 - 93746, using the first derivative and similar rules. Finally, evaluate both derivatives at x=5, showing that f'(5) equals zero and f''(5) is positive, thus confirming the presence of a minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - 2 * x ^ 3 - 68 * x ^ 2 + 216 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 6 * x ^ 2 - 136 * x + 216 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 12 * x - 136 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the first and second derivatives of the function \\( f(x) = x^5 - 2x^3 - 68x^2 + 216x \\) equal zero at \\( x = 2 \\). First, define the function and compute the first derivative \\( f'(x) = 5x^4 - 6x^2 - 136x + 216 \\) using differentiation rules, ensuring all terms are differentiable. Next, calculate the second derivative \\( f''(x) = 20x^3 - 12x - 136 \\) similarly. After obtaining both derivatives, evaluate \\( f'(2) \\) and \\( f''(2) \\) by substituting \\( x = 2 \\) into their respective expressions to confirm that both derivatives vanish at this point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 - 6924 * x - 865 * x ^ 2) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 - 6924 - 1730 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 - 1730 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 4 x^4 - 865 x^2 - 6924 x \\) has a local maximum at \\( x = -6 \\), we need to demonstrate two conditions: \\( f'(-6) = 0 \\) and \\( f''(-6) < 0 \\). First, we define the function and compute its first derivative \\( f'(x) = 16 x^3 - 1730 x - 6924 \\) by applying derivative rules. Next, we find the second derivative \\( f''(x) = 48 x^2 - 1730 \\). We then evaluate \\( f'(-6) \\) to confirm it equals 0 and \\( f''(-6) \\) to show it is negative. Each step involves expanding, substituting, and simplifying expressions while ensuring differentiability throughout the process."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 + 34 * x - 27 * x ^ 2) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 + 34 - 54 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 54 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^4 + 34 * x - 27 * x^2 has a critical point at x = 1, indicating a local minimum. First, define the function and calculate its first derivative, f'(x) = 20 * x^3 + 34 - 54 * x, ensuring to apply derivative rules and confirm differentiability. Next, compute the second derivative, f''(x) = 60 * x^2 - 54, following similar steps. The main goal is divided into two parts: proving f'(1) = 0 and f''(1) > 0. Substitute x = 1 into both derivatives to verify that f'(1) equals zero and f''(1) is positive, confirming the presence of a local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 - 2 * x ^ 5 + x ^ 4 - 5 * x ^ 3 - 1855 * x ^ 2 - 8619 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 - 10 * x ^ 4 + 4 * x ^ 3 - 15 * x ^ 2 - 3710 * x - 8619 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 - 40 * x ^ 3 + 12 * x ^ 2 - 30 * x - 3710 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^6 - 2x^5 + x^4 - 5x^3 - 1855x^2 - 8619x has a local maximum at x = -3. This requires showing that the first derivative f'(-3) equals zero and the second derivative f''(-3) is less than zero. The process involves defining the function, calculating the first derivative f'(x) through functional extensionality, substitution, and algebraic manipulation. Next, the second derivative f''(x) is derived similarly. The final steps involve evaluating both derivatives at x = -3 to confirm f'(-3) = 0 and f''(-3) < 0, thus establishing the local maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 4 * x ^ 5 - 23752 * x ^ 2 + 187520 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 20 * x ^ 4 - 47504 * x + 187520 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 80 * x ^ 3 - 47504 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x ^ 6 + 4 * x ^ 5 - 23752 * x ^ 2 + 187520 * x has a local maximum at x=5 by verifying two conditions: f'(5) = 0 and f''(5) < 0. First, derive the first derivative f'(x) and confirm its form through function extensionality and algebraic simplification. Next, compute the second derivative f''(x) using similar methods. The main goal is divided into two subgoals: substituting x=5 into f'(x) to show it equals zero, and substituting x=5 into f''(x) to show it is negative. Each step involves confirming the differentiability of the terms involved and applying derivative rules appropriately."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 24 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^2 - 24 * x has a minimum at x=4 by verifying two conditions: f'(4) = 0 and f''(4) > 0. First, define the function f and compute its first derivative f'(x) = 6 * x - 24 through function extensionality, unfolding the definition, and applying derivative rules. Next, establish that f''(x) = 6 by substituting f'(x) and using derivative rules. Then, split the goal into two parts: prove f'(4) = 0 by simplifying f'(4) and show f''(4) > 0 by simplifying f''(4). This process involves algebraic simplifications and justifications of differentiability throughout."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 + 4 * x ^ 5 - 28080 * x ^ 2 + 264384 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 + 20 * x ^ 4 - 56160 * x + 264384 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 + 80 * x ^ 3 - 56160 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the first and second derivatives of the function f(x) = x^6 + 4 * x^5 - 28080 * x^2 + 264384 * x vanish at x = 6. First, the derivative f'(x) is calculated as 6 * x^5 + 20 * x^4 - 56160 * x + 264384, using derivative rules and simplifying the expression. Next, the second derivative f''(x) is found to be 30 * x^4 + 80 * x^3 - 56160, again applying differentiation rules and simplification. The final steps involve evaluating f'(6) and f''(6) using the derived formulas and confirming that both equal zero, thus fulfilling the objective of the proof."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 + 4 * x ^ 3 - 576 * x ^ 2 - 4752 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 + 12 * x ^ 2 - 1152 * x - 4752 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 + 24 * x - 1152 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task involves demonstrating that the first and second derivatives of the function f(x) = 3 * x^4 + 4 * x^3 - 576 * x^2 - 4752 * x vanish at x = -6. First, define the function and compute the first derivative f'(x) = 12 * x^3 + 12 * x^2 - 1152 * x - 4752 by applying differentiation rules and simplifying. Next, calculate the second derivative f''(x) = 36 * x^2 + 24 * x - 1152 using similar steps. Finally, verify that both f'(-6) and f''(-6) equal 0 by substituting x = -6 into the derived expressions for the first and second derivatives."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 - 3 * x ^ 3 - 351 * x ^ 2 + 1928 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 - 9 * x ^ 2 - 702 * x + 1928 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 - 18 * x - 702 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 4 * x^4 - 3 * x^3 - 351 * x^2 + 1928 * x has a maximum at x=4 by proving two conditions: f'(4) = 0 and f''(4) < 0. First, derive the first derivative f'(x) = 16 * x^3 - 9 * x^2 - 702 * x + 1928 using function extensionality, substitution, and relevant derivative theorems, ensuring differentiability. Next, derive the second derivative f''(x) = 48 * x^2 - 18 * x - 702 through similar methods. Finally, evaluate f'(4) to confirm it equals zero and f''(4) to confirm it is negative, thus establishing the maximum at x=4."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 3 * x ^ 3 - 242 * x ^ 2 + 993 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 9 * x ^ 2 - 484 * x + 993 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 18 * x - 484 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 5 * x^4 - 3 * x^3 - 242 * x^2 + 993 * x has a minimum at x = 3 by proving two conditions: f'(3) = 0 and f''(3) > 0. First, define the function and compute its first derivative f'(x) = 20 * x^3 - 9 * x^2 - 484 * x + 993, ensuring to justify the differentiability of f. Next, calculate the second derivative f''(x) = 60 * x^2 - 18 * x - 484, again justifying differentiability. Finally, evaluate f'(3) to confirm it equals zero and f''(3) to show it is positive, thus establishing that x = 3 is a minimum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - x ^ 5 + 2 * x ^ 4 + 4 * x ^ 3 - 18797 * x ^ 2 + 120232 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 5 * x ^ 4 + 8 * x ^ 3 + 12 * x ^ 2 - 37594 * x + 120232 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 20 * x ^ 3 + 24 * x ^ 2 + 24 * x - 37594 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task involves demonstrating that the function \\( f(x) = 5x^6 - x^5 + 2x^4 + 4x^3 - 18797x^2 + 120232x \\) has a local minimum at \\( x = 4 \\) by proving \\( f'(4) = 0 \\) and \\( f''(4) > 0 \\). First, define \\( f \\) and compute its first derivative \\( f'(x) \\) using derivative rules, ensuring to verify differentiability for each term. Next, compute the second derivative \\( f''(x) \\) similarly. Finally, evaluate \\( f'(4) \\) and \\( f''(4) \\) using the derived formulas to confirm that \\( f'(4) \\) simplifies to 0 and \\( f''(4) \\) yields a positive value, thus establishing the local minimum at \\( x = 4 \\)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 - 2 * x ^ 4 + x ^ 3 + 373 * x ^ 2 + 1096 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 - 8 * x ^ 3 + 3 * x ^ 2 + 746 * x + 1096 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 - 24 * x ^ 2 + 6 * x + 746 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 4 * x^5 - 2 * x^4 + x^3 + 373 * x^2 + 1096 * x has a maximum at x = -2. This involves proving two conditions: first, that the first derivative f'(-2) equals zero, indicating a stationary point, and second, that the second derivative f''(-2) is less than zero, confirming a local maximum. The process includes defining the function, calculating the first derivative f'(x) and the second derivative f''(x) through differentiation rules, and simplifying the results. Finally, by substituting x = -2 into both derivatives, we will verify that f'(-2) = 0 and f''(-2) < 0, thus establishing the maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + 2 * x ^ 4 - 5 * x ^ 3 - 2504 * x - 801 * x ^ 2) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 8 * x ^ 3 - 15 * x ^ 2 - 2504 - 1602 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 24 * x ^ 2 - 30 * x - 1602 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^6 + 2 * x^4 - 5 * x^3 - 2504 * x - 801 * x^2 has a local maximum at x = -2. This involves proving that the first derivative f'(-2) equals zero and the second derivative f''(-2) is negative. First, derive f'(x) and f''(x) using derivative rules, ensuring to verify differentiability for each term. Then, split the proof into two parts: for f'(-2), substitute -2 into the first derivative and simplify to show it equals zero; for f''(-2), substitute -2 into the second derivative and simplify to confirm it is negative. This establishes the local maximum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 9 * x ^ 2 + 27 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 18 * x + 27 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 18 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the first and second derivatives of the function f(x) = x^3 - 9 * x^2 + 27 * x are both zero at x = 3. First, define the function and prove that f\u2032(x) = 3 * x^2 - 18 * x + 27 by extending with respect to x, substituting the function definition, applying derivative properties, and simplifying. Next, show that f\u2032\u2032(x) = 6 * x - 18 using similar steps. After establishing both derivatives, split the goal into two parts: proving f\u2032(3) = 0 and f\u2032\u2032(3) = 0. Finally, substitute x = 3 into both derivative expressions and simplify to confirm the results."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 7 * x ^ 2 + 10 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 14 * x + 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 14 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^4 - 7x^2 + 10x has a local maximum at x=1 by demonstrating that f'(1) = 0 and f''(1) < 0. First, define the function and calculate its first derivative, f'(x) = 4x^3 - 14x + 10, by applying derivative rules and simplifying. Next, compute the second derivative, f''(x) = 12x^2 - 14, using similar methods. Finally, evaluate both derivatives at x=1: substitute x=1 into f'(x) to confirm it equals 0, and into f''(x) to show it is negative. This confirms the conditions for a local maximum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 24 * x has a minimum at x=6 by proving two conditions: f'(6) = 0 and f''(6) > 0. First, define the function and compute its first derivative, f'(x) = 4 * x - 24, using derivative rules and justifying differentiability. Next, find the second derivative, f''(x) = 4, confirming it is a constant function. Then, verify the two conditions by substituting x=6 into f'(x) to show it equals zero and into f''(x) to confirm it is greater than zero. This structured approach ensures that both necessary conditions for a minimum are satisfied."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 44 * x ^ 2 + 215 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 88 * x + 215 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 88 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function \\( f(x) = 3x^3 + 44x^2 + 215x \\) has a maximum at \\( x = -5 \\), we need to demonstrate two conditions: \\( f'(-5) = 0 \\) and \\( f''(-5) < 0 \\). First, we derive the first derivative \\( f'(x) = 9x^2 + 88x + 215 \\) by applying differentiation rules and simplifying. Next, we find the second derivative \\( f''(x) = 18x + 88 \\) using similar methods. After establishing the differentiability of each component, we evaluate \\( f'(-5) \\) and confirm it equals zero, then evaluate \\( f''(-5) \\) and confirm it is negative. This confirms that \\( x = -5 \\) is indeed a maximum point for the function."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 4 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = x^2 + 4x has a minimum at x = -2 by demonstrating that the first derivative f'(-2) = 0 and the second derivative f''(-2) > 0. First, define the function and compute its first derivative f'(x) = 2x + 4 through differentiation rules and simplification. Next, find the second derivative f''(x) = 2, confirming differentiability at each step. Finally, evaluate f'(-2) to show it equals 0 and f''(-2) to confirm it is greater than 0, thereby establishing that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 - 24576 * x - 3840 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 - 24576 - 7680 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 - 7680 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that both the first and second derivatives of the function f(x) = x^6 - 24576 * x - 3840 * x^2 vanish at x = -4. First, define the function and derive the first derivative, f'(x) = 6 * x^5 - 24576 - 7680 * x, by applying differentiation rules and simplifying. Next, derive the second derivative, f''(x) = 30 * x^4 - 7680, using similar differentiation techniques. The goal is to prove f'(-4) = 0 and f''(-4) = 0. Substitute x = -4 into both derivative expressions and simplify to confirm that both derivatives equal zero at this point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 + x ^ 3 - 97 * x ^ 2 - 393 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 + 3 * x ^ 2 - 194 * x - 393 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 + 6 * x - 194 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function f(x) = 2 * x^4 + x^3 - 97 * x^2 - 393 * x has a minimum at x = -3. This involves demonstrating that the first derivative f'(-3) equals zero and the second derivative f''(-3) is positive. The process begins with defining the function and calculating its first derivative, f'(x) = 8 * x^3 + 3 * x^2 - 194 * x - 393, using properties of derivatives and justifying differentiability. Next, the second derivative, f''(x) = 24 * x^2 + 6 * x - 194, is computed similarly. The final steps involve substituting x = -3 into both derivatives to confirm that f'(-3) = 0 and f''(-3) > 0, thus proving the existence of a minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 19 * x ^ 2 + 120 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 38 * x + 120 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 38 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^3 + 19x^2 + 120x has a minimum at x = -6 by proving two conditions: f'(-6) = 0 and f''(-6) > 0. First, define the function and compute its first derivative, f'(x) = 3x^2 + 38x + 120, by applying differentiation rules and confirming its differentiability. Next, calculate the second derivative, f''(x) = 6x + 38, using the first derivative. Finally, evaluate both derivatives at x = -6: show that f'(-6) equals zero and f''(-6) is positive, thereby confirming the minimum point at x = -6."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 4 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = x^2 + 4x has a minimum at x = -2, we need to demonstrate two conditions: f'(-2) = 0 and f''(-2) > 0. First, we define the function and calculate its first derivative, f'(x) = 2x + 4, by applying derivative theorems and simplifying. Next, we find the second derivative, f''(x) = 2, using similar methods. We then break down the proof into two parts: substituting x = -2 into f'(x) to show it equals 0, and substituting into f''(x) to confirm it is greater than 0. This establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 3 * x ^ 4 - 3 * x ^ 3 - 39471 * x ^ 2 + 378072 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 12 * x ^ 3 - 9 * x ^ 2 - 78942 * x + 378072 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 36 * x ^ 2 - 18 * x - 78942 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to prove that the function \\( f(x) = 2x^6 + 3x^4 - 3x^3 - 39471x^2 + 378072x \\) has a local minimum at \\( x = 6 \\) by demonstrating two conditions: \\( f'(6) = 0 \\) and \\( f''(6) > 0 \\). First, the first derivative \\( f'(x) \\) is calculated as \\( 12x^5 + 12x^3 - 9x^2 - 78942x + 378072 \\) through differentiation rules. Next, the second derivative \\( f''(x) \\) is found to be \\( 60x^4 + 36x^2 - 18x - 78942 \\). The final steps involve substituting \\( x = 6 \\) into both derivatives to confirm that \\( f'(6) = 0 \\) and \\( f''(6) > 0 \\), thereby establishing the local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 10 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The goal is to prove that the function f(x) = x\u00b2 + 10x has a minimum at x = -5 by demonstrating that f'(-5) = 0 and f''(-5) > 0. First, define the function and compute its first derivative, f'(x) = 2x + 10, ensuring to justify differentiability. Next, calculate the second derivative, f''(x) = 2, again justifying differentiability. The proof is divided into two parts: first, show that f'(-5) equals zero by substituting -5 into the first derivative; second, confirm that f''(-5) is greater than zero by substituting -5 into the second derivative. This establishes that the function has a minimum at the specified point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 44 * x ^ 2 + 215 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 88 * x + 215 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 88 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "To prove that the function f(x) = 3 * x^3 + 44 * x^2 + 215 * x has a local maximum at x = -5, we need to demonstrate two conditions: f'(-5) = 0 and f''(-5) < 0. First, define the function and calculate its first derivative f'(x) = 9 * x^2 + 88 * x + 215 by applying differentiation rules. Next, find the second derivative f''(x) = 18 * x + 88. Then, split the proof into two parts: for f'(-5), substitute -5 into f'(x) and confirm it equals 0; for f''(-5), substitute -5 into f''(x) and show it is negative. This process involves algebraic simplification and verification of differentiability for all terms involved."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 5 * x ^ 3 + 3 * x ^ 2 - 16 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 15 * x ^ 2 + 6 * x - 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 30 * x + 6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^4 + 5 * x^3 + 3 * x^2 - 16 * x has a local maximum at x = -2 by verifying two conditions: f'(-2) = 0 and f''(-2) < 0. First, define the function and compute its first derivative f'(x) = 4 * x^3 + 15 * x^2 + 6 * x - 16 using rules for derivatives and ensuring differentiability. Next, calculate the second derivative f''(x) = 12 * x^2 + 30 * x + 6, again applying derivative rules. Finally, evaluate f'(-2) and f''(-2) by substituting -2 into the respective derivatives, confirming that f'(-2) equals zero and f''(-2) is negative, thus establishing the local maximum at x = -2."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 3 * x ^ 3 - 20 * x - 4 * x ^ 2) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 9 * x ^ 2 - 20 - 8 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 18 * x - 8 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = x^4 + 3x^3 - 20x - 4x^2 has a minimum at x = -2 by verifying two conditions: f'(-2) = 0 and f''(-2) > 0. First, define the function and derive its first derivative f'(x) = 4x^3 + 9x^2 - 20 - 8x through differentiation rules and simplification. Next, derive the second derivative f''(x) = 12x^2 + 18x - 8 using similar methods. After establishing both derivatives, evaluate f'(-2) to confirm it equals zero and f''(-2) to ensure it is positive, thus proving the minimum condition at x = -2."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 287 * x ^ 2 - 1528 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 574 * x - 1528 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 574 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task involves analyzing the function f(x) = 3 * x^4 - 287 * x^2 - 1528 * x to demonstrate that it has a stationary point at x = -4, which is a local minimum. First, define the function and derive its first derivative, f'(x) = 12 * x^3 - 574 * x - 1528, by applying differentiation rules and simplifying. Next, derive the second derivative, f''(x) = 36 * x^2 - 574, using similar differentiation techniques. The goal is to prove two conditions: f'(-4) = 0 and f''(-4) > 0. This involves explicitly evaluating both derivatives at x = -4 to confirm that the first derivative equals zero and the second derivative is positive, indicating a local minimum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 2 * x^2 - 24 * x has a minimum at x = 6 by proving two conditions: f'(6) = 0 and f''(6) > 0. First, define the function and compute its first derivative, f'(x) = 4 * x - 24, by applying derivative rules and simplifying. Next, find the second derivative, f''(x) = 4, using similar steps. After establishing the derivatives, verify the conditions by substituting x = 6 into both derivatives. Confirm that f'(6) equals zero and that f''(6) is greater than zero, thus proving the presence of a minimum at x = 6."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 - x ^ 4 - 4 * x ^ 3 + 31 * x ^ 2 + 50 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 - 4 * x ^ 3 - 12 * x ^ 2 + 62 * x + 50 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 - 12 * x ^ 2 - 24 * x + 62 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 4 * x^5 - x^4 - 4 * x^3 + 31 * x^2 + 50 * x has a local maximum at x = -1 by proving two conditions: f'(-1) = 0 and f''(-1) < 0. First, define the function and compute its first derivative f'(x) = 20 * x^4 - 4 * x^3 - 12 * x^2 + 62 * x + 50 using differentiation rules. Next, calculate the second derivative f''(x) = 80 * x^3 - 12 * x^2 - 24 * x + 62. Finally, evaluate both derivatives at x = -1, showing that f'(-1) equals 0 and f''(-1) is negative, confirming the presence of a local maximum at that point."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 45 * x ^ 2 + 225 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 90 * x + 225 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 90 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "The task is to demonstrate that the function f(x) = 3 * x^3 + 45 * x^2 + 225 * x has a stationary point at x = -5, requiring both the first and second derivatives to equal zero at this point. First, define the function and compute its first derivative f'(x) = 9 * x^2 + 90 * x + 225 by applying derivative rules and simplifying. Next, find the second derivative f''(x) = 18 * x + 90 using similar methods. Finally, evaluate both derivatives at x = -5, showing that f'(-5) = 0 and f''(-5) = 0, confirming the existence of a stationary point at this location."
    }
]