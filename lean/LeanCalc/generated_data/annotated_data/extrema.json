[
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 5 * x ^ 5 - 82 * x ^ 2 + 127 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 25 * x ^ 4 - 164 * x + 127 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 100 * x ^ 3 - 164 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 6 + 5 * x ^ 5 - 82 * x ^ 2 + 127 * x, we want to prove that it has a local maximum at the point x=1. To do this, we need to show that the first derivative at x=1 is zero (f'(1) = 0), and the second derivative at x=1 is negative (f''(1) < 0).\n1) Introduce the hypothesis, which is the definition of the function f(x).\n2) Show that f'(x) = 12 * x ^ 5 + 25 * x ^ 4 - 164 * x + 127\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the definition of f(x) using the hypothesis.\n  2.3) Systematically apply derivative rules for sums, products, powers, and constants.\n  2.4) Simplify the result algebraically.\n  2.5) Argue that the function is differentiable where required.\n3) Show that f''(x) = 60 * x ^ 4 + 100 * x ^ 3 - 164\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the definition of f'(x) proved in step 2.\n  3.3) Systematically apply derivative rules for sums, products, powers, and constants to each term.\n  3.4) Simplify the result algebraically.\n  3.5) Argue that the function is differentiable where required.\n4) Break the goal into its two components: f'(1) = 0 and f''(1) < 0.\n5) For the first component, substitute the value f'(1) using the formula found in step 2, and simplify to show it is 0.\n6) For the second component, substitute the value f''(1) using the formula found in step 3, simplify, and check that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 - x ^ 3  ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 - 3 * x ^ 2   := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 - 6 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 4 - x ^ 3, we want to show that at x = 0, both the first and second derivatives of f(x) are zero, i.e., f'(0) = 0 and f''(0) = 0.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 8 * x ^ 3 - 3 * x ^ 2.\n  2.1) Extend w.r.t variable x.\n  2.2) Expand the function definition for f(x).\n  2.3) Use rules for the derivative of a sum and difference.\n  2.4) Compute the derivatives of each monomial term in the expression.\n  2.5) Simplify the result.\n  2.6) Justify differentiability of each term.\n3) Show that f''(x) = 24 * x ^ 2 - 6 * x.\n  3.1) Extend w.r.t variable x.\n  3.2) Use your established formula for f'(x).\n  3.3) Use rules for the derivative of a sum and difference as before.\n  3.4) Compute the derivatives for each resulting term.\n  3.5) Simplify the result.\n  3.6) Justify differentiability of each term.\n4) Split the main goal into the two parts: f'(0) = 0 and f''(0) = 0.\n5) In the first subgoal, substitute your formula for f'(x) at x = 0 and simplify.\n6) In the second subgoal, substitute your formula for f''(x) at x = 0 and simplify."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 17 * x ^ 2 + 96 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 34 * x + 96 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 34 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^3 - 17x^2 + 96x, we want to verify that it has a minimum at x = 6. For this, we need to demonstrate that the first derivative at x = 6 is zero, and the second derivative at x = 6 is positive.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 3x^2 - 34x + 96.\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the explicit function definition for f.\n  2.3) Apply rules for taking derivatives of sums, differences, powers, and scalar multiples.\n  2.4) Simplify the resulting expression algebraically.\n  2.5) Justify the differentiability needed in each piece of the calculation.\n3) Show that f''(x) = 6x - 34.\n  3.1) Extend with respect to variable x.\n  3.2) Substitute in the previously derived expression for f'(x).\n  3.3) Apply rules for taking derivatives of sums, differences, and powers as needed.\n  3.4) Simplify the algebra to obtain the required form.\n  3.5) Justify the differentiability as relevant.\n4) Split the final goal into two parts: show that f'(6) = 0 and f''(6) > 0.\n5) Substitute in the value x = 6 for f' in the first part and verify it simplifies to zero.\n6) Substitute x = 6 for f'' in the second part and verify the result is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 121 * x ^ 2 + 324 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 242 * x + 324 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 242 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 4 - 121 * x ^ 2 + 324 * x, we want to show that it has a maximum at x = 2.\nThat is, we need to prove f'(2) = 0 (the first derivative vanishes at x = 2) and f''(2) < 0 (the second derivative is negative at x = 2, indicating a maximum).\n1) Introduce the hypothesis, which gives the definition of the function.\n2) Prove that the first derivative f'(x) = 20 * x ^ 3 - 242 * x + 324:\n  2.1) Use an argument to extend for all x.\n  2.2) Substitute the definition of f into the derivative.\n  2.3) Apply rules for the derivative (addition, subtraction, powers, multiplication, constants) to expand the computation.\n  2.4) Perform algebraic simplification to get the result in the required form.\n  2.5) Justify that each term is differentiable at every point.\n3) Prove that the second derivative f''(x) = 60 * x^2 - 242:\n  3.1) Use an argument to extend for all x.\n  3.2) Substitute the expression for f' from the previous step.\n  3.3) Apply differentiation rules (as in the previous step) and simplify.\n  3.4) Show the resulting algebraic form is as needed.\n  3.5) Confirm the differentiability of each term.\n4) Split the main goal into the two conditions: f'(2) = 0 and f''(2) < 0.\n5) For the first, expand f'(2) using the result you have for f'(x), and show it equals zero by computation.\n6) For the second, expand f''(2) using your formula for f''(x), and compute/simplify to show that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 + 30 * x ^ 2 + 60 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 + 60 * x + 60 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x + 60 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 3 + 30 * x ^ 2 + 60 * x, we want to prove that both the first and second derivatives vanish at the point x = -2; in other words, f'(-2) = 0 and f''(-2) = 0.\n1) Introduce the hypothesis, namely the given explicit function definition for f.\n2) Show that f'(x) = 15 * x ^ 2 + 60 * x + 60\n  2.1) Substitute the explicit definition of f into the derivative.\n  2.2) Apply appropriate differentiation rules to each term, including product and power rules.\n  2.3) Collect the resulting terms and combine like terms.\n  2.4) Prove differentiability of f for all relevant terms.\n3) Show that f''(x) = 30 * x + 60\n  3.1) Substitute the result of f'(x) obtained in the last step.\n  3.2) Differentiate each term again, applying linearity and product rules as needed.\n  3.3) Combine like terms and organize the result.\n  3.4) Prove differentiability of f' for all relevant terms.\n4) Use a case split to treat the two subgoals: that is, show f'(-2) = 0 and f''(-2) = 0 separately.\n5) For each goal, substitute the explicit formulas from steps 2 and 3 with x = -2 and simplify both expressions to show they equal zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 - 4 * x ^ 5 + 4 * x ^ 4 - 3726 * x ^ 2 - 17388 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 - 20 * x ^ 4 + 16 * x ^ 3 - 7452 * x - 17388 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 80 * x ^ 3 + 48 * x ^ 2 - 7452 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 2x^6 - 4x^5 + 4x^4 - 3726x^2 - 17388x \\), we want to show that both the first and second derivatives vanish at \\( x = -3 \\), i.e., \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\).\n\n1) Introduce the hypothesis, specifically the definition of \\( f(x) \\).\n2) Prove that \\( f'(x) = 12x^5 - 20x^4 + 16x^3 - 7452x - 17388 \\).\n  2.1) Extend the equality by introducing a variable \\( x \\).\n  2.2) Unfold the definition of \\( f(x) \\) using the hypothesis.\n  2.3) Apply derivative rules for sums, differences, products, powers, and constants to differentiate each term individually.\n  2.4) Combine the resulting terms and simplify the expression algebraically.\n  2.5) Justify the differentiability of each component function at \\( x \\).\n3) Show that \\( f''(x) = 60x^4 - 80x^3 + 48x^2 - 7452 \\).\n  3.1) Extend with respect to a variable \\( x \\).\n  3.2) Substitute in the previously proved \\( f'(x) \\) as the function to differentiate.\n  3.3) Use derivative rules to handle each term in \\( f'(x) \\).\n  3.4) Simplify the resulting expression using algebraic manipulation.\n  3.5) Provide justification for the differentiability of each term.\n4) Split the main goal into its two constituent equations: \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\).\n5) Substitute the expression for \\( f'(x) \\) into the first equation, specialize at \\( x = -3 \\), and simplify the result.\n6) Substitute the expression for \\( f''(x) \\) into the second equation, specialize at \\( x = -3 \\), and simplify the result."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^2, we want to prove that it has a minimum at the point x=0.\nFor that, we need to show that f'(0) = 0 (i.e., the first derivative at x=0 is zero) and f''(0) > 0 (i.e., the second derivative at x=0 is positive).\n1) Introduce the hypothesis, i.e., the function definition of f.\n2) Show that f'(x) = 2 * x\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition using the given hypothesis.\n  2.3) Apply the relevant derivative rules for powers.\n  2.4) Simplify the algebraic expression.\n  2.5) Show differentiability at every step as needed.\n3) Show that f''(x) = 2\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the expression for f'(x) from the previous step.\n  3.3) Apply the relevant derivative rules for multiplication and constants.\n  3.4) Simplify the algebraic result.\n  3.5) Show differentiability at every step as needed.\n4) Split the goal into two parts: proving f'(0) = 0 and proving f''(0) > 0.\n5) Substitute the expression for f'(0) and verify that it equals zero.\n6) Substitute the expression for f''(0) and verify that it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 + 3 * x ^ 3 + 20 * x - 17 * x ^ 2) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 + 9 * x ^ 2 + 20 - 34 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 + 18 * x - 34 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 5 + 3 * x ^ 3 + 20 * x - 17 * x ^ 2, we want to prove that it has a minima at the point x = 1.  \nFor that, we have to show f'(1) = 0, i.e. the first derivative of f(x) at x = 1 is 0, and f''(1) > 0, i.e. the second derivative at x = 1 is positive.\n\n1) Introduce the hypothesis, in this case the function definition.\n\n2) Show that f'(x) = 5 * x ^ 4 + 9 * x ^ 2 + 20 - 34 * x.\n  2.1) Extend the proof with respect to a variable x.\n  2.2) Substitute the definition of the function f(x).\n  2.3) Apply derivative rules for sums, products, and powers to compute the derivative.\n  2.4) Simplify the resulting expression using algebra.\n  2.5) Justify differentiability at the necessary steps for all terms.\n\n3) Show that f''(x) = 20 * x ^ 3 + 18 * x - 34.\n  3.1) Extend the proof with respect to x.\n  3.2) Substitute the computation for f'(x) from the previous step.\n  3.3) Apply derivative rules to find the second derivative.\n  3.4) Simplify the resulting expression using algebra.\n  3.5) Justify the differentiability of each term as needed.\n\n4) Split the main goal into its constituent parts, namely f'(1) = 0 and f''(1) > 0.\n\n5) Substitute the expression for f'(x) at x = 1 and show that it equals 0.\n\n6) Substitute the expression for f''(x) at x = 1 and show that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 + 2 * x ^ 3 - 214 * x ^ 2 + 1104 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 + 6 * x ^ 2 - 428 * x + 1104 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 + 12 * x - 428 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 4 + 2 * x ^ 3 - 214 * x ^ 2 + 1104 * x, we want to prove that it has a local minimum at the point x=4. \nFor that, we have to show f'(4) = 0 (the first derivative at x=4 is zero) and f''(4) > 0 (the second derivative at x=4 is positive).\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 8 * x ^ 3 + 6 * x ^ 2 - 428 * x + 1104.\n  2.1) Extend with respect to variable x.\n  2.2) Expand the given function definition.\n  2.3) Apply the appropriate theorems for differentiation (e.g., derivative of sums, products, powers, constants, differences).\n  2.4) Simplify the resulting expression and prove it matches the desired form.\n  2.5) Argue why each term in f(x) is differentiable, and thus f(x) is differentiable.\n3) Show that f''(x) = 24 * x ^ 2 + 12 * x - 428.\n  3.1) Extend with respect to variable x.\n  3.2) Expand the result for f'(x) obtained above.\n  3.3) Apply the relevant differentiation theorems (for sums, products, and constants).\n  3.4) Simplify the result and show it matches the expected form.\n  3.5) Argue that the previous derivative is differentiable ensuring applicability.\n4) Split the goal into its two parts: f'(4) = 0 and f''(4) > 0.\n5) Substitute x = 4 into the expression for f'(x), and verify the claim.\n6) Substitute x = 4 into the expression for f''(x), and show that the result is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 3 * x ^ 5 - x ^ 4 + 4 * x ^ 3 + 109488 * x - 17230 * x ^ 2) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 15 * x ^ 4 - 4 * x ^ 3 + 12 * x ^ 2 + 109488 - 34460 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 60 * x ^ 3 - 12 * x ^ 2 + 24 * x - 34460 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 4x^6 + 3x^5 - x^4 + 4x^3 + 109488x - 17230x^2 \\), we want to prove that it has a local minimum at \\( x=4 \\). For this, we must show \\( f'(4) = 0 \\) (the derivative at \\( x=4 \\) is zero) and \\( f''(4) > 0 \\) (the second derivative at \\( x=4 \\) is positive).\n\n1) Introduce the hypothesis, giving the function definition.\n2) Show that \\( f'(x) = 24x^5 + 15x^4 - 4x^3 + 12x^2 + 109488 - 34460x \\).\n  2.1) Apply function extensionality with respect to \\( x \\).\n  2.2) Substitute in the definition of the function \\( f \\).\n  2.3) Apply linearity and product rules for differentiation as appropriate to each term.\n  2.4) Simplify the resulting algebraic expressions.\n  2.5) Check and justify differentiability of each term where required.\n3) Show that \\( f''(x) = 120x^4 + 60x^3 - 12x^2 + 24x - 34460 \\).\n  3.1) Apply function extensionality with respect to \\( x \\).\n  3.2) Substitute in the previously derived formula for \\( f'(x) \\).\n  3.3) Differentiate each component of \\( f'(x) \\) using appropriate rules.\n  3.4) Simplify the expressions to the desired formula for \\( f''(x) \\).\n  3.5) Justify differentiability of each component where necessary.\n4) Split the goal into: (a) \\( f'(4) = 0 \\), and (b) \\( f''(4) > 0 \\).\n5) For \\( f'(4) = 0 \\): Substitute \\( x = 4 \\) into the formula for \\( f'(x) \\) and show the result is zero.\n6) For \\( f''(4) > 0 \\): Substitute \\( x = 4 \\) into the formula for \\( f''(x) \\) and show it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 36 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 36 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^2 + 36 * x, we want to prove that it has a minimum at the point x = -6.  \nFor that, we have to show f'(-6) = 0 (the first derivative at x = -6 is zero) and f''(-6) > 0 (the second derivative at x = -6 is positive).\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 6 * x + 36\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition.\n  2.3) Apply derivative rules to each term in the sum.\n  2.4) Simplify the resulting algebraic expressions.\n  2.5) Justify the differentiability of f(x) where needed.\n3) Show that f''(x) = 6\n  3.1) Extend with respect to variable x.\n  3.2) Use the just-proved formula for f'(x).\n  3.3) Differentiate each term in the expression for f'(x).\n  3.4) Simplify to obtain the constant result.\n  3.5) Justify the differentiability of f'(x) where needed.\n4) Split the goal into its two parts: f'(-6) = 0 and f''(-6) > 0.\n5) Substitute and simplify to show that f'(-6) = 0.\n6) Substitute and show that f''(-6) > 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + 2 * x ^ 5 + x ^ 4 - 4 * x ^ 3 - 93166 * x ^ 2 - 896376 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 10 * x ^ 4 + 4 * x ^ 3 - 12 * x ^ 2 - 186332 * x - 896376 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 40 * x ^ 3 + 12 * x ^ 2 - 24 * x - 186332 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 6 + 2 * x ^ 5 + x ^ 4 - 4 * x ^ 3 - 93166 * x ^ 2 - 896376 * x, we want to prove that it has a minima at the point x = -6.  \nSpecifically, we need to show f'(-6) = 0 (the first derivative at x = -6 is 0) and f''(-6) > 0 (the second derivative at x = -6 is positive).\n1) Introduce the hypothesis \u2014 that is, the definition of the function f.\n2) Show that f'(x) = 30 * x ^ 5 + 10 * x ^ 4 + 4 * x ^ 3 - 12 * x ^ 2 - 186332 * x - 896376.\n  2.1) State that you want to prove the above formula for the first derivative.\n  2.2) Extend with respect to the variable x.\n  2.3) Substitute in the provided definition of f.\n  2.4) Apply derivative rules for sums, subtractions, products, constants, and powers to compute the derivative of each term.\n  2.5) Combine like terms and simplify the resulting expression.\n  2.6) Justify the differentiability of each piece as needed.\n3) Show that f''(x) = 150 * x ^ 4 + 40 * x ^ 3 + 12 * x ^ 2 - 24 * x - 186332.\n  3.1) State that you want to prove the above formula for the second derivative.\n  3.2) Expand with respect to the variable x.\n  3.3) Substitute in the previously-proved expression for f'(x).\n  3.4) Apply derivative rules for each term in the expression.\n  3.5) Combine like terms and simplify.\n  3.6) Justify the differentiability of each piece as needed.\n4) Split the goal into the two required statements: f'(-6) = 0 and f''(-6) > 0.\n5) For the first part (f'(-6) = 0), substitute -6 into your expression for the first derivative and confirm the result equals zero.\n6) For the second part (f''(-6) > 0), substitute -6 into your expression for the second derivative and verify that the result is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - x ^ 4 - 214 * x ^ 2 + 987 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 4 * x ^ 3 - 428 * x + 987 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 12 * x ^ 2 - 428 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = x^5 - x^4 - 214x^2 + 987x \\), we want to prove that it has a local minima at the point \\( x = 3 \\).\nThis means we must show that \\( f'(3) = 0 \\) (the first derivative at \\( x=3 \\) is zero) and \\( f''(3) > 0 \\) (the second derivative at \\( x=3 \\) is positive).\n\n1) Introduce the hypothesis, in this case the definition for the function \\( f \\).\n2) Show that \\( f'(x) = 5x^4 - 4x^3 - 428x + 987 \\)\n  2.1) Extend with respect to variable \\( x \\).\n  2.2) Expand the function definition.\n  2.3) Apply rules for the derivatives of sum, difference, power, and product functions, as appropriate to each term.\n  2.4) Simplify the resulting expression by combining like terms.\n  2.5) Check differentiability for each component term.\n3) Show that \\( f''(x) = 20x^3 - 12x^2 - 428 \\)\n  3.1) Extend with respect to variable \\( x \\).\n  3.2) Expand the definition of \\( f'(x) \\) found above.\n  3.3) Apply derivative rules to compute the second derivative.\n  3.4) Simplify and combine terms as needed.\n  3.5) Verify differentiability where needed.\n4) Split the goal into its two parts: \\( f'(3) = 0 \\) and \\( f''(3) > 0 \\).\n5) Substitute the explicit formula for \\( f'(x) \\) at \\( x=3 \\) and verify equality to zero.\n6) Substitute the explicit formula for \\( f''(x) \\) at \\( x=3 \\) and verify inequality to zero (i.e., that it's positive)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 15 * x ^ 2 + 15 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 30 * x + 15 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 30 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 3 - 15 * x ^ 2 + 15 * x, we want to show that both f'(1) = 0 and f''(1) = 0, i.e. the first and second derivatives of f at x = 1 are both zero.\n1) Introduce the hypothesis, that is, the function definition.\n2) Show that f'(x) = 15 * x ^ 2 - 30 * x + 15.\n  2.1) Extend the equality w.r.t. variable x.\n  2.2) Rewrite using the given definition of f.\n  2.3) Apply the rules for the derivative of sums, products, and powers, step by step, to break down the derivative computation for each term.\n  2.4) Combine and simplify like terms to reach the explicit formula.\n  2.5) Establish differentiability for each component of f.\n3) Show that f''(x) = 30 * x - 30.\n  3.1) Extend the equality w.r.t. variable x.\n  3.2) Substitute the expression for f'(x) you just found.\n  3.3) Apply the rules for the derivative of sums and products again to each term.\n  3.4) Gather and simplify to derive the explicit form.\n  3.5) Establish differentiability for each component of f'(x).\n4) Split the goal into its two statements: f'(1) = 0 and f''(1) = 0.\n5) Substitute the formula for f'(x) into f'(1), and confirm by calculation that it is zero.\n6) Substitute the formula for f''(x) into f''(1), and confirm by calculation that it is zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 - 5 * x ^ 4 - 4 * x ^ 3 - 258 * x ^ 2 + 840 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 - 20 * x ^ 3 - 12 * x ^ 2 - 516 * x + 840 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 - 60 * x ^ 2 - 24 * x - 516 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 5 - 5 * x ^ 4 - 4 * x ^ 3 - 258 * x ^ 2 + 840 * x, we want to prove that it has a local maximum at the point x = 2. That is, we are to show that f'(2) = 0 (the first derivative at x=2 is zero) and f''(2) < 0 (the second derivative at x=2 is negative).\n1) Introduce the hypothesis, namely the explicit function definition of f.\n2) Show that f'(x) = 25 * x ^ 4 - 20 * x ^ 3 - 12 * x ^ 2 - 516 * x + 840.\n  2.1) Prove this by extending the equality to hold for all x.\n  2.2) Expand the definition of f for general x.\n  2.3) Apply differentiation rules for sums, differences, and products.\n  2.4) Simplify the result by collecting like terms.\n  2.5) Justify differentiability of each term and combination in the function.\n3) Show that f''(x) = 100 * x ^ 3 - 60 * x ^ 2 - 24 * x - 516.\n  3.1) Prove this by extending the equality for all x.\n  3.2) Substitute in the formula for f'(x) you just showed.\n  3.3) Apply differentiation rules once more to the polynomial.\n  3.4) Simplify the result using algebra.\n  3.5) Check the differentiability of each term composing f'.\n4) Split the goal into showing both f'(2) = 0 and f''(2) < 0.\n5) Substitute your expression for f'(x) with x=2 into the first goal and simplify to show it is zero.\n6) Substitute your expression for f''(x) with x=2 into the second goal and simplify to show it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 - 4319 * x ^ 2 + 38868 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 - 8638 * x + 38868 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 - 8638 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 5 - 4319 * x ^ 2 + 38868 * x, we want to prove that it has a local minimum at x = 6. \nFor this, we must show that f'(6) = 0 (the first derivative at x = 6 is zero) and f''(6) > 0 (the second derivative at x = 6 is positive).\n\n1) Introduce the hypothesis, specifying the definition of the function f(x).\n2) Show that f'(x) = 10 * x ^ 4 - 8638 * x + 38868.\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the definition of f into the derivative.\n  2.3) Apply the linearity of derivatives, as well as derivative rules for addition, subtraction, and products.\n  2.4) Simplify the resulting algebraic expressions.\n  2.5) Confirm differentiability for each term to justify the above steps.\n3) Show that f''(x) = 40 * x ^ 3 - 8638.\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the formula from your expression for f'(x) just proved.\n  3.3) Apply the linearity of the derivative and power/product rules where needed.\n  3.4) Simplify the resulting algebraic expressions.\n  3.5) Confirm differentiability for each term to justify the above steps.\n4) Use the tactic to split the goal into two: proving both f'(6) = 0 and f''(6) > 0.\n5) For f'(6) = 0, substitute x = 6 in the explicit formula you derived for f'(x) and show the computation.\n6) For f''(6) > 0, substitute x = 6 in your formula for f''(x), show the computation, and verify the inequality is satisfied."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 24 * x, we want to prove that it has a minima at the point x=6. For that, we need to show that the first derivative of f(x) at x=6 is 0 and the second derivative of f(x) at x=6 is greater than 0.\n1) Introduce the hypothesis, that is, the definition of the function.\n2) Show that f'(x) = 4 * x - 24\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition for f(x).\n  2.3) Apply the rules for derivatives to each term in the function (such as the product rule, power rule, and constant multiple rule).\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Verify the differentiability of each part of the function.\n3) Show that f''(x) = 4\n  3.1) Extend with respect to variable x.\n  3.2) Use the definition of f'(x) found previously.\n  3.3) Apply the rules for derivatives to the expression for f'(x).\n  3.4) Simplify the resulting algebraic expression.\n  3.5) Verify the differentiability of f'(x).\n4) Split the overall goal into the two parts: f'(6) = 0 and f''(6) > 0.\n5) For the first part, expand and evaluate f'(6) using the expression for f'(x), and show that it equals 0.\n6) For the second part, expand and evaluate f''(6) using the expression for f''(x), and show that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 24 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 + 24 * x, we want to prove that it has a minima at the point x = -6.\nFor that, we must show f'(-6) = 0 (i.e., the first derivative of f(x) at x = -6 is 0) and f''(-6) > 0 (i.e., the second derivative of f(x) at x = -6 is greater than 0).\n\n1) Introduce the hypothesis, namely the definition of the function.\n2) Show that f'(x) = 4 * x + 24.\n  2.1) Extend by reasoning about an arbitrary x.\n  2.2) Substitute the definition of f in terms of x.\n  2.3) Apply the appropriate differentiation rules to compute the derivative of f.\n  2.4) Simplify the result algebraically to obtain the simplified form for the first derivative.\n  2.5) Justify that the function is differentiable at the required places.\n3) Show that f''(x) = 4.\n  3.1) Extend by reasoning about an arbitrary x.\n  3.2) Substitute the formula for f'(x) from the previous step.\n  3.3) Apply differentiation rules as needed to obtain the second derivative.\n  3.4) Simplify the result algebraically.\n  3.5) Justify that the first derivative is differentiable at the required places.\n4) Split the main goal into its two required parts: proving f'(-6) = 0 and f''(-6) > 0.\n5) Use the established formula for f'(x) to show f'(-6) = 0.\n6) Use the established formula for f''(x) to show f''(-6) > 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 24 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 + 24 * x, we want to prove that it has a minimum at the point x = -6. For that, we need to show that f'(-6) = 0 (the first derivative at x = -6 is zero), and f''(-6) > 0 (the second derivative at x = -6 is positive).\n\n1) Introduce the hypothesis, in this case, the function definition.\n2) Show that f'(x) = 4 * x + 24\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the function definition for f.\n  2.3) Use derivative rules to compute the derivative.\n  2.4) Simplify the algebraic expression to obtain the stated result.\n  2.5) Prove differentiability of each relevant piece.\n3) Show that f''(x) = 4\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the definition of f'(x) as found above.\n  3.3) Use derivative rules to compute the second derivative.\n  3.4) Simplify the resulting expression.\n  3.5) Prove the differentiability of the first derivative.\n4) Split the overall goal into two parts: f'(-6) = 0 and f''(-6) > 0.\n5) Substitute the formula for f'(x) at x = -6, and verify that it equals zero.\n6) Substitute the formula for f''(x) at x = -6, and show it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 75 * x ^ 2 + 375 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 150 * x + 375 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 150 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 3 - 75 * x ^ 2 + 375 * x, we want to prove that it has a higher order stationary point at x = 5. Specifically, we are to show f'(5) = 0 and f''(5) = 0.\n1) Introduce the hypothesis, which is the function definition.\n2) Show that f'(x) = 15 * x ^ 2 - 150 * x + 375\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition using the hypothesis.\n  2.3) Use standard differentiation rules to compute the derivative of each term.\n  2.4) Simplify the resulting expression to the required polynomial.\n  2.5) Establish the differentiability of f(x) at each step.\n3) Show that f''(x) = 30 * x - 150\n  3.1) Extend with respect to variable x.\n  3.2) Use the previously computed expression for f'(x).\n  3.3) Apply rules of differentiation to compute the derivative of f'(x).\n  3.4) Simplify the result.\n  3.5) Confirm differentiability as needed.\n4) Split the final goal into its two parts: proving f'(5) = 0 and f''(5) = 0.\n5) Substitute the specific values for x into the respective expressions for f'(x) and f''(x).\n6) Simplify both results to show that they are equal to 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 4 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 + 4 * x, we want to prove that it has a minimum at the point x = -2. That is, f'(-2) = 0 and f''(-2) > 0.\n1) Introduce the hypothesis, specifically the function definition for f.\n2) Show that the first derivative f\u2032(x) = 2 * x + 4.\n  2.1) Extend with respect to a general variable x.\n  2.2) Substitute the explicit function definition for f.\n  2.3) Use derivative rules to compute the derivative term-by-term.\n  2.4) Simplify the resulting expression using algebra.\n  2.5) Justify differentiability where needed.\n3) Show that the second derivative f''(x) = 2.\n  3.1) Extend with respect to x again.\n  3.2) Substitute the previously proven formula for f\u2032(x).\n  3.3) Use derivative rules to compute the new derivative.\n  3.4) Simplify to the constant result.\n  3.5) Justify differentiability again as needed.\n4) Split the current goal into its two parts: f'(-2) = 0 and f''(-2) > 0.\n5) For the first part, substitute the result for f\u2032(x) and check at x = -2.\n6) For the second part, substitute the result for f\u2032\u2032(x) and check at x = -2."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 2 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 2 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 + 2 * x, we want to prove that it has a minimum at the point x = -1.\nFor that, we need to verify that f'(-1) = 0 (i.e., the first derivative vanishes at x = -1) and f''(-1) > 0 (i.e., the second derivative is positive at x = -1, so the point is a minimum).\n1) Introduce the hypothesis, specifically the definition of the function.\n2) Show that f'(x) = 2 * x + 2.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the definition of the function.\n  2.3) Use the rules of differentiation to compute the derivative.\n  2.4) Simplify the resulting expression to get the desired form.\n  2.5) Verify that the function is differentiable everywhere on \u211d.\n3) Show that f''(x) = 2.\n  3.1) Extend with respect to the variable x.\n  3.2) Expand the previous result for f'(x).\n  3.3) Apply the rules of differentiation to compute the second derivative.\n  3.4) Simplify the expression.\n  3.5) Verify differentiability of f'(x).\n4) Split the goal into the two requirements: f'(-1) = 0 and f''(-1) > 0.\n5) Substitute the definition of f'(x) at x = -1 and check that it is zero.\n6) Substitute the definition of f''(x) at x = -1 and check that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 18 * x ^ 2 + 108 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 36 * x + 108 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 36 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x ^ 3 + 18 * x ^ 2 + 108 * x, we want to prove that it has a stationary point at x = -6 by showing both the first and second derivatives vanish at this point (i.e., f'(-6) = 0 and f''(-6) = 0).\n\n1) Introduce the hypothesis: namely, the definition of the function f.\n2) Show that f'(x) = 3 * x ^ 2 + 36 * x + 108.\n  2.1) State the goal of finding the derivative and use an identity to extend with respect to x.\n  2.2) Substitute the definition of f(x) as given by your hypothesis.\n  2.3) Use properties of derivatives (linearity, product rule, etc.) to compute the derivatives of each term in f(x).\n  2.4) Carefully simplify the resulting polynomial expression for the derivative using algebraic manipulation.\n  2.5) Make sure to assert and justify the differentiability of each term in f(x).\n3) Show that f''(x) = 6 * x + 36.\n  3.1) Again, extend with respect to the variable x.\n  3.2) Substitute f'(x) using your result from step 2.\n  3.3) Apply the relevant differentiation rules to each term in f'(x).\n  3.4) Collect and simplify terms in the resulting expression to get the second derivative.\n  3.5) Confirm differentiability of each term in f'(x) as needed.\n4) Split the goal into two parts: proving that f'(-6) = 0 and f''(-6) = 0.\n5) For the first part, substitute x = -6 into your expression for f'(x), and verify that it simplifies to zero.\n6) For the second part, substitute x = -6 into your expression for f''(x), and verify that it also simplifies to zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 + 5 * x ^ 3 - 2635 * x - 376 * x ^ 2) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 + 15 * x ^ 2 - 2635 - 752 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 + 30 * x - 752 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 4 + 5 * x ^ 3 - 2635 * x - 376 * x ^ 2, we want to prove that it has a local maximum at the point x = -5.  \nFor this, we need to show f'(-5) = 0 (that is, the first derivative at x = -5 is zero) and f''(-5) < 0 (that is, the second derivative at x = -5 is negative).\n\n1) Introduce the hypothesis, in this case the definition of the function f(x).\n2) Compute f'(x) = 12 * x ^ 3 + 15 * x ^ 2 - 2635 - 752 * x.\n   2.1) State equality of deriv f and the expression, and extend for an arbitrary x.\n   2.2) Substitute the definition of f(x).\n   2.3) Use basic derivative rules (sum, difference, constant multiples, powers, etc.) step by step for each term.\n   2.4) Collect like terms and simplify the resulting polynomial expression.\n   2.5) Assert and verify differentiability for each required sub-term.\n3) Compute f''(x) = 36 * x ^ 2 + 30 * x - 752.\n   3.1) State equality of deriv (deriv f) and the expression, and extend for an arbitrary x.\n   3.2) Substitute the result from the previous step for f'(x).\n   3.3) Use derivative rules (sum, difference, constant multiples, powers) to find the second derivative step by step.\n   3.4) Combine and simplify all terms to reach the required quadratic expression.\n   3.5) Claim and check differentiability for sub-expressions if needed.\n4) Split the goal into its parts: f'(-5) = 0 and f''(-5) < 0.\n5) Substitute the definition of f'(-5) from step 2, and simplify to check that it equals zero.\n6) Substitute the definition of f''(-5) from step 3, and check (via calculation) that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 24 * x, we want to show that it has a minimum at x = 6. For this, we need to show that the first derivative at x = 6 is zero, and the second derivative at x = 6 is positive.\n1) Introduce the hypothesis, which is the explicit definition of the function f.\n2) Show that f'(x) = 4 * x - 24.\n  2.1) Extend by x (make the statement about the value of the derivative at all x).\n  2.2) Substitute in the explicit definition of f.\n  2.3) Use the differentiation algebra for sums, scalar multiples, and powers.\n  2.4) Simplify the resulting expression.\n  2.5) Show that each term in f is differentiable.\n3) Show that f''(x) = 4.\n  3.1) Extend by x and write the goal for arbitrary x.\n  3.2) Substitute in the formula for f'(x) from above.\n  3.3) Use the differentiation algebra for sums and scalar multiples.\n  3.4) Simplify the result.\n  3.5) Argue the differentiability of f'.\n4) Split the goal into showing f'(6) = 0 and f''(6) > 0.\n5) For f'(6) = 0: Substitute the explicit form of f' and evaluate at x = 6, then verify the computation.\n6) For f''(6) > 0: Substitute the constant value of f'' and observe the positivity."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 6 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 2 + 6 * x, we want to prove that it has a minima at the point x = -1.  \nThis is done by showing that f'(-1) = 0 (the first derivative at x = -1 is zero, indicating a critical point) and f''(-1) > 0 (the second derivative at x = -1 is positive, confirming a local minimum).\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 6 * x + 6.\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition using the hypothesis.\n  2.3) Apply derivative rules to each part of the sum and product.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Prove differentiability for the terms involved.\n3) Show that f''(x) = 6.\n  3.1) Extend with respect to variable x.\n  3.2) Expand the definition of f'(x) from the previous step.\n  3.3) Apply derivative rules to each term.\n  3.4) Simplify the resulting constant expression.\n  3.5) Prove differentiability for the terms involved.\n4) Split the conclusion into two goals: f'(-1) = 0 and f''(-1) > 0.\n5) Substitute the definition of f'(x) for x = -1, and simplify to prove the first statement.\n6) Substitute the definition of f''(x) for x = -1, and show the result is positive to prove the second statement."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 4 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^2 - 4 * x, we want to prove that it has a minimum at the point x=1. For that we have to show f'(1) = 0, i.e., the first derivative of f(x) at x=1 is 0, and f''(1) > 0, i.e., the second derivative of f(x) at x=1 is greater than 0.\n1) Introduce the hypothesis, i.e., give the function definition.\n2) Show that f'(x) = 4 * x - 4\n  2.1) Extend for an arbitrary x.\n  2.2) Substitute in the function's definition.\n  2.3) Apply the relevant differentiation rules for sum, multiplication, and powers.\n  2.4) Simplify the resulting algebraic expressions to reach the desired derivative formula.\n  2.5) Prove that the function is differentiable where needed.\n3) Show that f''(x) = 4\n  3.1) Extend for an arbitrary x.\n  3.2) Substitute in the formula you just proved for f'(x).\n  3.3) Apply differentiation rules to this new expression.\n  3.4) Simplify the expression.\n  3.5) Prove that the resulting function is differentiable where needed.\n4) Split the main goal into its two constituent claims: f'(1) = 0 and f''(1) > 0.\n5) Substituting x = 1 into the formula for f'(x), show that it is equal to 0.\n6) Substituting x = 1 into the formula for f''(x), show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 2 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 4 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 4 - 2 * x ^ 2, we want to prove that the function has a local maximum at the point x=0. Specifically, we need to show that f'(0) = 0 (i.e., the derivative at x=0 vanishes) and f''(0) < 0 (i.e., the second derivative at x=0 is negative).\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 12 * x^3 - 4 * x\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the definition of f(x) using the hypothesis.\n  2.3) Apply the standard rules of differentiation to both terms.\n  2.4) Collect like terms using algebraic manipulation and finish the proof for this part.\n  2.5) Check that the relevant parts are differentiable at each step.\n3) Show that f''(x) = 36 * x^2 - 4\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the explicit formula you just proved for f'(x).\n  3.3) Apply the rules for differentiation term-by-term.\n  3.4) Collect terms and finish the proof for this part using algebraic simplifications.\n  3.5) Check differentiability at each step.\n4) Split the goal into two parts: showing f'(0) = 0 and f''(0) < 0.\n5) Substitute the formula for f'(x) at x=0 and verify that it equals 0.\n6) Substitute the formula for f''(x) at x=0 and verify that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 12 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 + 12 * x, we want to prove that it has a local minima at the point x = -3. For that, we have to show f'(-3) = 0 (i.e., the first derivative of f(x) at x = -3 is 0) and f''(-3) > 0 (i.e., the second derivative of f(x) at x = -3 is strictly greater than 0).\n\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 4 * x + 12.\n  2.1) Extend the proof with respect to variable x.\n  2.2) Expand the function definition for f.\n  2.3) Apply the rules for differentiating sums and products to calculate the derivative.\n  2.4) Combine like terms and simplify the algebraic expression to obtain the result.\n  2.5) Prove differentiability of the original function at all relevant points.\n3) Show that f''(x) = 4.\n  3.1) Extend the proof with respect to variable x.\n  3.2) Expand the definition of f'(x) you just proved.\n  3.3) Use the rules for differentiating sums and scalar multiples.\n  3.4) Simplify the algebra to obtain the constant result.\n  3.5) Prove differentiability of f'(x).\n4) Split the goal into two subgoals: proving f'(-3) = 0 and proving f''(-3) > 0.\n5) For the first subgoal, expand f'(-3) using your calculated expression and show it equals zero.\n6) For the second subgoal, expand f''(-3) (which is a constant) and show it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 - x ^ 5 + 3 * x ^ 3 - 60426 * x ^ 2 - 578988 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 - 5 * x ^ 4 + 9 * x ^ 2 - 120852 * x - 578988 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 - 20 * x ^ 3 + 18 * x - 120852 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 3x^6 - x^5 + 3x^3 - 60426x^2 - 578988x \\), you are asked to show that both its first and second derivatives vanish at \\( x = -6 \\). That is, prove \\( f'(-6) = 0 \\) and \\( f''(-6) = 0 \\).\n\n1) Introduce the hypothesis, specifying the given function \\( f \\).\n2) Prove the formula for the first derivative \\( f'(x) = 18x^5 - 5x^4 + 9x^2 - 120852x - 578988 \\).\n  2.1) State equality of \\( f' \\) with the candidate expression, extending with respect to variable \\( x \\).\n  2.2) Substitute the definition of \\( f \\).\n  2.3) Apply the rules of differentiation sequentially for each term in the sum.\n  2.4) Use algebraic manipulations to simplify the derivative expression.\n  2.5) Establish differentiability of all terms as required.\n3) Prove the formula for the second derivative \\( f''(x) = 90x^4 - 20x^3 + 18x - 120852 \\).\n  3.1) State equality of \\( f'' \\) with the candidate expression, extending with respect to variable \\( x \\).\n  3.2) Substitute the definition of \\( f' \\) just proved.\n  3.3) Apply the rules of differentiation sequentially for each term in the sum.\n  3.4) Use algebraic manipulations to simplify the derivative expression.\n  3.5) Establish differentiability of all terms as required.\n4) Split the goal into two parts: show \\( f'(-6) = 0 \\), and \\( f''(-6) = 0 \\).\n5) For the first goal, substitute the explicit form of \\( f' \\) and evaluate at \\( x = -6 \\), verifying the result is zero.\n6) For the second goal, substitute the explicit form of \\( f'' \\) and evaluate at \\( x = -6 \\), verifying the result is zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 8 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 8 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 + 8 * x, we want to prove that it has a minima at the point x = -2.\nFor that, we have to show f'(-2) = 0, i.e., the first derivative of f(x) at x = -2 is 0, and f''(-2) > 0, i.e., the second derivative of f(x) at x = -2 is greater than 0.\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 4 * x + 8.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition using the given hypothesis.\n  2.3) Apply derivative theorems and properties to compute the derivative.\n  2.4) Simplify the algebraic expression and prove your goal.\n  2.5) Establish the differentiability of f(x) for all required steps.\n3) Show that f''(x) = 4.\n  3.1) Extend with respect to the variable x.\n  3.2) Expand the definition of f'(x) that was previously shown.\n  3.3) Apply appropriate derivative theorems to calculate the second derivative.\n  3.4) Simplify the algebra and prove your goal.\n  3.5) Prove the differentiability of f'(x).\n4) Split the current goal into its parts: show f'(-2) = 0 and f''(-2) > 0.\n5) Expand the definition of f'(-2) in the first goal, and prove it is 0.\n6) Expand the definition of f''(-2) in the second goal, and prove it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 4 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^2 + 4 * x, we want to prove that it has a minimum at the point x = -1.  \nFor that, we have to show that f'(-1) = 0 (the first derivative at x = -1 is 0) and f''(-1) > 0 (the second derivative at x = -1 is positive).\n\n1) Introduce the hypothesis, that is, the definition of the function f.\n2) Show that f'(x) = 4 * x + 4.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the definition of the function f inside the derivative.\n  2.3) Apply differentiation rules for addition and for terms like c*x^n and c*x.\n  2.4) Simplify the algebraic expression to get the result.\n  2.5) Prove that the original function f(x) is differentiable everywhere.\n3) Show that f''(x) = 4.\n  3.1) Extend with respect to the variable x.\n  3.2) Use the previous result for f'(x).\n  3.3) Apply the rules for differentiating an expression of the form a*x + b.\n  3.4) Simplify the result to get a constant.\n  3.5) Prove differentiability of f'(x).\n4) Split the goal into two parts: f'(-1) = 0 and f''(-1) > 0.\n5) Substitute and simplify the expression for f'(-1); show that it equals zero.\n6) Substitute and simplify the expression for f''(-1); show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 3 + 80 * x + 22 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 2 + 80 + 44 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x + 44 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 3 + 80 * x + 22 * x ^ 2, we want to show that x = -4 is a critical point and that f has a local maximum there. Specifically, we must show f'(-4) = 0 and f''(-4) < 0.\n1) Introduce the hypothesis, i.e., the definition of f(x).\n2) Show that f'(x) = 6 * x ^ 2 + 80 + 44 * x\n  2.1) State that it is sufficient to prove the equality by extending with respect to x.\n  2.2) Substitute the definition of f(x).\n  2.3) Use the rules for the derivative of sums and products to compute the derivative.\n  2.4) Collect like terms and simplify the expression.\n  2.5) Justify differentiability of each term.\n3) Show that f''(x) = 12 * x + 44\n  3.1) State, by extension, that proving the equality for all x suffices.\n  3.2) Substitute the formula for f'(x) previously established.\n  3.3) Use the rules for the derivative of sums and products again to compute this second derivative.\n  3.4) Simplify the expression.\n  3.5) Justify differentiability for each component.\n4) Split the goal into two: proving both f'(-4) = 0 and f''(-4) < 0.\n5) Expand f'(-4) using your formula for the first derivative and show the equation holds.\n6) Expand f''(-4) using your formula for the second derivative, simplify, and conclude that it is less than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 + 5 * x ^ 3 - 39 * x ^ 2 + 47 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 + 15 * x ^ 2 - 78 * x + 47 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 + 30 * x - 78 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 4x^4 + 5x^3 - 39x^2 + 47x \\), we want to prove that both the first and second derivatives vanish at \\( x = 1 \\), i.e., \\( f'(1) = 0 \\) and \\( f''(1) = 0 \\).\n1) Introduce the hypothesis, specifically the function definition for \\( f \\).\n2) Show that \\( f'(x) = 16x^3 + 15x^2 - 78x + 47 \\).\n  2.1) Work with an arbitrary variable \\( x \\).\n  2.2) Substitute the given definition of \\( f \\).\n  2.3) Use the differentiation rules for sum, constant multiple, and power functions to differentiate each term.\n  2.4) Combine like terms and simplify the result.\n  2.5) Show that the function is differentiable everywhere (polynomials are always differentiable).\n3) Show that \\( f''(x) = 48x^2 + 30x - 78 \\).\n  3.1) Work with an arbitrary variable \\( x \\).\n  3.2) Substitute the result for \\( f'(x) \\) obtained previously.\n  3.3) Apply the differentiation rules again on each term.\n  3.4) Combine like terms and simplify the result.\n  3.5) Argue that this second derivative exists everywhere (again, as a polynomial).\n4) Split the goal into the two statements \\( f'(1) = 0 \\) and \\( f''(1) = 0 \\).\n5) Substitute the explicit formula for \\( f'(x) \\) and simplify at \\( x = 1 \\).\n6) Substitute the explicit formula for \\( f''(x) \\) and simplify at \\( x = 1 \\)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 - x ^ 4 - 2347 * x ^ 2 + 17720 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 - 4 * x ^ 3 - 4694 * x + 17720 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 - 12 * x ^ 2 - 4694 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^5 - x^4 - 2347 * x^2 + 17720 * x, we want to prove that it has a minimum at the point x=5. For that, we have to show f'(5) = 0 (the first derivative at x = 5 is zero) and f''(5) > 0 (the second derivative at x = 5 is positive).\n\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 10 * x^4 - 4 * x^3 - 4694 * x + 17720.\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the explicit definition of f(x).\n  2.3) Apply derivative rules to each term individually.\n  2.4) Combine and simplify all terms to obtain the explicit formula for f'(x).\n  2.5) Verify the differentiability as needed for each term and the full function.\n3) Show that f''(x) = 40 * x^3 - 12 * x^2 - 4694.\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the explicit definition of f'(x) from the previous step.\n  3.3) Apply derivative rules to each term.\n  3.4) Combine and simplify the expression to get the explicit formula for f''(x).\n  3.5) Verify the differentiability for each term and the full function.\n4) Split the goal into its components: f'(5) = 0 and f''(5) > 0.\n5) Substitute x = 5 into the expression for f'(x) and simplify to show that it equals zero.\n6) Substitute x = 5 into the formula for f''(x) and simplify to show that it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 9 * x ^ 2 + 27 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 18 * x + 27 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 18 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x ^ 3 - 9 * x ^ 2 + 27 * x, we want to show that both f'(3) = 0 and f''(3) = 0.\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 3 * x ^ 2 - 18 * x + 27.\n  2.1) Extend with respect to variable x.\n  2.2) Replace with the function definition.\n  2.3) Apply differentiation rules for sums, differences, products, powers, and constants to find the derivative.\n  2.4) Simplify the resulting algebraic expression to get the final form.\n  2.5) Establish that each term is differentiable at x.\n3) Show that f''(x) = 6 * x - 18.\n  3.1) Extend with respect to variable x.\n  3.2) Replace using the result for f'(x) just established.\n  3.3) Use basic differentiation rules on each term.\n  3.4) Simplify the resulting algebraic expression.\n  3.5) Establish differentiability.\n4) Split the goal into f'(3) = 0 and f''(3) = 0.\n5) Substitute the formula for f'(x) at x = 3, and show the calculation.\n6) Substitute the formula for f''(x) at x = 3, and show the calculation."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^2, we want to prove that it has a stationary point at x = 0 and the second derivative at x = 0 is positive (i.e., x = 0 is a local minimum).\n1) Introduce the hypothesis, which is the explicit definition of the function f(x).\n2) Prove that f'(x) = 6 * x.\n  2.1) Establish this by extending with respect to a variable x.\n  2.2) Substitute the definition of f(x) into the derivative computation.\n  2.3) Apply standard differentiation rules to find the derivative, using basic properties of powers and constants.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Argue that f is differentiable in the required sense.\n3) Prove that f''(x) = 6.\n  3.1) Similarly, extend with respect to x.\n  3.2) Substitute the form of f'(x) derived in the previous step.\n  3.3) Use differentiation rules to compute the second derivative.\n  3.4) Simplify the algebra.\n  3.5) Show that f' is differentiable.\n4) Split the overall goal into its parts: showing f'(0) = 0 and f''(0) > 0.\n5) Show f'(0) = 0 by plugging x = 0 into your first derivative formula and simplifying.\n6) Show f''(0) > 0 using your second derivative formula and evaluating at x = 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 3 + 9 * x ^ 2 + 12 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 2 + 18 * x + 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x + 18 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 3 + 9 * x ^ 2 + 12 * x, we want to prove that there is a maximum at the point x = -2. This amounts to proving that f'(-2) = 0 and f''(-2) < 0.\n1) Introduce the hypothesis, i.e., introduce the definition of the function f.\n2) Show that f'(x) = 6 * x ^ 2 + 18 * x + 12\n  2.1) Extend pointwise in x.\n  2.2) Substitute the provided definition for f(x).\n  2.3) Use linearity and product/chain rules of differentiation, and calculate each term's derivative.\n  2.4) Simplify the resulting expression algebraically.\n  2.5) Justify differentiability of each term in f.\n3) Show that f''(x) = 12 * x + 18\n  3.1) Extend pointwise in x.\n  3.2) Substitute the formula for f'(x) you just derived.\n  3.3) Use linearity and product differentiation rules.\n  3.4) Simplify the resulting expression algebraically.\n  3.5) Justify differentiability of each term in f'.\n4) Split the goal into two: proving f'(-2) = 0 and f''(-2) < 0.\n5) In the first goal, expand the definition of f'(-2) and show it is 0.\n6) In the second goal, expand the definition of f''(-2), simplify, and show it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 20 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 20 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 20 * x, we want to show that it has a minimum at x = 5.\nFor that, we need to prove f'(5) = 0 (the first derivative at x = 5 is 0) and f''(5) > 0 (the second derivative at x = 5 is positive).\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 4 * x - 20\n  2.1) Extend the proof with respect to the variable x.\n  2.2) Expand the function using the hypothesis.\n  2.3) Use standard differentiation rules to take the derivative of each term.\n  2.4) Collect like terms and simplify the algebraic expression to obtain the result.\n  2.5) Show that the function is differentiable at the required points.\n3) Show that f''(x) = 4\n  3.1) Extend the proof with respect to the variable x.\n  3.2) Expand the derivative of f(x) using the previous result.\n  3.3) Differentiate using standard rules and simplify the expression.\n  3.4) Show differentiability at the relevant points.\n4) Split the goal into f'(5) = 0 and f''(5) > 0.\n5) Substitute the definition for f'(5) and verify it is 0.\n6) Substitute the definition for f''(5) and verify it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - 4 * x ^ 4 + 5 * x ^ 3 - 13 * x ^ 2 + 40 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 16 * x ^ 3 + 15 * x ^ 2 - 26 * x + 40 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 48 * x ^ 2 + 30 * x - 26 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^5 - 4x^4 + 5x^3 - 13x^2 + 40x, we want to show that it has a critical point at x = 2, and that the second derivative is positive at x = 2 (i.e., a minimum).\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 5x^4 - 16x^3 + 15x^2 - 26x + 40.\n  2.1) Extend with respect to variable x.\n  2.2) Substitute in the definition of f(x).\n  2.3) Repeatedly apply the appropriate rules for differentiation to each term (sum, difference, constant multiple, power rule).\n  2.4) Collect like terms and simplify the expression to obtain the stated formula.\n  2.5) Verify differentiability at the required steps.\n3) Show that f''(x) = 20x^3 - 48x^2 + 30x - 26.\n  3.1) Extend with respect to variable x.\n  3.2) Substitute in the formula for f'(x) you just derived.\n  3.3) Use differentiation rules term-by-term for f'(x), and simplify to obtain the new formula.\n  3.4) Verify differentiability of f'(x).\n4) Split the final goal into two statements: f'(2) = 0 and f''(2) > 0.\n5) Substitute the formula for f'(x) at x=2 to evaluate and show it equals 0.\n6) Substitute the formula for f''(x) at x=2 and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3 - 121 * x ^ 2 - 616 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2 - 242 * x - 616 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x - 242 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^4 - 2 * x^3 - 121 * x^2 - 616 * x, we want to prove that it has a maxima at the point x = -4.\nFor this, we need to show two things: f'(-4) = 0, i.e., the first derivative vanishes at x = -4, and f''(-4) < 0, i.e., the second derivative is negative at x = -4.\n1) Introduce the hypothesis, that is, the explicit definition of the function f(x).\n2) Prove that f'(x) = 4 * x^3 - 6 * x^2 - 242 * x - 616\n  2.1) Extend universally with respect to the variable x.\n  2.2) Substitute the explicit definition of f(x).\n  2.3) Use rules for differentiation (sum, constant, power, and product rules) to compute the derivative term-by-term.\n  2.4) Combine like terms and simplify the resulting polynomial.\n  2.5) Show differentiability term-by-term for each component of f(x).\n3) Prove that f''(x) = 12 * x^2 - 12 * x - 242\n  3.1) Extend universally with respect to x.\n  3.2) Substitute the explicit expression you just found for f'(x).\n  3.3) Again use differentiation rules to compute the second derivative.\n  3.4) Simplify the resulting quadratic polynomial.\n  3.5) Show differentiability for each term of f'(x).\n4) Split the goal into its conjuncts: proving f'(-4) = 0 and f''(-4) < 0.\n5) Substitute the expression for f'(x) at x = -4 and show it simplifies to 0.\n6) Substitute the expression for f''(x) at x = -4 and show the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 + x ^ 4 + x ^ 3 + 8445 * x ^ 2 + 76176 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 + 4 * x ^ 3 + 3 * x ^ 2 + 16890 * x + 76176 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 + 12 * x ^ 2 + 6 * x + 16890 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 4x^5 + x^4 + x^3 + 8445x^2 + 76176x \\), we want to prove that it has a minima at the point \\( x = -6 \\).\nFor that, we need to show \\( f'(-6) = 0 \\) (i.e., the first derivative at \\( x = -6 \\) is 0) and \\( f''(-6) > 0 \\) (i.e., the second derivative at \\( x = -6 \\) is positive).\n\n1) Introduce the hypothesis, which is the definition of the function.\n2) Show that \\( f'(x) = 20x^4 + 4x^3 + 3x^2 + 16890x + 76176 \\)\n  2.1) Extend/equate both sides for arbitrary \\( x \\).\n  2.2) Expand the given function into its terms.\n  2.3) Apply the properties of differentiation (linearity, product rule, chain rule where necessary) to each term.\n  2.4) Combine and simplify all terms to arrive at the explicit formula for \\( f'(x) \\).\n  2.5) Show differentiability for each term and thus the entire function.\n3) Show that \\( f''(x) = 80x^3 + 12x^2 + 6x + 16890 \\)\n  3.1) Extend/equate both sides for arbitrary \\( x \\).\n  3.2) Use the previously established formula for \\( f'(x) \\).\n  3.3) Apply the same rules for differentiation, this time to \\( f'(x) \\), term by term.\n  3.4) Simplify the resulting terms to get the explicit formula for \\( f''(x) \\).\n  3.5) Again, demonstrate differentiability for each component of \\( f'(x) \\).\n4) Split the final goal into proving \\( f'(-6) = 0 \\) and \\( f''(-6) > 0 \\).\n5) Substitute \\( x = -6 \\) into the formula for \\( f'(x) \\) and calculate to show that it equals 0.\n6) Substitute \\( x = -6 \\) into the formula for \\( f''(x) \\) and calculate to show that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 + x ^ 3 + 279 * x ^ 2 + 1242 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 + 3 * x ^ 2 + 558 * x + 1242 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 + 6 * x + 558 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = x^5 + x^3 + 279x^2 + 1242x \\), we want to prove that both its first and second derivatives vanish at \\( x = -3 \\), i.e., \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\).\n\n1) Introduce the hypothesis, specifically the explicit definition of the function \\( f \\).\n2) Show that \\( f'(x) = 5x^4 + 3x^2 + 558x + 1242 \\).\n  2.1) Consider an arbitrary \\( x \\) (typically by extending with respect to \\( x \\)).\n  2.2) Substitute in the definition of \\( f \\).\n  2.3) Individually apply the linearity and power rules for derivatives, taking into account all four terms (monomial and linear terms).\n  2.4) Combine all computed derivatives using the sum rule and simplify the resulting expression algebraically.\n  2.5) Confirm differentiability of each component, and hence of the whole expression.\n3) Show that \\( f''(x) = 20x^3 + 6x + 558 \\).\n  3.1) Consider an arbitrary \\( x \\) (extend with respect to \\( x \\)).\n  3.2) Substitute in the first derivative expression proven previously.\n  3.3) Apply the sum, power, and constant multiple rules for the derivative term by term.\n  3.4) Collect terms and simplify the resulting polynomial.\n  3.5) Argue differentiability of each part as needed.\n4) Break the proof goal into the required conjunction: \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\).\n5) For \\( f'(-3) = 0 \\):\n  5.1) Substitute \\( x = -3 \\) into your result for \\( f'(x) \\) and simplify to verify it holds.\n6) For \\( f''(-3) = 0 \\):\n  6.1) Substitute \\( x = -3 \\) into your result for \\( f''(x) \\) and simplify likewise."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 4 * x ^ 5 + 3 * x ^ 4 + 4 * x ^ 3 - 42387 * x ^ 2 + 340820 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 20 * x ^ 4 + 12 * x ^ 3 + 12 * x ^ 2 - 84774 * x + 340820 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 80 * x ^ 3 + 36 * x ^ 2 + 24 * x - 84774 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 5x^6 - 4x^5 + 3x^4 + 4x^3 - 42387x^2 + 340820x \\), we want to show that it has a local maximum at \\( x = 5 \\). For this, you need to prove that \\( f'(5) = 0 \\) (the derivative vanishes at \\( x=5 \\)), and \\( f''(5) < 0 \\) (the second derivative at \\( x=5 \\) is negative).\n1) Introduce the hypothesis, i.e. introduce the function definition for \\( f \\).\n2) Compute and prove the explicit formula for \\( f'(x) \\), namely \\( f'(x) = 30x^5 - 20x^4 + 12x^3 + 12x^2 - 84774x + 340820 \\).\n   2.1) Extend with respect to the variable \\( x \\).\n   2.2) Substitute the given function definition for \\( f \\) into the expression.\n   2.3) Use appropriate theorems for the derivative of a sum, subtraction, multiplication, constants, and powers.\n   2.4) Combine and simplify the results to get the explicit formula.\n   2.5) For each step, justify the differentiability.\n3) Compute and prove the explicit formula for \\( f''(x) \\), namely \\( f''(x) = 150x^4 - 80x^3 + 36x^2 + 24x - 84774 \\).\n   3.1) Extend with respect to the variable \\( x \\).\n   3.2) Substitute the previously found formula for \\( f'(x) \\).\n   3.3) Use properties of derivatives for sums, differences, and multiplying by constants and powers for each term.\n   3.4) Simplify the result and confirm the formula for the second derivative.\n   3.5) Justify differentiability at each step.\n4) Split the final goal into two subgoals: \\( f'(5) = 0 \\) and \\( f''(5) < 0 \\).\n5) For the first subgoal, substitute the value \\( x=5 \\) into the formula for \\( f'(x) \\), simplify, and show that it equals zero.\n6) For the second subgoal, substitute the value \\( x=5 \\) into the formula for \\( f''(x) \\), simplify, and show that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 + x ^ 4 + 2 * x ^ 3  ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 + 4 * x ^ 3 + 6 * x ^ 2   := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 + 12 * x ^ 2 + 12 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 5 + x ^ 4 + 2 * x ^ 3, we want to prove that at x = 0, both the first and second derivatives vanish: f'(0) = 0 and f''(0) = 0.\n1) Introduce the hypothesis, i.e., the function definition.\n2) Prove that f'(x) = 25 * x ^ 4 + 4 * x ^ 3 + 6 * x ^ 2\n  2.1) State that the goal is to rewrite the derivative as a new function.\n  2.2) Substitute the definition of f(x) in place.\n  2.3) Apply known rules for the derivative of sums and products.\n  2.4) Simplify the resulting algebraic expressions to obtain the desired polynomial.\n  2.5) Ensure that all terms involved are differentiable.\n3) Prove that f''(x) = 100 * x ^ 3 + 12 * x ^ 2 + 12 * x\n  3.1) State that the goal is to rewrite the derivative of the previous result as a new function.\n  3.2) Substitute the formula for f'(x) just obtained.\n  3.3) Apply rules for differentiating sums and products again.\n  3.4) Simplify to reach the explicit quadratic form.\n  3.5) Again, check differentiability for all terms.\n4) Split the goal into both parts: f'(0) = 0 and f''(0) = 0.\n5) Substitute the expressions for f'(0) and f''(0), and show both equations hold."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 - 2 * x ^ 3 - 170 * x ^ 2 + 944 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 - 6 * x ^ 2 - 340 * x + 944 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 - 12 * x - 340 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 2x^4 - 2x^3 - 170x^2 + 944x \\), we want to prove that it has a maximum at the point \\( x = 4 \\).\nFor that, we need to show \\( f'(4) = 0 \\) (the first derivative vanishes at \\( x = 4 \\)), and \\( f''(4) < 0 \\) (the second derivative is negative at \\( x = 4 \\)).\n1) Introduce the hypothesis, i.e., the definition of the function.\n2) Prove that \\( f'(x) = 8x^3 - 6x^2 - 340x + 944 \\).\n  2.1) Extend the proof to an arbitrary \\( x \\).\n  2.2) Expand the function definition.\n  2.3) Apply the relevant derivative rules to each term to compute the derivative.\n  2.4) Simplify the expression by combining like terms.\n  2.5) Justify differentiability for all terms in the given expression.\n3) Prove that \\( f''(x) = 24x^2 - 12x - 340 \\).\n  3.1) Extend the proof to an arbitrary \\( x \\).\n  3.2) Expand the previously computed \\( f'(x) \\).\n  3.3) Apply the relevant derivative rules again to compute the second derivative.\n  3.4) Simplify the resulting expression.\n  3.5) Justify differentiability for all terms appearing.\n4) Split the goal into two parts: \\( f'(4) = 0 \\) and \\( f''(4) < 0 \\).\n5) For the first part, plug \\( x = 4 \\) into the established formula for \\( f'(x) \\) and verify the algebra.\n6) For the second part, plug \\( x = 4 \\) into the formula for \\( f''(x) \\) and check that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 - 2 * x ^ 4 - x ^ 3 - 2996 * x ^ 2 + 18128 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 - 8 * x ^ 3 - 3 * x ^ 2 - 5992 * x + 18128 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 - 24 * x ^ 2 - 6 * x - 5992 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 5x^5 - 2x^4 - x^3 - 2996x^2 + 18128x \\), we want to show that the first and second derivatives of \\( f \\) both vanish at \\( x = 4 \\), i.e., \\( f'(4) = 0 \\) and \\( f''(4) = 0 \\).\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that \\( f'(x) = 25x^4 - 8x^3 - 3x^2 - 5992x + 18128 \\).\n  2.1) Extend with respect to the variable \\( x \\).\n  2.2) Expand the definition of \\( f(x) \\).\n  2.3) Use theorems about derivatives to differentiate each term in \\( f(x) \\) and combine the results.\n  2.4) Simplify the algebraic expression to get the desired form.\n  2.5) Confirm that \\( f(x) \\) is differentiable everywhere.\n3) Show that \\( f''(x) = 100x^3 - 24x^2 - 6x - 5992 \\).\n  3.1) Extend with respect to the variable \\( x \\).\n  3.2) Expand the definition for \\( f'(x) \\) that you found in the previous step.\n  3.3) Use derivative rules to differentiate each term in \\( f'(x) \\).\n  3.4) Simplify the resulting expression.\n  3.5) Confirm that \\( f'(x) \\) is differentiable everywhere.\n4) Split the goal into proving \\( f'(4) = 0 \\) and \\( f''(4) = 0 \\).\n5) Substitute \\( x = 4 \\) into the formula for \\( f'(x) \\), expand and verify that the result is 0.\n6) Substitute \\( x = 4 \\) into the formula for \\( f''(x) \\), expand and verify that the result is 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 20 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 20 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 20 * x, we want to show that it has a minimum at x=5. For this, we need to prove that the first derivative at x=5 is zero, and the second derivative at x=5 is positive.\n1) Introduce the hypothesis, which is the definition of the function f.\n2) Show that f'(x) = 4 * x - 20.\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the explicit expression for f(x) as given by the hypothesis.\n  2.3) Use theorems about the derivative of sums, products, and powers to compute the derivative.\n  2.4) Combine and simplify terms algebraically.\n  2.5) Demonstrate that f(x) is differentiable everywhere required.\n3) Show that f''(x) = 4.\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the explicit expression for f'(x) obtained above.\n  3.3) Use rules about the derivative of sums, products, and constants to compute the derivative.\n  3.4) Combine and simplify terms algebraically.\n  3.5) Demonstrate that f'(x) is differentiable everywhere required.\n4) Split the overall goal into its separate components: f'(5) = 0 and f''(5) > 0.\n5) Substitute the specific value x=5 into the expression for f', and show that it evaluates to zero.\n6) Substitute x=5 into the expression for f'' and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 5 * x ^ 3 - 158 * x ^ 2 + 768 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 15 * x ^ 2 - 316 * x + 768 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 30 * x - 316 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 4 + 5 * x ^ 3 - 158 * x ^ 2 + 768 * x, we want to prove that it has a (local) maximum at the point x = 4.\nFor that, we must show both that f'(4) = 0 (the first derivative of f(x) at x = 4 is zero) and that f''(4) < 0 (the second derivative at x = 4 is negative).\n1) Introduce the hypothesis, namely the definition of the function f(x).\n2) Show that f'(x) = 4 * x ^ 3 + 15 * x ^ 2 - 316 * x + 768\n  2.1) Begin by extending the proof for all x, as the derivative is a function of x.\n  2.2) Substitute the provided definition of f(x).\n  2.3) Use the rules for differentiation (sum, difference, power, scalar multiplication, etc.) to compute the derivative for each term in f(x).\n  2.4) Combine like terms and rewrite the derivative in simplified form to conclude f'(x) as above.\n  2.5) Establish that f(x) is differentiable everywhere (since it's a polynomial, but check as needed in formal proof).\n3) Show that f''(x) = 12 * x ^ 2 + 30 * x - 316\n  3.1) Begin by extending the proof for all x, since again, the second derivative is a function of x.\n  3.2) Substitute in the formula you have already proved for f'(x), and use it as the function to differentiate.\n  3.3) Apply the rules of differentiation again to each term in f'(x).\n  3.4) Combine like terms and simplify, obtaining the formula for f''(x).\n  3.5) Confirm that f'(x) is differentiable as required (again, as a polynomial, this is immediate).\n4) Break the goal into two parts: f'(4) = 0 and f''(4) < 0.\n5) For the first part, substitute x = 4 into your formula for f'(x) and simplify to show that it equals 0.\n6) For the second part, substitute x = 4 into your formula for f''(x), simplify, and confirm that the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 4 * x ^ 3 - 71 * x ^ 2 + 106 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 12 * x ^ 2 - 142 * x + 106 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 24 * x - 142 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 4x^6 + 4x^3 - 71x^2 + 106x \\), we are to prove that it has a critical point at \\( x=1 \\) and that this point is a local minimum, i.e., \\( f'(1) = 0 \\) and \\( f''(1) > 0 \\).\n\n1) Introduce the hypothesis, namely the definition of the function \\( f \\).\n2) Show that \\( f'(x) = 24x^5 + 12x^2 - 142x + 106 \\)\n  2.1) State that the derivatives are to be taken with respect to \\( x \\).\n  2.2) Substitute the explicit definition of \\( f \\) into the problem.\n  2.3) Apply the sum, product, and power rules for derivatives systematically to compute the derivative term by term.\n  2.4) Simplify the resulting expression using algebra.\n  2.5) Confirm the differentiability of each term in \\( f \\).\n3) Show that \\( f''(x) = 120x^4 + 24x - 142 \\)\n  3.1) State that the derivatives are to be taken with respect to \\( x \\).\n  3.2) Substitute in the previously found explicit form for \\( f'(x) \\).\n  3.3) Again, apply the sum, product, and power rules as appropriate to each term.\n  3.4) Simplify the resulting second derivative expression using algebra.\n  3.5) Verify the differentiability of each term in \\( f'(x) \\).\n4) Break the overall goal into its two parts: showing \\( f'(1) = 0 \\) and \\( f''(1) > 0 \\).\n5) Substitute \\( x = 1 \\) into your explicit formula for \\( f'(x) \\), and confirm the evaluation.\n6) Substitute \\( x = 1 \\) into your explicit formula for \\( f''(x) \\), and confirm the evaluation and sign."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 16 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 16 * x, we want to show that it has a minima at the point x=4. To justify this, we must show that the first derivative at x=4 is zero (f'(4) = 0), and that the second derivative at x=4 is positive (f''(4) > 0).\n1) Introduce the hypothesis, i.e., the definition of the function f.\n2) Prove that f'(x) = 4 * x - 16\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the definition of f.\n  2.3) Apply derivative rules to each term of f.\n  2.4) Simplify algebraic expressions to derive the formula for the derivative.\n  2.5) Show that f is differentiable at every point required.\n3) Prove that f''(x) = 4\n  3.1) Extend with respect to variable x.\n  3.2) Substitute in the expression for f'(x) from the previous step.\n  3.3) Apply derivative rules to the resulting expression.\n  3.4) Simplify to get the constant second derivative.\n  3.5) Show that f' is differentiable everywhere needed.\n4) Split the goal into two separate statements: f'(4) = 0 and f''(4) > 0.\n5) Substitute x=4 into the formula for f'(x) and show the resulting equation is true.\n6) Substitute x=4 into the formula for f''(x) and show the resulting inequality is true."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3  - 3 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2  - 3 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 3 - 3 * x, we want to prove that it has a local minima at x = 1.\nFor this, we need to show f'(1) = 0 (first derivative is zero at x = 1), and f''(1) > 0 (second derivative is positive at x = 1).\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 3 * x ^ 2 - 3.\n  2.1) Extend w.r.t. variable x.\n  2.2) Expand the function definition as given in the hypothesis.\n  2.3) Use derivative rules to compute the derivative for each term.\n  2.4) Simplify the result and verify the expression.\n  2.5) Prove differentiability at this step.\n3) Show that f''(x) = 6 * x.\n  3.1) Extend w.r.t. variable x.\n  3.2) Substitute the form of f'(x) just proved.\n  3.3) Use derivative rules to compute the derivative of each term.\n  3.4) Simplify the result and verify the expression.\n  3.5) Prove differentiability at this step.\n4) Split the goal into its statements: show f'(1) = 0 and f''(1) > 0.\n5) Substitute the values for f'(1) and prove the equality.\n6) Substitute the values for f''(1) and prove the inequality."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3  + 2 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2  + 2 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x^4 - 2x^3 + 2x, we want to prove that both the first and second derivatives at x=1 are zero, i.e., f'(1) = 0 and f''(1) = 0.\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 4x^3 - 6x^2 + 2\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the function definition for f.\n  2.3) Apply derivative rules term by term and systematically differentiate (including handling sums, products, and powers).\n  2.4) Simplify the resulting expression algebraically.\n  2.5) Justify differentiability of each term.\n3) Show that f''(x) = 12x^2 - 12x\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the expression you previously obtained for f'(x).\n  3.3) Apply derivative rules again for each term.\n  3.4) Simplify the resulting algebraic expression.\n  3.5) Justify differentiability of each term.\n4) Split into the two goals: show f'(1) = 0 and f''(1) = 0.\n5) Substitute and expand f'(1) using your explicit formula, then simplify to check it is zero.\n6) Substitute and expand f''(1) using your explicit formula, then simplify to check it is zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 + x ^ 3 - 27 * x ^ 2 - 37 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 + 3 * x ^ 2 - 54 * x - 37 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 + 6 * x - 54 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x^4 + x^3 - 27 * x^2 - 37 * x, we want to prove that it has a critical point at x = -1 where both the first and second derivatives vanish, i.e., f'(-1) = 0 and f''(-1) = 0.\n1) Introduce the hypothesis, namely, the definition of the function f.\n2) Show that f'(x) = 20 * x^3 + 3 * x^2 - 54 * x - 37\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the function definition for f.\n  2.3) Apply the appropriate properties for differentiating sums, differences, and products (including constants times powers).\n  2.4) Collect terms and simplify the resulting expression.\n  2.5) Confirm differentiability at each step as required.\n3) Show that f''(x) = 60 * x^2 + 6 * x - 54\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the expression obtained for f'(x).\n  3.3) Use properties of differentiation for sums, differences, and products.\n  3.4) Combine like terms to simplify the resulting expression.\n  3.5) Confirm differentiability for all terms in f'(x).\n4) Split into the individual goals: f'(-1) = 0 and f''(-1) = 0.\n5) Substitute x = -1 into f'(x) using the formula from step 2 and verify the calculation gives 0.\n6) Substitute x = -1 into f''(x) using the formula from step 3 and verify the calculation gives 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 8 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 8 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 - 8 * x, we want to prove that it has a minimum at the point x=4.\nFor that we have to show f'(4) = 0, i.e., the first derivative of f(x) at x=4 is 0 and f''(4) > 0, i.e., the second derivative of f(x) at x=4 is greater than 0.\n\n1) Introduce the hypothesis, specifically the definition of the function f(x).\n2) Show that f'(x) = 2 * x - 8\n   2.1) Use function extensionality with respect to variable x.\n   2.2) Substitute the definition of f(x).\n   2.3) Use theorems/rules for differentiating sums, differences, powers, and constants to compute the derivative.\n   2.4) Simplify the resulting expression algebraically.\n   2.5) Prove f(x) is differentiable.\n3) Show that f''(x) = 2\n   3.1) Use function extensionality with respect to variable x.\n   3.2) Substitute the derivative f'(x) you computed in step 2.\n   3.3) Use theorems/rules for differentiating sums, differences, and scalar multiples to compute the second derivative.\n   3.4) Simplify the result.\n   3.5) Prove f'(x) is differentiable.\n4) Split the goal into two parts: f'(4) = 0 and f''(4) > 0.\n5) Substitute the definition of f'(4) in the first part and verify the value is 0.\n6) Substitute the definition of f''(4) in the second part and verify the value is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3 - 180 * x ^ 2 + 1512 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2 - 360 * x + 1512 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x - 360 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x ^ 4 - 2 * x ^ 3 - 180 * x ^ 2 + 1512 * x, we want to prove that the first and second derivatives at x=6 are both 0.\n1) Introduce the hypothesis, that is, assert the given function definition for f.\n2) Show that f'(x) = 4 * x ^ 3 - 6 * x ^ 2 - 360 * x + 1512.\n  2.1) Extend the proof to variable x.\n  2.2) Substitute the explicit function definition into the derivative.\n  2.3) Apply derivative rules to each term in the polynomial.\n  2.4) Combine like terms and simplify the resulting expression.\n  2.5) Ensure that each part of the function is differentiable as required for each step.\n3) Show that f''(x) = 12 * x ^ 2 - 12 * x - 360.\n  3.1) Extend the proof to variable x.\n  3.2) Substitute the expression for f'(x) previously derived.\n  3.3) Differentiate each term carefully, applying relevant rules for each.\n  3.4) Collect and simplify all terms to get the final formula.\n  3.5) Check that differentiability holds for each term in the second derivative as needed.\n4) Split the current goal into two parts: showing f'(6) = 0 and f''(6) = 0.\n5) In the first subgoal, explicitly evaluate f'(6) using the formula you derived and show it equals 0.\n6) In the second subgoal, explicitly evaluate f''(6) using the formula you derived and show it equals 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - x ^ 5 + x ^ 4 + 3 * x ^ 3 - 1164 * x ^ 2 + 3708 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 5 * x ^ 4 + 4 * x ^ 3 + 9 * x ^ 2 - 2328 * x + 3708 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 20 * x ^ 3 + 12 * x ^ 2 + 18 * x - 2328 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x^6 - x^5 + x^4 + 3 * x^3 - 1164 * x^2 + 3708 * x, we want to prove that it has a local maximum at the point x = 2. \nTo do this, we must show f'(2) = 0 (the first derivative of f at x = 2 vanishes) and f''(2) < 0 (the second derivative of f at x = 2 is negative).\n\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Prove that f'(x) = 30 * x^5 - 5 * x^4 + 4 * x^3 + 9 * x^2 - 2328 * x + 3708.\n   2.1) Extend by an arbitrary variable x.\n   2.2) Substitute in the explicit definition of f.\n   2.3) Apply rules for differentiation (sum, difference, constant multiple, and power rule) step by step to each term.\n   2.4) Combine like terms and simplify the resulting expression.\n   2.5) Justify differentiability for each term as needed.\n3) Prove that f''(x) = 150 * x^4 - 20 * x^3 + 12 * x^2 + 18 * x - 2328.\n   3.1) Extend by an arbitrary variable x.\n   3.2) Substitute in the explicit form of f'(x) found earlier.\n   3.3) Apply rules for differentiation term by term again.\n   3.4) Combine like terms and simplify the expression.\n   3.5) Justify differentiability for each term.\n4) Split the final goal into two parts: show f'(2) = 0 and f''(2) < 0.\n5) Substitute the value x = 2 into the expression for f'(x) to verify the first part.\n6) Substitute x = 2 into the expression for f''(x) to check that it is negative for the second part."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 18 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 18 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 2 + 18 * x, we want to prove that it has a minimum at the point x = -3.  \nFor that, we need to show that f'(-3) = 0 (i.e., the first derivative of f at x = -3 is zero), and that f''(-3) > 0 (i.e., the second derivative of f at x = -3 is positive).\n\n1) Introduce the hypothesis; in this case, the function definition is assumed.\n2) Derive the formula for the first derivative, f'(x) = 6 * x + 18.\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the explicit definition of the function.\n  2.3) Apply the known rules of differentiation and linearity for derivatives.\n  2.4) Simplify the resulting algebraic expressions.\n  2.5) Justify that the original function is differentiable.\n3) Obtain the formula for the second derivative, f''(x) = 6.\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the explicit form of the first derivative obtained above.\n  3.3) Apply differentiation rules.\n  3.4) Simplify the algebra as needed.\n  3.5) Justify that the first derivative is differentiable.\n4) Split the goal into its two parts: showing f'(-3) = 0 and f''(-3) > 0.\n5) For the first part, expand and calculate f'(-3) using the explicit formula, and show that this equals 0.\n6) For the second part, expand and calculate f''(-3), showing that it equals 6, which is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 - x ^ 3 - 397 * x ^ 2 - 2104 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 - 3 * x ^ 2 - 794 * x - 2104 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 - 6 * x - 794 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 4x^4 - x^3 - 397x^2 - 2104x \\), we want to prove it has a maximum at the point \\( x = -4 \\). To do this, we must show that \\( f'(-4) = 0 \\) (the first derivative vanishes at \\(-4\\)), and \\( f''(-4) < 0 \\) (the second derivative at \\(-4\\) is negative).\n1) Introduce the hypothesis, namely the definition of \\( f \\).\n2) Show that \\( f'(x) = 16x^3 - 3x^2 - 794x - 2104 \\).\n  2.1) Extend with respect to the variable \\( x \\).\n  2.2) Expand the function definition for \\( f(x) \\).\n  2.3) Apply derivative rules to each term in the sum/difference for the calculation.\n  2.4) Collect and simplify all like terms to get the single cubic expression.\n  2.5) Check that all components are differentiable as needed.\n3) Show that \\( f''(x) = 48x^2 - 6x - 794 \\).\n  3.1) Extend with respect to the variable \\( x \\).\n  3.2) Expand using the previously derived \\( f'(x) \\).\n  3.3) Apply derivative rules to each term.\n  3.4) Collect and simplify to get the quadratic expression.\n  3.5) Check that all components are differentiable as needed.\n4) Split the main goal into two subgoals: \\( f'(-4) = 0 \\) and \\( f''(-4) < 0 \\).\n5) Substitute the value \\( x = -4 \\) into the first derivative and show it equals zero.\n6) Substitute the value \\( x = -4 \\) into the second derivative and show it is less than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 - x ^ 5 - 2 * x ^ 4 + 5 * x ^ 3 - 59958 * x ^ 2 - 575316 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 - 5 * x ^ 4 - 8 * x ^ 3 + 15 * x ^ 2 - 119916 * x - 575316 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 - 20 * x ^ 3 - 24 * x ^ 2 + 30 * x - 119916 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 3 * x^6 - x^5 - 2 * x^4 + 5 * x^3 - 59958 * x^2 - 575316 * x, we want to prove that both its first and second derivatives are zero at the point x = -6.\n\n1) Introduce the hypothesis, specifically the definition of the function f.\n2) Prove that the first derivative f'(x) is 18 * x^5 - 5 * x^4 - 8 * x^3 + 15 * x^2 - 119916 * x - 575316.\n  2.1) Use function extensionality to claim the equality of two functions by checking the value at every x.\n  2.2) Expand the function f in the expression for its derivative.\n  2.3) Apply derivative rules term by term (such as for polynomial terms and constants).\n  2.4) Combine and simplify terms using algebraic simplification.\n  2.5) Justify that each term is differentiable and therefore the whole expression is differentiable.\n3) Prove that the second derivative f''(x) is 90 * x^4 - 20 * x^3 - 24 * x^2 + 30 * x - 119916.\n  3.1) Use function extensionality to analyze second derivatives for each x.\n  3.2) Substitute the result for f'(x) from above.\n  3.3) Apply derivative rules for polynomials and constants to each term in f'(x).\n  3.4) Simplify the resulting terms to reach the desired polynomial form.\n  3.5) Justify the differentiability of the result term by term.\n4) Split the goal into two separate statements: f'(-6) = 0 and f''(-6) = 0.\n5) Substitute the expression for f'(x) at x = -6 and show it evaluates to zero.\n6) Substitute the expression for f''(x) at x = -6 and show it evaluates to zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 5 - 4 * x ^ 4 - 2 * x ^ 3 - 2 * x ^ 2 + 11 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 4 - 16 * x ^ 3 - 6 * x ^ 2 - 4 * x + 11 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 3 - 48 * x ^ 2 - 12 * x - 4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 3x^5 - 4x^4 - 2x^3 - 2x^2 + 11x \\), we want to prove that it has a maximum at the point \\( x=1 \\). For this, we need to show that:\n- \\( f'(1) = 0 \\) (the first derivative at \\( x=1 \\) is zero), and\n- \\( f''(1) < 0 \\) (the second derivative at \\( x=1 \\) is negative).\n\n1) Introduce the hypothesis, namely the explicit definition of the function \\( f \\).\n2) Show that the first derivative \\( f'(x) = 15x^4 - 16x^3 - 6x^2 - 4x + 11 \\).\n  2.1) Start by fixing an arbitrary \\( x \\).\n  2.2) Substitute the definition of \\( f \\).\n  2.3) Apply the summation, subtraction, and constant multiplication rules to break apart the derivative.\n  2.4) Use power and identity differentiation rules to compute each term.\n  2.5) Combine like terms and simplify, yielding the expression for \\( f'(x) \\).\n  2.6) Justify differentiability of each term in \\( f(x) \\).\n3) Show that the second derivative \\( f''(x) = 60x^3 - 48x^2 - 12x - 4 \\).\n  3.1) Again, fix an arbitrary \\( x \\).\n  3.2) Substitute your result for \\( f'(x) \\).\n  3.3) Use the sum, subtraction, and multiplication rules, as well as the derivative of power and identity functions to differentiate each part.\n  3.4) Combine like terms and simplify.\n  3.5) Justify differentiability of each term in \\( f'(x) \\).\n4) Split the main goal into two subgoals: \\( f'(1) = 0 \\) and \\( f''(1) < 0 \\).\n5) For the first subgoal, substitute \\( x=1 \\) into your explicit formula for \\( f'(x) \\), simplify, and check it equals zero.\n6) For the second subgoal, substitute \\( x=1 \\) into your explicit formula for \\( f''(x) \\), simplify, and check that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 1200 * x ^ 2 + 3840 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 2400 * x + 3840 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 2400 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 6 - 1200 * x ^ 2 + 3840 * x, we want to prove that at x = 2, both the first and second derivatives vanish, i.e., f'(2) = 0 and f''(2) = 0.\n1) Introduce the hypothesis, specifically the definition of f(x).\n2) Show that f'(x) = 30 * x ^ 5 - 2400 * x + 3840:\n  2.1) Extend the equality for arbitrary x.\n  2.2) Substitute the definition of f(x).\n  2.3) Apply the properties of derivatives (linearity, constant multiples, powers, and sums) term by term to compute the derivative.\n  2.4) Simplify the resulting algebraic expression to reach the stated formula.\n  2.5) Verify differentiability of each term to justify the computation.\n3) Show that f''(x) = 150 * x ^ 4 - 2400:\n  3.1) Extend the equality for arbitrary x.\n  3.2) Use the previously established formula for f'(x).\n  3.3) Apply the properties of derivatives (as above) to compute the derivative of each part.\n  3.4) Simplify the resulting terms to get the required formula.\n  3.5) Ensure differentiability conditions for f'(x) are met.\n4) Split the desired result into two goals: f'(2) = 0 and f''(2) = 0.\n5) Substitute the value x = 2 into the formula for f'(x) and verify it evaluates to zero.\n6) Substitute x = 2 into the formula for f''(x) and verify it also evaluates to zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^2, we want to prove that it has a minima at the point x=0.\nFor that we have to show f'(0) = 0, i.e. the first derivative of f(x) at x=0 is 0 and f''(0) > 0, i.e. the second derivative of f(x) at x=0 is greater than 0.\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 2 * x.\n  2.1) Extend w.r.t variable x.\n  2.2) Expand the function definition.\n  2.3) Apply derivative theorems to calculate the derivative.\n  2.4) Simplify the algebra and conclude the result.\n  2.5) Prove the differentiability of f(x).\n3) Show that f''(x) = 2.\n  3.1) Extend w.r.t variable x.\n  3.2) Expand the definition of f'(x) that you just proved.\n  3.3) Apply derivative theorems to calculate the derivative.\n  3.4) Simplify the algebra and conclude the result.\n  3.5) Prove the differentiability of f'(x).\n4) Split the current goal into its constituents, i.e. f'(0) = 0 and f''(0) > 0.\n5) Expand the definition of f'(0) in the first goal, and show that it is true.\n6) Expand the definition of f''(0) in the second goal, and show that it is true."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 + x ^ 4 + 5 * x ^ 3 - 38 * x ^ 2 + 47 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 + 4 * x ^ 3 + 15 * x ^ 2 - 76 * x + 47 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 + 12 * x ^ 2 + 30 * x - 76 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^5 + x^4 + 5 * x^3 - 38 * x^2 + 47 * x, we want to prove that it has a stationary point at x=1 and, furthermore, that this point is a local minimum (since f''(1) > 0).\n1) Introduce the hypothesis, i.e. the definition of the function f.\n2) Show that f'(x) = 10 * x^4 + 4 * x^3 + 15 * x^2 - 76 * x + 47\n  2.1) Extend in the variable x to reduce the goal to pointwise equality.\n  2.2) Substitute the definition of f into the expression.\n  2.3) Apply the standard rules for the derivative of sums, differences, and products with powers and constants to compute the derivative.\n  2.4) Collect like terms and simplify the algebraic expression.\n  2.5) Justify that each subexpression is differentiable.\n3) Show that f''(x) = 40 * x^3 + 12 * x^2 + 30 * x - 76\n  3.1) Extend in the variable x to reduce the goal to pointwise equality again.\n  3.2) Substitute the formula for f' just obtained.\n  3.3) Compute the derivative by applying the standard rules for sums, products, and powers as above.\n  3.4) Collect like terms and simplify the algebraic expression.\n  3.5) Justify the differentiability of the expression.\n4) Split the concluding goal into two statements: f'(1) = 0 and f''(1) > 0.\n5) Substitute the formula for f' and check that evaluating at x=1 gives 0.\n6) Substitute the formula for f'' and check that evaluating at x=1 yields a positive value."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 8 * x ^ 2 + 7 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 16 * x + 7 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 16 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 3 + 8 * x ^ 2 + 7 * x, we want to prove that it has a maximum at the point x = -1.\nFor this, we need to show f'(-1) = 0 (the first derivative at x=-1 is zero) and f''(-1) < 0 (the second derivative at x=-1 is negative).\n1) Introduce the given hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 9 * x ^ 2 + 16 * x + 7\n  2.1) State that you will prove the formula for the derivative by extending with respect to an arbitrary x.\n  2.2) Substitute the definition of f(x) into the expression to compute its derivative.\n  2.3) Apply derivative rules and properties to differentiate each term.\n  2.4) Combine the results from differentiating each piece and simplify the resulting algebraic expression.\n  2.5) Justify that the differentiability conditions for each term are satisfied.\n3) Show that f''(x) = 18 * x + 16\n  3.1) State that you will prove a formula for the second derivative by extending with respect to an arbitrary x.\n  3.2) Expand f'(x) using the result established in the previous step.\n  3.3) Apply derivative rules to each term to compute the second derivative.\n  3.4) Simplify the algebraic expression after differentiating.\n  3.5) Argue that f'(x) is differentiable for the required computations.\n4) Split the goal into two separate statements: f'(-1) = 0 and f''(-1) < 0.\n5) Substitute x = -1 into the f'(x) formula and verify the resulting value is zero.\n6) Substitute x = -1 into the f''(x) formula and verify the resulting value is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 - 5 * x ^ 5 - 5 * x ^ 4 - 3 * x ^ 3 + 2 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 - 25 * x ^ 4 - 20 * x ^ 3 - 9 * x ^ 2 + 4 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 - 100 * x ^ 3 - 60 * x ^ 2 - 18 * x + 4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 3 x^6 - 5 x^5 - 5 x^4 - 3 x^3 + 2 x^2 \\), we want to prove that it has a stationary point at \\( x=0 \\) and that the second derivative at \\( x=0 \\) is positive. Specifically, we want to show \\( f'(0) = 0 \\) and \\( f''(0) > 0 \\).\n\n1) Introduce the hypothesis, i.e. the definition of the function f.\n2) Prove that the first derivative is \\( f'(x) = 18 x^5 - 25 x^4 - 20 x^3 - 9 x^2 + 4 x \\)\n  2.1) Extend the proof with respect to the variable x.\n  2.2) Expand the function definition for f(x).\n  2.3) Apply the appropriate differentiation rules (e.g., product, sum, chain, power) to compute the derivative term by term.\n  2.4) Simplify the resulting polynomial to obtain the desired expression for \\( f'(x) \\).\n  2.5) Justify differentiability of f(x) at each step.\n3) Prove that the second derivative is \\( f''(x) = 90 x^4 - 100 x^3 - 60 x^2 - 18 x + 4 \\)\n  3.1) Extend the proof with respect to the variable x.\n  3.2) Expand the previously found expression for \\( f'(x) \\).\n  3.3) Apply the differentiation rules again term by term.\n  3.4) Simplify the resulting expression for \\( f''(x) \\).\n  3.5) Justify differentiability of \\( f'(x) \\) at each step.\n4) Split the goal into two subgoals: \\( f'(0) = 0 \\) and \\( f''(0) > 0 \\).\n5) Expand the expression for \\( f'(0) \\) and show by direct evaluation and simplification that it equals zero.\n6) Expand the expression for \\( f''(0) \\) and show by direct evaluation that it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 10 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 + 10 * x, we want to prove that it has a minimum at the point x = -5.\nTo do this, we need to show that f'(-5) = 0 (the first derivative at x = -5 is zero) and f''(-5) > 0 (the second derivative at x = -5 is positive).\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 2 * x + 10\n  2.1) Extend the goal with respect to an arbitrary variable x.\n  2.2) Replace f with its definition.\n  2.3) Use properties of derivatives for sums, powers, and constant multiples to compute the derivative.\n  2.4) Simplify the resulting algebraic expression to get the required form.\n  2.5) Show that each component is differentiable.\n3) Show that f''(x) = 2\n  3.1) Extend the goal with respect to an arbitrary variable x.\n  3.2) Replace f' with the form obtained in the previous step.\n  3.3) Use properties of derivatives for addition and constant multiples to compute the derivative.\n  3.4) Simplify to obtain the result.\n  3.5) Show that each component is differentiable.\n4) Split the goal into the two parts: showing f'(-5) = 0 and f''(-5) > 0.\n5) Substitute x = -5 into f'(x) and verify the calculation.\n6) Substitute x = -5 into f''(x) and verify the calculation."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - x ^ 3 - 16 * x ^ 2 + 44 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 3 * x ^ 2 - 32 * x + 44 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 6 * x - 32 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^4 - x^3 - 16x^2 + 44x, we want to prove that it has a minima at the point x = 2.\nTo do that, we need to show f\u2032(2) = 0 (the first derivative at x = 2 is 0) and f\u2032\u2032(2) > 0 (the second derivative at x = 2 is positive).\n1) Introduce the hypothesis, namely the function definition.\n2) Show that f\u2032(x) = 4x^3 - 3x^2 - 32x + 44:\n  2.1) Extend the equality with respect to a variable x.\n  2.2) Expand the function definition for f(x) into its polynomial terms.\n  2.3) Use the properties of derivatives for sums, differences, powers, constants, and scalar multiples to calculate the derivative.\n  2.4) Simplify the resulting expression algebraically to reach the intended form.\n  2.5) Argue the differentiability of each term in f(x).\n3) Show that f\u2032\u2032(x) = 12x^2 - 6x - 32:\n  3.1) Extend the equality with respect to a variable x.\n  3.2) Substitute your previous result for f\u2032(x).\n  3.3) Use the properties of derivatives for sums, differences, scalar multiples, and powers to find the second derivative.\n  3.4) Simplify the resulting expression for the second derivative.\n  3.5) Argue differentiability as needed for the components.\n4) Split the main statement into the two desired parts: f\u2032(2) = 0 and f\u2032\u2032(2) > 0.\n5) Substitute in the explicit form of f\u2032(2) and show the equality holds.\n6) Substitute in the explicit form of f\u2032\u2032(2) and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + x ^ 3 - 29115 * x - 6063 * x ^ 2) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 3 * x ^ 2 - 29115 - 12126 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 6 * x - 12126 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 6 + x ^ 3 - 29115 * x - 6063 * x ^ 2, we want to prove that it has a minimum at the point x = -3.  \nFor this, we must show f'(-3) = 0 (the first derivative at x = -3 is zero) and f''(-3) > 0 (the second derivative at x = -3 is positive).\n\n1) Introduce the hypothesis, specifically the definition of the function f.\n2) Show that f'(x) = 30 * x ^ 5 + 3 * x ^ 2 - 29115 - 12126 * x.\n   2.1) Expand to show the equality of the derivative as a function, extending with respect to x.\n   2.2) Substitute the explicit formula for f(x).\n   2.3) Apply theorems for the derivatives of sums, products, and other basic operations, calculating each term separately.\n   2.4) Simplify the resulting expression and conclude the step with algebraic manipulations.\n   2.5) Justify the differentiability of each component where necessary.\n3) Show that f''(x) = 150 * x ^ 4 + 6 * x - 12126.\n   3.1) Expand the statement for the second derivative as a function of x.\n   3.2) Substitute the result just shown for f'(x).\n   3.3) Use differentiation rules and the behavior of the operations involved to calculate the second derivative explicitly.\n   3.4) Simplify the expression obtained with algebra.\n   3.5) Justify the differentiability of f'(x) and its terms.\n4) Separate the conjunction in the goal: f'(-3) = 0 and f''(-3) > 0.\n5) For f'(-3) = 0, substitute in the formula obtained for f'(x) and confirm the result at x = -3.\n6) For f''(-3) > 0, substitute in the explicit formula for f''(x) at x = -3 and show the computation yields a positive number."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 8 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 8 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 + 8 * x, we want to prove that it has a minimum at the point x = -4. For this, we need to show that the first derivative f'(-4) = 0 (i.e., the slope is zero at x = -4) and the second derivative f''(-4) > 0 (i.e., the curvature is positive at x = -4).\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 2 * x + 8.\n  2.1) Extend the goal with respect to the variable x.\n  2.2) Replace f with its given definition in the expression.\n  2.3) Apply derivative rules to compute the derivative term by term.\n  2.4) Simplify the algebraic expression and prove the equality.\n  2.5) Justify differentiability where required.\n3) Show that f''(x) = 2.\n  3.1) Extend the goal with respect to the variable x.\n  3.2) Use the expression for f'(x) obtained previously.\n  3.3) Apply the derivative rules to find the second derivative.\n  3.4) Simplify the expression and prove the equality.\n  3.5) Justify differentiability where required.\n4) Split the main goal into two cases: f'(-4) = 0 and f''(-4) > 0.\n5) Substitute x = -4 in f'(x) and show the result is zero.\n6) Substitute x = -4 in f''(x) and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 - 57 * x ^ 2 + 360 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 - 114 * x + 360 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x - 114 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 3 - 57 * x ^ 2 + 360 * x, we want to show that the function has a maximum at x = 6. That is, we need to show f'(6) = 0 and f''(6) < 0.\n1) Introduce the hypothesis, namely the definition of the function.\n2) Show that f'(x) = 9 * x ^ 2 - 114 * x + 360.\n  2.1) Work pointwise in x.\n  2.2) Expand out the definition of the function f(x).\n  2.3) Apply the general derivative rules for sums, constants, multiplication, and powers.\n  2.4) Simplify the resulting expression algebraically.\n  2.5) Justify differentiability of the relevant components of the expression.\n3) Show that f''(x) = 18 * x - 114.\n  3.1) Work pointwise in x.\n  3.2) Substitute in the explicit form of f'(x) you just computed.\n  3.3) Apply derivative rules step-by-step for sums and powers.\n  3.4) Simplify the algebraic expression.\n  3.5) Verify differentiability of each part.\n4) Split your main goal into two parts: f'(6) = 0 and f''(6) < 0.\n5) For the first part, substitute the formula for f'(x) at x=6 and check the calculation.\n6) For the second part, substitute the formula for f''(x) at x=6 and check that the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 16 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 + 16 * x, we want to prove that it has a minimum at the point x = -4. For that, we need to show f'(-4) = 0 (the first derivative at x = -4 is zero) and f''(-4) > 0 (the second derivative at x = -4 is positive).\n1) Introduce the hypothesis, which in this case gives the definition of the function f.\n2) Show that f'(x) = 4 * x + 16\n  2.1) Extend the proof with respect to a variable x.\n  2.2) Substitute the explicit function definition for f into the goal.\n  2.3) Apply the relevant rules for the derivatives of sums, products, powers, and constants to compute f'(x).\n  2.4) Simplify the resulting expression using algebra to obtain the desired form.\n  2.5) Justify why the function is differentiable.\n3) Show that f''(x) = 4\n  3.1) Extend the proof with respect to a variable x.\n  3.2) Substitute the explicit definition of f'(x) from the previous step.\n  3.3) Apply derivative rules for addition, multiplication by constants, and constants to compute the derivative.\n  3.4) Simplify the resulting expression using algebra to obtain the desired result.\n  3.5) Justify why the first derivative is differentiable.\n4) Split the goal into its two parts: showing f'(-4) = 0 and f''(-4) > 0.\n5) For the first part, expand f'(-4) using the result for f'(x) and verify that it equals 0.\n6) For the second part, expand f''(-4) using the result for f''(x) and verify that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 12 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 2 - 12 * x, we want to prove that it has a minima at the point x=2. For that we have to show f'(2) = 0, i.e. the first derivative of f(x) at x=2 is 0 and f''(2) > 0, i.e. the second derivative of f(x) at x=2 is greater than 0.\n1) Introduce the hypothesis, i.e. the function definition.\n2) Show that f'(x) = 6 * x - 12\n  2.1) Extend with respect to variable x.\n  2.2) Expand using the function definition.\n  2.3) Apply derivative theorems for each term to compute the derivative.\n  2.4) Simplify algebraically and finish this subgoal.\n  2.5) Argue differentiability of each function involved.\n3) Show that f''(x) = 6\n  3.1) Extend with respect to variable x.\n  3.2) Expand in terms of the previous result for f'(x).\n  3.3) Apply derivative theorems again to compute the new derivative.\n  3.4) Simplify algebraically and finish this subgoal.\n  3.5) Argue differentiability of the expressions used here.\n4) Split the main goal into two parts: f'(2) = 0 and f''(2) > 0.\n5) For the first part, substitute the expression for f'(x) at x=2 and show it equals 0.\n6) For the second part, substitute the expression for f''(x) at x=2 and show it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 39 * x ^ 2 + 126 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 78 * x + 126 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 78 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 3 + 39 * x ^ 2 + 126 * x, we want to show that it has a minimum at the point x = -3.  \nTo do this, we need to establish that f'(-3) = 0 (the first derivative at x = -3 is zero) and f''(-3) > 0 (the second derivative at x = -3 is positive).\n\n1) Introduce the hypothesis, i.e., the definition of the function f(x).\n2) Show that f'(x) = 12 * x ^ 2 + 78 * x + 126.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition using the provided hypothesis.\n  2.3) Apply differentiation rules to compute the derivative.\n  2.4) Simplify the resulting expression.\n  2.5) Confirm that f(x) is differentiable.\n3) Show that f''(x) = 24 * x + 78.\n  3.1) Extend with respect to the variable x.\n  3.2) Expand the definition of f'(x) you just computed.\n  3.3) Apply differentiation rules again to find the second derivative.\n  3.4) Simplify the resulting expression.\n  3.5) Confirm that f'(x) is differentiable.\n4) Split the main goal into two sub-goals: f'(-3) = 0 and f''(-3) > 0.\n5) Substitute and compute f'(-3), then verify that it equals zero.\n6) Substitute and compute f''(-3), then verify that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 72 * x ^ 2 + 432 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 144 * x + 432 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 144 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 3 + 72 * x ^ 2 + 432 * x, we want to show that it has a stationary inflection point at x = -6. That is, we need to prove that both the first and second derivatives at x = -6 are equal to zero.\n1) Introduce the assumption, namely the definition of the function f.\n2) Show that f'(x) = 12 * x ^ 2 + 144 * x + 432.\n  2.1) Extend the proof with respect to variable x.\n  2.2) Substitute in the function definition for f.\n  2.3) Apply rules for differentiation (such as the constant multiple rule, sum rule, and power rule) to compute the first derivative with respect to x.\n  2.4) Perform algebraic simplification to obtain the result.\n  2.5) Supply the required differentiability conditions for each piece of the computation.\n3) Show that f''(x) = 24 * x + 144.\n  3.1) Extend the proof with respect to variable x.\n  3.2) Use the previously found formula for f'(x) and substitute it in.\n  3.3) Apply the sum, constant multiple, and power differentiation rules to each term to compute the second derivative.\n  3.4) Perform algebraic simplification to obtain the result.\n  3.5) Supply differentiability for all terms involved.\n4) Split the proof goal into two subgoals: that f'(-6) = 0 and f''(-6) = 0.\n5) Using the explicit formula for f', show that f'(-6) = 0 by direct calculation.\n6) Using the explicit formula for f'', show that f''(-6) = 0 by direct calculation."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 24 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^2 + 24 * x, we want to prove that it has a minimum at the point x = -6.  \nFor this, we must show f'(-6) = 0 (the first derivative of f at x = -6 is zero) and f''(-6) > 0 (the second derivative of f at x = -6 is positive).\n1) Introduce the hypothesis: the definition of the function f.\n2) Show that f'(x) = 4 * x + 24.\n  2.1) Use function extensionality to show the derivatives are equal as functions.\n  2.2) Substitute the definition of f into the expression.\n  2.3) Apply the appropriate differentiation theorems to compute the derivative.\n  2.4) Use algebraic manipulation to simplify the expression to the desired form.\n  2.5) Justify differentiability at relevant steps as needed.\n3) Show that f''(x) = 4.\n  3.1) Use function extensionality, considering the definition of f'(x) from step 2.\n  3.2) Substitute the obtained expression for f'(x).\n  3.3) Apply the appropriate derivative rules.\n  3.4) Simplify to finish the calculation.\n  3.5) Justify differentiability at relevant steps.\n4) Split the main statement into the required two goals: f'(-6) = 0 and f''(-6) > 0.\n5) Substitute/expose the formula for f'(-6) using the result from step 2, and check it equals zero.\n6) Substitute/expose the formula for f''(-6) using the result from step 3, and check it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 4 * x ^ 3 - 48 * x ^ 2 - 84 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 12 * x ^ 2 - 96 * x - 84 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 24 * x - 96 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 4 * x^6 + 4 * x^3 - 48 * x^2 - 84 * x, we want to show that both the first and second derivatives at x = -1 are zero\u2014that is, f\u2032(-1) = 0 and f\u2032\u2032(-1) = 0.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f\u2032(x) = 24 * x^5 + 12 * x^2 - 96 * x - 84\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the explicit expression for f(x).\n  2.3) Apply properties of derivatives to compute the derivative, dealing carefully with sums, differences, constants, and powers.\n  2.4) Simplify the resulting expression using algebra.\n  2.5) Prove that the function is differentiable everywhere.\n3) Show that f\u2032\u2032(x) = 120 * x^4 + 24 * x - 96\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the explicit expression for f\u2032(x) you obtained in the previous step.\n  3.3) Apply standard differentiation rules to each term, again dealing with powers, constants, and sums.\n  3.4) Simplify algebraically.\n  3.5) Prove the differentiability of f\u2032(x).\n4) Use a case split to reduce proving the pair to two subgoals: f\u2032(-1) = 0 and f\u2032\u2032(-1) = 0.\n5) For the first goal, substitute your explicit formula for f\u2032(x), evaluate at x = -1, and confirm that it equals zero.\n6) For the second goal, substitute your explicit formula for f\u2032\u2032(x), evaluate at x = -1, and confirm that it equals zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 749 * x ^ 2 + 4990 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 1498 * x + 4990 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 1498 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x^4 - 749 * x^2 + 4990 * x, we want to prove that there is a minimum at x = 5. For that, we need to show f'(5) = 0 (the derivative at 5 is zero, indicating a critical point), and f''(5) > 0 (the second derivative at 5 is positive, indicating a minimum).\n1) Introduce the hypothesis, that is, the function definition.\n2) Prove that f'(x) = 20 * x^3 - 1498 * x + 4990\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition into its terms.\n  2.3) Use derivative theorems to compute the derivative for each term.\n  2.4) Combine and simplify the expressions.\n  2.5) Justify the differentiability of every term in f(x).\n3) Prove that f''(x) = 60 * x^2 - 1498\n  3.1) Extend with respect to the variable x again.\n  3.2) Substitute your previous result for f'(x).\n  3.3) Use derivative theorems to compute the derivative of each term of f'(x).\n  3.4) Combine and simplify the expressions.\n  3.5) Justify the differentiability of every term in f'(x).\n4) Split the goal into its two parts: f'(5) = 0 and f''(5) > 0.\n5) Substitute the definition for f'(5) in the first subgoal and show it equals 0 (algebraic simplification).\n6) Substitute the definition for f''(5) in the second subgoal and show it is positive (arithmetic check)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 176 * x + 46 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 176 + 92 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 92 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x^3 + 176 * x + 46 * x^2, we want to prove that it has a maximum at the point x = -4. \nTo do this, we need to show that f'(-4) = 0 (the first derivative at x = -4 is 0), and f''(-4) < 0 (the second derivative at x = -4 is negative).\n\n1) Introduce the hypothesis, specifying the definition of the function f.\n2) Show that f'(x) = 12 * x^2 + 176 + 92 * x\n  2.1) Use function extensionality to prove equality of derivatives.\n  2.2) Substitute the function definition into the derivative.\n  2.3) Apply standard rules for differentiation (sum, power, constant, and product).\n  2.4) Simplify and collect like terms to get the derivative in the required form.\n  2.5) Demonstrate that all pieces are differentiable where needed.\n3) Show that f''(x) = 24 * x + 92\n  3.1) Again use extensionality for this functional definition.\n  3.2) Substitute in your previously obtained formula for f'.\n  3.3) Apply rules for the derivative of sums and products.\n  3.4) Simplify the resulting expression to reach the final form.\n  3.5) Argue that the necessary differentiability holds throughout.\n4) Split the goal into the two required parts: proving f'(-4) = 0 and f''(-4) < 0.\n5) For the first part, substitute your expression for f'(x) at x = -4, and check that it is zero.\n6) For the second part, substitute your expression for f''(x) at x = -4, simplify, and demonstrate that the value is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 4 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 + 4 * x, we want to prove that it has a minimum at the point x = -1. To do this, we show that f'(-1) = 0 (the first derivative at x = -1 is zero), and f''(-1) > 0 (the second derivative at x = -1 is positive, indicating a local minimum).\n1) Introduce the hypothesis for the function definition.\n2) Prove that the first derivative f'(x) = 4 * x + 4.\n  2.1) Introduce x and expand the function definition using the hypothesis.\n  2.2) Apply the rules for derivatives of sums and the product of constants with functions to differentiate.\n  2.3) Simplify the resulting expression.\n  2.4) Prove that the original function is differentiable.\n3) Prove that the second derivative f''(x) = 4.\n  3.1) Introduce x and use the result for the first derivative just obtained.\n  3.2) Apply rules for derivatives of sums and constants to calculate the second derivative.\n  3.3) Simplify the resulting expression.\n  3.4) Prove the differentiability of the first derivative.\n4) Split the goal into two parts: f'(-1) = 0 and f''(-1) > 0.\n5) Substitute the definition of f'(x) at x = -1 and show that it equals 0.\n6) Substitute the definition of f''(x) at x = -1 and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 + 12 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x + 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 2 + 12 * x, we want to prove that it has a minimum at the point x = -2.\nFor that, we have to show that f'(-2) = 0, i.e. the first derivative of f(x) at x = -2 is 0, and f''(-2) > 0, i.e. the second derivative of f(x) at x = -2 is greater than 0.\n\n1) Introduce the hypothesis, specifically the definition of the function.\n2) Show that f'(x) = 6 * x + 12\n  2.1) Extend the definition with respect to the variable x.\n  2.2) Expand f and break it into parts using properties of derivatives, such as sum and product rules.\n  2.3) Apply the rules for differentiating power, identities, and constants appropriately.\n  2.4) Collect and simplify the terms algebraically to get the desired form.\n  2.5) Argue differentiability where needed for full rigor.\n3) Show that f''(x) = 6\n  3.1) Extend with respect to x.\n  3.2) Expand the definition of f'(x) from step 2.\n  3.3) Apply linearity and constant rules for derivatives.\n  3.4) Perform simple algebraic simplification.\n  3.5) Cover differentiability for all parts as needed.\n4) Split the goal into two parts: proving f'(-2) = 0 and f''(-2) > 0.\n5) Show that f'(-2) = 0 by substituting in and simplifying.\n6) Show that f''(-2) > 0 by substituting in and simplifying the constant result."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 + 16 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x + 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^2 + 16 * x, we want to show it has a minimum at x = -4.\nFor that, we need to show f'(-4) = 0 (that is, the first derivative of f at x = -4 is zero) and f''(-4) > 0 (that is, the second derivative is positive at -4).\n1) Introduce the hypothesis, which gives the explicit form of the function f.\n2) Prove that f'(x) = 4 * x + 16.\n  2.1) Extend the equality to all x.\n  2.2) Substitute the given function definition in terms of x.\n  2.3) Use rules for differentiation for sums and for each kind of term (constants, powers, etc.).\n  2.4) Collect and simplify the terms to arrive at the final expression for the derivative.\n  2.5) Confirm that all constituent parts of the function are differentiable.\n3) Prove that f''(x) = 4.\n  3.1) Extend the equality to all x.\n  3.2) Substitute the just-computed formula for f'(x).\n  3.3) Use the differentiation rules for sums and monomials.\n  3.4) Simplify to show it is a constant function.\n  3.5) Confirm the differentiability of f'(x).\n4) Split the goal into proving f'(-4) = 0 and f''(-4) > 0.\n5) Substitute the formula for f'(x) in the first goal, simplify, and show it equals zero at x = -4.\n6) Substitute the formula for f''(x) in the second goal, and establish its value is positive at x = -4."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - 12 * x ^ 2 + 19 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 24 * x + 19 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 24 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 5 - 12 * x ^ 2 + 19 * x, we want to prove that the function has a local maximum at x = 1.\nThat is, we must show that f'(1) = 0 (the first derivative vanishes), and f''(1) < 0 (the second derivative is negative).\n1) Introduce the hypothesis, specifically the definition of the function f.\n2) Show that f'(x) = 5 * x^4 - 24 * x + 19\n  2.1) Extend the equality with respect to the variable x.\n  2.2) Substitute the definition of f(x).\n  2.3) Apply the sum, difference, and product rules, as well as the power and constant rules, to compute the derivative.\n  2.4) Collect like terms and simplify the resulting expression.\n  2.5) Confirm differentiability of each term in f(x).\n3) Show that f''(x) = 20 * x^3 - 24\n  3.1) Extend the equality with respect to the variable x.\n  3.2) Substitute the result for f'(x) that was established above.\n  3.3) Apply sum/difference and product/power rules to compute the second derivative.\n  3.4) Collect like terms and simplify the result.\n  3.5) Confirm differentiability of each term in f'(x).\n4) Split the final goal into two parts: showing f'(1) = 0 and f''(1) < 0.\n5) Substitute the value x=1 in f'(x) using the previous result and verify that the expression evaluates to 0.\n6) Substitute the value x=1 in f''(x) using the result for the second derivative and verify that the expression is less than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + x ^ 5 + x ^ 4 - 5 * x ^ 3 - 54 * x ^ 2 - 76 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 5 * x ^ 4 + 4 * x ^ 3 - 15 * x ^ 2 - 108 * x - 76 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 20 * x ^ 3 + 12 * x ^ 2 - 30 * x - 108 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 6 + x ^ 5 + x ^ 4 - 5 * x ^ 3 - 54 * x ^ 2 - 76 * x, we want to prove that it has a minimum at the point x = -1.  \nFor that we have to show f'(-1) = 0, i.e., the first derivative of f(x) at x = -1 is 0, and f''(-1) > 0, i.e., the second derivative of f(x) at x = -1 is greater than 0.\n\n1) Introduce the hypothesis, namely the function definition.\n2) Show that f'(x) = 18 * x ^ 5 + 5 * x ^ 4 + 4 * x ^ 3 - 15 * x ^ 2 - 108 * x - 76.\n  2.1) Extend with respect to the variable x.\n  2.2) Rewrite the given function into its algebraic expression.\n  2.3) Apply rules for derivatives for combinations of powers, products, sums, and differences.\n  2.4) Simplify the resulting algebra so that all terms are collected properly.\n  2.5) Establish differentiability of all the needed terms.\n3) Show that f''(x) = 90 * x ^ 4 + 20 * x ^ 3 + 12 * x ^ 2 - 30 * x - 108.\n  3.1) Extend with respect to x.\n  3.2) Substitute in the formula for f'(x) that was just proved.\n  3.3) Apply the differentiation rules once again, handling all sums and differences of monomials and constants.\n  3.4) Simplify and collect all like terms to get the required polynomial.\n  3.5) Justify differentiability for each term in f'(x).\n4) Separate the proof into two subgoals: f'(-1) = 0 and f''(-1) > 0.\n5) In the first subgoal, expand and directly compute f'(-1) using the previously discovered formula.\n6) In the second subgoal, expand and directly compute f''(-1) and check if it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 150 * x ^ 2 + 1000 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 300 * x + 1000 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 300 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x^4 - 150 * x^2 + 1000 * x, we want to prove that at x = 5 we have f'(5) = 0 and f''(5) = 0.\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 4 * x^3 - 300 * x + 1000.\n  2.1) Extend with respect to variable x.\n  2.2) Expand the definition of the function f(x).\n  2.3) Apply derivative rules step by step to the sum, difference, powers, and constant multiples.\n  2.4) Simplify the resulting expression using algebraic manipulations.\n  2.5) Justify the differentiability of all terms involved.\n3) Show that f''(x) = 12 * x^2 - 300.\n  3.1) Extend with respect to variable x.\n  3.2) Use the form of f'(x) found earlier.\n  3.3) Apply the relevant derivative and algebraic rules for sums, powers, and constants.\n  3.4) Simplify the resulting expression.\n  3.5) Justify the differentiability of the derived terms.\n4) Split the final goal into two statements: f'(5) = 0 and f''(5) = 0.\n5) Substitute and simplify f'(5) using the explicit formula obtained above; show this equals zero.\n6) Substitute and simplify f''(5) using the explicit formula obtained above; show this equals zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 + 42 * x ^ 2 + 64 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 + 84 * x + 64 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 + 84 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 5 + 42 * x ^ 2 + 64 * x, we want to prove that it has a minimum at the point x = -1.\nFor that we have to show f'(-1) = 0 (the first derivative at x=-1 is zero) and f''(-1) > 0 (the second derivative at x=-1 is positive).\n1) Introduce the hypothesis, namely the function definition for f.\n2) Prove that f'(x) = 20 * x ^ 4 + 84 * x + 64.\n  2.1) Extend with respect to x.\n  2.2) Replace f with its explicit definition.\n  2.3) Apply theorems for differentiating sums, products, and powers as appropriate.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Confirm differentiability of all constituent terms of f.\n3) Prove that f''(x) = 80 * x ^ 3 + 84.\n  3.1) Extend with respect to x.\n  3.2) Substitute the expression for f'(x) you just found.\n  3.3) Apply theorems for differentiating sums, products, and powers as required.\n  3.4) Simplify the resulting algebraic expression.\n  3.5) Confirm differentiability of all constituent terms of f'(x).\n4) Split the goal into two parts, showing both f'(-1) = 0 and f''(-1) > 0.\n5) Replace f'(-1) with its established expression and show it equals zero.\n6) Replace f''(-1) with its established expression and show it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 21 * x ^ 2 + 36 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 42 * x + 36 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 42 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x^3 + 21 * x^2 + 36 * x, we want to prove that it has a maximum at the point x = -2. For this, we need to check that f'(-2) = 0 (the first derivative at x = -2 is zero), and f''(-2) < 0 (the second derivative at x = -2 is negative).\n1) Introduce the hypothesis, namely the explicit definition of the function f.\n2) Show that f'(x) = 12 * x^2 + 42 * x + 36.\n  2.1) Use function extensionality to argue for all x.\n  2.2) Substitute the definition of f.\n  2.3) Break down the sum into parts and apply rules for derivatives of sums and standard monomials.\n  2.4) Simplify the resulting expressions algebraically.\n  2.5) Confirm differentiability of each monomial and term in the expression.\n3) Show that f''(x) = 24 * x + 42.\n  3.1) Use function extensionality for all x.\n  3.2) Substitute the form of f'(x) you obtained.\n  3.3) Use linearity of the derivative and power rule to take the derivative term by term.\n  3.4) Simplify the algebraic expression.\n  3.5) Confirm differentiability of the resulting terms.\n4) Split the goal into its two parts, namely f'(-2) = 0 and f''(-2) < 0.\n5) Substitute -2 into the explicit form for f'(x) and perform the computation.\n6) Substitute -2 into the explicit form for f''(x), evaluate, and confirm that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 10 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 - 10 * x, we want to prove that it has a minimum at the point x=5. For that, we have to show f'(5) = 0 (i.e., the first derivative is zero) and f''(5) > 0 (i.e., the second derivative is positive).\n1) Introduce the hypothesis, in this case the definition of the function.\n2) Show that f'(x) = 2 * x - 10:\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the definition of the function.\n  2.3) Apply theorems for derivatives of subtraction, powers, and multiplication to calculate the derivative.\n  2.4) Collect like terms and simplify algebraically.\n  2.5) Show that the function is differentiable.\n3) Show that f''(x) = 2:\n  3.1) Extend with respect to variable x again.\n  3.2) Substitute the expression for f'(x) just found.\n  3.3) Use theorems for differentiating subtraction and multiplication by a constant to compute the second derivative.\n  3.4) Simplify the result.\n  3.5) Show that f'(x) is differentiable.\n4) Split the proof into two goals: proving f'(5) = 0 and f''(5) > 0.\n5) Substitute the definition of f'(5) and show that it equals zero.\n6) Substitute the definition of f''(5), show that it equals 2, and confirm that 2 > 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 - 46 * x ^ 2 + 235 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 - 92 * x + 235 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x - 92 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 3 - 46 * x ^ 2 + 235 * x, we want to prove that it has a maximum at the point x=5.\nFor that, we have to show f'(5) = 0, i.e. the first derivative of f(x) at x=5 is 0, and f''(5) < 0, i.e. the second derivative of f(x) at x=5 is less than 0.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 9 * x ^ 2 - 92 * x + 235.\n  2.1) Extend the proof by introducing a generic variable x.\n  2.2) Expand the definition of f in terms of x.\n  2.3) Apply derivative rules systematically to each term in the sum and difference.\n  2.4) Use algebraic simplification to collect like terms and reach the desired form for f'(x).\n  2.5) Justify the differentiability of each term and their combinations in f(x).\n3) Show that f''(x) = 18 * x - 92.\n  3.1) Extend the proof by introducing x.\n  3.2) Expand the definition of f'(x) that was just established.\n  3.3) Apply derivative rules to each relevant term.\n  3.4) Simplify algebraically to obtain the desired form for f''(x).\n  3.5) Prove the differentiability of the resulting expression for f'(x).\n4) Split the main goal into its constituent parts: f'(5) = 0 and f''(5) < 0.\n5) Substitute the definition of f'(5) from the earlier computation, and show directly that it evaluates to 0.\n6) Substitute the definition of f''(5) from the earlier computation, simplify and show directly that it is less than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 2 * x ^ 3 - 69 * x ^ 2 + 392 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 6 * x ^ 2 - 138 * x + 392 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 12 * x - 138 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^4 - 2 * x^3 - 69 * x^2 + 392 * x, we want to prove that there is a minimum at x=4.  \nSpecifically, we want to show that f'(4) = 0 (the first derivative vanishes) and f''(4) > 0 (the second derivative is positive).\n\n1) Introduce the hypothesis specifying the function definition.\n2) Show that f'(x) = 4 * x^3 - 6 * x^2 - 138 * x + 392.\n  2.1) Use function extensionality to state that your claim holds for all x.\n  2.2) Expand the definition using your hypothesis.\n  2.3) Apply sum, difference, and product rules for derivatives as appropriate to each term in f(x).\n  2.4) Simplify the resulting expression algebraically to reach the claimed formula for f'(x).\n  2.5) Justify the differentiability of each term to satisfy the requirements for differentiation.\n3) Show that f''(x) = 12 * x^2 - 12 * x - 138.\n  3.1) Again, use function extensionality to state this holds for all x.\n  3.2) Expand the previously derived expression for f'(x).\n  3.3) Apply the rules for derivatives on each term of f'(x).\n  3.4) Simplify algebraically to reach the claimed formula for f''(x).\n  3.5) Verify the differentiability of the relevant terms.\n4) Split the goal into the two desired results: f'(4) = 0 and f''(4) > 0.\n5) Plug x = 4 into your formula for f'(x), simplify, and confirm it equals zero.\n6) Plug x = 4 into your formula for f''(x), simplify, and confirm it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 4 * x ^ 2 + 5 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 8 * x + 5 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 8 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 3 - 4 * x ^ 2 + 5 * x, we want to prove that it has a local extremum at x = 1 (in this case, a local maximum), by checking that f'(1) = 0 and f''(1) < 0.\n1) Introduce the hypothesis, namely the definition of the function.\n2) Show that the first derivative f'(x) = 3 * x ^ 2 - 8 * x + 5:\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the definition of f(x).\n  2.3) Apply rules for taking derivatives of sums, products, and powers.\n  2.4) Simplify the expressions algebraically to achieve the desired form.\n  2.5) Show the differentiability of each term as needed.\n3) Show that the second derivative f''(x) = 6 * x - 8:\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute in the result for f'(x) from above.\n  3.3) Use rules for differentiating sums, products, and constants.\n  3.4) Simplify the algebraic expression to match the claimed result.\n  3.5) Ensure the differentiability of the required terms.\n4) Split the final conjunctive goal into f'(1) = 0 and f''(1) < 0.\n5) Substitute the formula for f'(x) at x = 1 and simplify to check it's zero.\n6) Substitute the formula for f''(x) at x = 1 and show that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 32 * x + 10 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 32 + 20 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 20 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = x^3 + 32x + 10x^2 \\), we want to prove that it has a maxima at the point \\( x = -4 \\).  \nFor that, we need to show \\( f'(-4) = 0 \\) (i.e., the first derivative at \\( x = -4 \\) is zero) and \\( f''(-4) < 0 \\) (i.e., the second derivative at \\( x = -4 \\) is negative).\n\n1) Introduce the hypothesis: in this case, the definition of the function.\n2) Show that \\( f'(x) = 3x^2 + 32 + 20x \\)\n  2.1) Extend with respect to \\( x \\).\n  2.2) Expand the function definition using your hypothesis.\n  2.3) Apply differentiation rules to compute the derivative of each term in the sum.\n  2.4) Combine and simplify the resulting expression.\n  2.5) Justify the differentiability of \\( f(x) \\).\n3) Show that \\( f''(x) = 6x + 20 \\)\n  3.1) Extend with respect to \\( x \\).\n  3.2) Substitute the expression for \\( f'(x) \\) from the previous step.\n  3.3) Apply differentiation rules to each term.\n  3.4) Simplify to get the final form.\n  3.5) Justify the differentiability of \\( f'(x) \\).\n4) Split the proof into the two goals: \\( f'(-4) = 0 \\) and \\( f''(-4) < 0 \\).\n5) Substitute \\( x = -4 \\) into the expression for \\( f'(x) \\) and verify it equals zero.\n6) Substitute \\( x = -4 \\) into the expression for \\( f''(x) \\) and verify it is less than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 - 48 * x ^ 2 - 128 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 - 96 * x - 128 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 - 96 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 4 - 48 * x ^ 2 - 128 * x, we want to prove that its first and second derivatives at x = -2 are both 0, i.e., f'(-2) = 0 and f''(-2) = 0.\n\n1) Introduce the hypothesis, namely the definition of the function f(x).\n2) Show that f'(x) = 8 * x ^ 3 - 96 * x - 128\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the given definition of f(x).\n  2.3) Apply the rules for differentiation (for sums, products, powers, constants).\n  2.4) Simplify the algebraic form of the derivative.\n  2.5) Justify the differentiability at each step.\n3) Show that f''(x) = 24 * x ^ 2 - 96\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the expression for f'(x) established previously.\n  3.3) Apply the differentiation rules again, term by term.\n  3.4) Simplify to obtain the required polynomial.\n  3.5) Justify the differentiability in taking the second derivative.\n4) Split the current goal into the two required statements: f'(-2) = 0 and f''(-2) = 0.\n5) Substitute the definition of f'(x) at x = -2, and verify that it equals 0.\n6) Substitute the definition of f''(x) at x = -2, and verify that it equals 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 3 + 60 * x ^ 2 + 300 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 2 + 120 * x + 300 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x + 120 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 3 + 60 * x ^ 2 + 300 * x, we want to show that at x = -5, both the first and second derivatives vanish: f'(-5) = 0 and f''(-5) = 0.\n\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 12 * x ^ 2 + 120 * x + 300.\n  2.1) Extend the statement for all x.\n  2.2) Substitute the function definition for f.\n  2.3) Expand the sum and use linearity and derivative rules for sums and products.\n  2.4) Individually differentiate each term using rules for powers and products.\n  2.5) Simplify the result to get the explicit formula for the derivative.\n  2.6) Establish the differentiability of each term involved.\n3) Show that f''(x) = 24 * x + 120.\n  3.1) Extend the statement for all x.\n  3.2) Substitute in the formula for f' already computed.\n  3.3) Expand the sum and apply the relevant derivative rules.\n  3.4) Differentiate each term as required and simplify the result.\n  3.5) Establish the differentiability of each term involved.\n4) Split the goal into two: show both f'(-5) = 0 and f''(-5) = 0.\n5) Substitute the explicit formula you found for f'(-5), then simplify to confirm it is zero.\n6) Substitute the explicit formula for f''(-5), then simplify to confirm it also equals zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + 3 * x ^ 5 + 2 * x ^ 4 + 2 * x ^ 3 - 122 * x ^ 2 + 185 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 15 * x ^ 4 + 8 * x ^ 3 + 6 * x ^ 2 - 244 * x + 185 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 60 * x ^ 3 + 24 * x ^ 2 + 12 * x - 244 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x^6 + 3 * x^5 + 2 * x^4 + 2 * x^3 - 122 * x^2 + 185 * x, we want to show that it has a critical point at x=1, and that this point is a (local) minimum by checking that f'(1) = 0 and f''(1) > 0.\n1) Introduce the hypothesis, which is the definition of the function f.\n2) Prove that the first derivative of f, f'(x), is 30 * x^5 + 15 * x^4 + 8 * x^3 + 6 * x^2 - 244 * x + 185.\n  2.1) Extend the goal with respect to a general x.\n  2.2) Substitute the definition of f(x).\n  2.3) Apply rules for the derivative of sums and products (including applications for different powers).\n  2.4) Perform algebraic simplification to obtain the claimed formula for f'(x).\n  2.5) Justify the differentiability of each term.\n3) Prove that the second derivative of f, f''(x), is 150 * x^4 + 60 * x^3 + 24 * x^2 + 12 * x - 244.\n  3.1) Extend the goal with respect to a general x.\n  3.2) Substitute the result previously found for f'(x).\n  3.3) Apply the rules for differentiating polynomials term-by-term.\n  3.4) Simplify the resulting expression to obtain the claimed formula for f''(x).\n  3.5) Justify the differentiability of each term.\n4) Split the final goal into two parts: showing f'(1) = 0 and f''(1) > 0.\n5) Substitute the expression for f'(x) at x = 1, and show with computation that it equals 0.\n6) Substitute the expression for f''(x) at x = 1, and show with computation that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 76 * x ^ 2 + 385 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 152 * x + 385 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 152 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x^3 - 76 * x^2 + 385 * x, we want to prove that it has a maximum at the point x = 5.  \nFor that, we have to show f'(5) = 0 (the first derivative of f(x) at x = 5 is 0) and f''(5) < 0 (the second derivative of f(x) at x = 5 is negative).\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 15 * x^2 - 152 * x + 385.\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition.\n  2.3) Apply derivative rules to compute the derivative of each term.\n  2.4) Combine like terms and simplify the resulting expression.\n  2.5) Be sure to address the differentiability of each term.\n3) Show that f''(x) = 30 * x - 152.\n  3.1) Extend with respect to variable x.\n  3.2) Expand the definition of f'(x) from the previous step.\n  3.3) Apply derivative rules on each term.\n  3.4) Combine and simplify the result.\n  3.5) Establish the differentiability of f'(x).\n4) Split the current goal into its constituents f'(5) = 0 and f''(5) < 0.\n5) Substitute the value of x = 5 into the formula for f'(x) to show that f'(5) = 0.\n6) Substitute x = 5 into the formula for f''(x) and verify that f''(5) < 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 + 4 * x ^ 5 + 5 * x ^ 4 - x ^ 3 - 105 * x - 69 * x ^ 2) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 + 20 * x ^ 4 + 20 * x ^ 3 - 3 * x ^ 2 - 105 - 138 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 + 80 * x ^ 3 + 60 * x ^ 2 - 6 * x - 138 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 5x^6 + 4x^5 + 5x^4 - x^3 - 69x^2 - 105x \\), we want to prove that there is a local maximum at \\( x = -1 \\). To do this, we must show \\( f'(-1) = 0 \\) and \\( f''(-1) < 0 \\).\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that \\( f'(x) = 30x^5 + 20x^4 + 20x^3 - 3x^2 - 138x - 105 \\)\n  2.1) Expand the proof pointwise by fixing \\( x \\).\n  2.2) Substitute the expression for \\( f(x) \\) into the derivative.\n  2.3) Apply the rules of differentiation for each term using sum, constant multiple, and power rules.\n  2.4) Combine like terms and simplify to obtain the desired formula for \\( f'(x) \\).\n  2.5) Justify that each term is differentiable.\n3) Derive \\( f''(x) = 150x^4 + 80x^3 + 60x^2 - 6x - 138 \\).\n  3.1) Expand the proof pointwise by fixing \\( x \\).\n  3.2) Write out the already-proved formula for \\( f'(x) \\).\n  3.3) Apply the rules of differentiation for each term present in \\( f'(x) \\).\n  3.4) Collect like terms and simplify to obtain the final formula for \\( f''(x) \\).\n  3.5) Justify differentiability termwise.\n4) Separate the goal into the two constituent parts, namely proving \\( f'(-1) = 0 \\) and \\( f''(-1) < 0 \\).\n5) Substitute \\( x = -1 \\) into your formula for \\( f'(x) \\) and show the result is 0.\n6) Substitute \\( x = -1 \\) into your formula for \\( f''(x) \\) and prove it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 - 4 * x ^ 5 - 3 * x ^ 4 - 4 * x ^ 3 + 289872 * x - 29520 * x ^ 2) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 - 20 * x ^ 4 - 12 * x ^ 3 - 12 * x ^ 2 + 289872 - 59040 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 80 * x ^ 3 - 36 * x ^ 2 - 24 * x - 59040 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 2x^6 - 4x^5 - 3x^4 - 4x^3 + 289872x - 29520x^2 \\), we want to prove that both the first and second derivatives of \\( f \\) vanish at \\( x = 6 \\), i.e., \\( f'(6) = 0 \\) and \\( f''(6) = 0 \\).\n\n1) Introduce the hypothesis, namely the definition of \\( f \\).\n2) Prove that \\( f'(x) = 12x^5 - 20x^4 - 12x^3 - 12x^2 + 289872 - 59040x \\).\n  2.1) Use function extensionality to consider equality for all \\( x \\).\n  2.2) Expand the definition of \\( f \\) inside the expression for the derivative.\n  2.3) Apply derivative rules (sum, difference, product, constant multiple, power, etc.) term-by-term to compute the derivative.\n  2.4) Perform algebraic simplification and verify the result.\n  2.5) Establish differentiability for each relevant term in \\( f \\).\n3) Prove that \\( f''(x) = 60x^4 - 80x^3 - 36x^2 - 24x - 59040 \\).\n  3.1) Use function extensionality for the expression for the second derivative.\n  3.2) Substitute in the result for \\( f' \\) from the previous step.\n  3.3) Apply the derivative rules to differentiate \\( f'(x) \\) term-by-term.\n  3.4) Perform algebraic simplification.\n  3.5) Establish differentiability for each term in \\( f' \\).\n4) Split the main goal into two parts: show \\( f'(6) = 0 \\) and \\( f''(6) = 0 \\).\n5) For the first goal, expand the definition of \\( f'(x) \\) at \\( x=6 \\), and check the result.\n6) For the second goal, expand \\( f''(x) \\) at \\( x=6 \\), and check the result."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 4 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x\u00b2 - 4 * x, we want to prove that it has a local minimum at x = 1. That is, we must show f'(1) = 0 (the first derivative at x = 1 is zero) and f''(1) > 0 (the second derivative at x = 1 is positive).\n\n1) Introduce the hypothesis, namely the definition of f(x).\n2) Compute and show that f'(x) = 4 * x - 4.\n  2.1) Extend the proof to hold for arbitrary x.\n  2.2) Substitute the explicit function definition for f(x).\n  2.3) Apply derivative rules to each term accordingly.\n  2.4) Perform algebraic simplification to arrive at the derivative formula.\n  2.5) Justify differentiability of each component to ensure legitimacy of the derivatives.\n3) Compute and show that f''(x) = 4.\n  3.1) Extend the proof to arbitrary x for the second derivative.\n  3.2) Expand the definition of f'(x) from the previous step.\n  3.3) Apply the appropriate derivative rules (e.g., constant times variable, derivative of a constant).\n  3.4) Simplify the resulting expression to show the second derivative is constant.\n  3.5) Ensure each step's differentiability is justified.\n4) Split the goal into two separate parts: f'(1) = 0 and f''(1) > 0.\n5) Substitute x = 1 into f'(x), compute, and show it equals 0.\n6) Substitute x = 1 into f''(x), compute, and verify it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 + 2 * x ^ 3 + 45 * x ^ 2 + 64 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 + 6 * x ^ 2 + 90 * x + 64 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 + 12 * x + 90 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 5 + 2 * x ^ 3 + 45 * x ^ 2 + 64 * x, we want to show that it has a local maximum at the point x = -1.\nTo do this, we need to check that f'(-1) = 0 (first derivative vanishes at x = -1) and f''(-1) < 0 (second derivative is negative at x = -1).\n\n1) Introduce the hypothesis, i.e., the definition of the function f.\n2) Show that f'(x) = 20 * x ^ 4 + 6 * x ^ 2 + 90 * x + 64.\n  2.1) Extend pointwise in the variable x.\n  2.2) Substitute the function definition into the derivative.\n  2.3) Use the rules for derivatives of powers, constants, and sums to compute the derivative.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Verify that each term is differentiable at every real number.\n3) Show that f''(x) = 80 * x ^ 3 + 12 * x + 90.\n  3.1) Extend pointwise in the variable x.\n  3.2) Substitute the expression for f'(x) from step 2.\n  3.3) Use derivative rules to differentiate each term in f'(x).\n  3.4) Simplify the result.\n  3.5) Verify differentiability for each term.\n4) Split the proof into the two goals: f'(-1) = 0 and f''(-1) < 0.\n5) Substitute x = -1 into the formula for f'(x) and show the result is 0.\n6) Substitute x = -1 into the formula for f''(x) and show the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 - 4 * x ^ 4 - 2 * x ^ 3 + 9470 * x ^ 2 + 84480 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 - 16 * x ^ 3 - 6 * x ^ 2 + 18940 * x + 84480 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 - 48 * x ^ 2 - 12 * x + 18940 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 4x^5 - 4x^4 - 2x^3 + 9470x^2 + 84480x \\), we want to prove that it has a minimum at the point \\( x = -6 \\).\nFor that, we have to show \\( f'(-6) = 0 \\) (the first derivative at \\( x = -6 \\) is zero) and \\( f''(-6) > 0 \\) (the second derivative at \\( x = -6 \\) is positive).\n\n1) Introduce the hypothesis, namely the definition of the function \\( f \\).\n2) Prove the explicit formula for the first derivative:\n   2.1) Use function extensionality with respect to \\( x \\).\n   2.2) Rewrite using the given function definition.\n   2.3) Apply the appropriate rules for differentiating sums, differences, and products with powers.\n   2.4) Perform algebraic simplification to obtain the explicit expression.\n   2.5) Justify all functions involved are differentiable where needed.\n3) Prove the explicit formula for the second derivative:\n   3.1) Use function extensionality with respect to \\( x \\).\n   3.2) Substitute in the explicit form of the first derivative just proven.\n   3.3) Differentiate term by term, using the appropriate rules.\n   3.4) Simplify algebraically to obtain the explicit expression.\n   3.5) Justify differentiability for all relevant terms.\n4) Split the goal into two parts: \\( f'(-6) = 0 \\) and \\( f''(-6) > 0 \\).\n5) For the first part, substitute the explicit formula for \\( f'(x) \\) at \\( x = -6 \\) and verify the result.\n6) For the second part, substitute the explicit formula for \\( f''(x) \\) at \\( x = -6 \\) and verify positivity."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 + 5 * x ^ 5 - 2 * x ^ 4 + 5 * x ^ 3 + 290 * x ^ 2 + 822 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 + 25 * x ^ 4 - 8 * x ^ 3 + 15 * x ^ 2 + 580 * x + 822 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 + 100 * x ^ 3 - 24 * x ^ 2 + 30 * x + 580 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 6 + 5 * x ^ 5 - 2 * x ^ 4 + 5 * x ^ 3 + 290 * x ^ 2 + 822 * x, we want to prove it has a minimum at x = -3, that is, f'(-3) = 0 and f''(-3) > 0.\n1) Introduce the hypothesis, recording the function definition.\n2) Show that f'(x) = 6 * x ^ 5 + 25 * x ^ 4 - 8 * x ^ 3 + 15 * x ^ 2 + 580 * x + 822.\n  2.1) Extend with respect to the variable x so you can prove pointwise equality.\n  2.2) Substitute the function definition for f.\n  2.3) Apply rules for the derivative of sums, products, powers, and constants to compute the derivative term by term.\n  2.4) Collect like terms and simplify the resulting expression.\n  2.5) Ensure differentiability for each component function as you proceed.\n3) Show that f''(x) = 30 * x ^ 4 + 100 * x ^ 3 - 24 * x ^ 2 + 30 * x + 580.\n  3.1) Again extend with respect to the variable x.\n  3.2) Use your explicit formula for f'(x) obtained above.\n  3.3) Differentiate term by term using standard rules.\n  3.4) Combine and simplify all resulting terms.\n  3.5) Argue for differentiability of this result as above.\n4) Split the goal into two parts: show f'(-3) = 0 and f''(-3) > 0.\n5) In the first goal, substitute the formula for f'(-3) and compute the value directly.\n6) In the second goal, use the formula for f''(-3), evaluate it at x = -3, and demonstrate the result is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 3 - 89 * x ^ 2 + 528 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 2 - 178 * x + 528 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x - 178 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 3 - 89 * x ^ 2 + 528 * x, we want to show that it has a minimum at the point x=6.  \nThis requires showing that f'(6) = 0, meaning the first derivative at x=6 is zero, and f''(6) > 0, meaning the second derivative at x=6 is positive.\n\n1) Introduce the hypothesis, i.e., the definition of the function f.\n2) Show that f'(x) = 15 * x ^ 2 - 178 * x + 528\n  2.1) Work with an arbitrary x (extend/extensionality).\n  2.2) Unfold the definition of f.\n  2.3) Use properties of derivatives to compute the derivative of each term.\n  2.4) Collect and simplify all terms to produce the claimed polynomial form.\n  2.5) Justify differentiability for each term.\n3) Show that f''(x) = 30 * x - 178\n  3.1) Work with an arbitrary x (extend/extensionality).\n  3.2) Unfold the definition of f'(x).\n  3.3) Use properties of derivatives to compute the derivative of each term in f'(x).\n  3.4) Collect and simplify the resulting terms.\n  3.5) Justify differentiability for each term.\n4) Split the goal into its two parts: f'(6) = 0 and f''(6) > 0.\n5) Substitute the explicit formula for f'(x) at x=6 and check that this equals zero.\n6) Substitute the explicit formula for f''(x) at x=6 and check that this is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 5 - 5 * x ^ 4 + 2 * x ^ 3 - 28 * x ^ 2 + 45 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  25 * x ^ 4 - 20 * x ^ 3 + 6 * x ^ 2 - 56 * x + 45 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  100 * x ^ 3 - 60 * x ^ 2 + 12 * x - 56 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 5 - 5 * x ^ 4 + 2 * x ^ 3 - 28 * x ^ 2 + 45 * x, we want to show that f has a local maximum at x = 1. This requires proving that f'(1) = 0 and f''(1) < 0.\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 25 * x ^ 4 - 20 * x ^ 3 + 6 * x ^ 2 - 56 * x + 45.\n  2.1) Use function extensionality to reduce to proving equality for all x.\n  2.2) Substitute the definition of f(x) and expand.\n  2.3) Apply linearity and rules for derivatives (sum, difference, product, power).\n  2.4) Collect like terms and simplify the algebraic expression.\n  2.5) Argue for differentiability where needed.\n3) Show that f''(x) = 100 * x ^ 3 - 60 * x ^ 2 + 12 * x - 56.\n  3.1) Use function extensionality in x.\n  3.2) Substitute your expression for f'(x) from the previous step.\n  3.3) Apply derivative rules as above.\n  3.4) Simplify the resulting polynomial.\n  3.5) Argue for differentiability again.\n4) Break down the goal into two parts: f'(1) = 0 and f''(1) < 0.\n5) Substitute and simplify to check that f'(1) = 0.\n6) Substitute and simplify to check that f''(1) < 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 3 - 18 * x ^ 2 + 54 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 2 - 36 * x + 54 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x - 36 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 3 - 18 * x ^ 2 + 54 * x, we want to prove f'(3) = 0 and f''(3) = 0, i.e., that both the first and second derivatives of f at x=3 equal zero.\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 6 * x^2 - 36 * x + 54.\n  2.1) Extend the proof with respect to variable x.\n  2.2) Expand the function definition to express it in terms of powers, products, and sums.\n  2.3) Apply derivative rules to each term of the sum/difference (such as the product and power rules).\n  2.4) Simplify the resulting expression algebraically to obtain the explicit formula for the first derivative.\n  2.5) Establish the differentiability of f at all x.\n3) Show that f''(x) = 12 * x - 36.\n  3.1) Extend the proof with respect to variable x.\n  3.2) Use the result for f'(x) just obtained.\n  3.3) Apply derivative rules term by term for the first derivative to obtain the second derivative.\n  3.4) Simplify algebraically to get an explicit formula for the second derivative.\n  3.5) Establish the differentiability of f' at all x.\n4) Split the proof into the two goals: namely, proving that f'(3) = 0 and f''(3) = 0.\n5) For the first goal, expand f'(3) using the formula derived and show that it simplifies to 0.\n6) For the second goal, expand f''(3) using the formula derived and show that it also simplifies to 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 - 38 * x ^ 2 + 160 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 - 76 * x + 160 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x - 76 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 3 - 38 * x ^ 2 + 160 * x, we want to prove that it has a maxima at the point x=4.  \nFor that we have to show f'(4) = 0, i.e. the first derivative of f(x) at x=4 is 0 and f''(4) < 0, i.e. the second derivative of f(x) at x=4 is less than 0.\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 9 * x ^ 2 - 76 * x + 160.\n   2.1) State the claim for the full derivative as a function.\n   2.2) Rewrite by expanding the definition of f.\n   2.3) Decompose the expression using properties of derivatives.\n   2.4) Calculate the derivative of each term.\n   2.5) Reassemble and simplify the result.\n   2.6) Prove differentiability as needed.\n3) Show that f''(x) = 18 * x - 76.\n   3.1) State the claim for the full second derivative as a function.\n   3.2) Rewrite by expanding the definition of f'(x) previously obtained.\n   3.3) Decompose and compute the derivative of each part.\n   3.4) Reassemble and simplify.\n   3.5) Prove differentiability as needed.\n4) Split the goal into two parts: show f'(4) = 0 and f''(4) < 0.\n5) For f'(4), substitute the value into your first derivative formula, simplify, and confirm the result is 0.\n6) For f''(4), substitute the value into your second derivative formula, simplify, and confirm the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 3 * x ^ 5 - 50624 * x ^ 2 - 403115 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 15 * x ^ 4 - 101248 * x - 403115 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 60 * x ^ 3 - 101248 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 5x^6 - 3x^5 - 50624x^2 - 403115x \\), we want to prove that \\( x = -5 \\) is a local minimum.\nThat is, prove \\( f'(-5) = 0 \\) and \\( f''(-5) > 0 \\).\n\n1) Introduce the hypothesis, which gives the definition of the function \\( f \\).\n2) Show that \\( f'(x) = 30x^5 - 15x^4 - 101248x - 403115 \\):\n  2.1) State the aim to show \\( f'(x) \\) has this explicit form.\n  2.2) Extend with respect to \\( x \\).\n  2.3) Substitute the hypothesis, replacing \\( f \\) with its definition.\n  2.4) Break down the calculation using the sum, difference, and product rules for differentiation, and powers as needed for each term.\n  2.5) Combine like terms and simplify the algebraic expression so it matches the stated form.\n  2.6) Justify the differentiability of each term in the expression.\n3) Show that \\( f''(x) = 150x^4 - 60x^3 - 101248 \\):\n  3.1) State the aim to show the second derivative explicitly.\n  3.2) Extend the proof with respect to \\( x \\).\n  3.3) Substitute the earlier computed expression for \\( f'(x) \\).\n  3.4) Apply differentiation rules (and deal with each term individually, using sum, difference, product, power rules as appropriate).\n  3.5) Combine like terms and simplify to obtain the desired expression for \\( f''(x) \\).\n  3.6) Justify differentiability of each component as needed.\n4) Split the proof goal into two separate parts: first, prove \\( f'(-5) = 0 \\), and second, prove \\( f''(-5) > 0 \\).\n5) For the first part, substitute \\(-5\\) into the previously found formula for \\( f'(x) \\), simplify, and confirm it yields zero.\n6) For the second part, substitute \\(-5\\) into the \\( f''(x) \\) formula, simplify the resulting arithmetic, and check that the value is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 5 * x ^ 5 + x ^ 4 - 107 * x ^ 2 - 412 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 25 * x ^ 4 + 4 * x ^ 3 - 214 * x - 412 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 100 * x ^ 3 + 12 * x ^ 2 - 214 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 6 + 5 * x ^ 5 + x ^ 4 - 107 * x ^ 2 - 412 * x, we want to show that x = -2 is a local extremum and specify its character by checking f'(-2) = 0 and f''(-2) < 0.\n1) Introduce the hypothesis, i.e., the definition of the function f.\n2) Compute f'(x) = 12 * x ^ 5 + 25 * x ^ 4 + 4 * x ^ 3 - 214 * x - 412.\n  2.1) Perform function extensionality with respect to x.\n  2.2) Substitute the given function definition for f.\n  2.3) Use the linearity and rules for the derivative of a sum, difference, and each term (constant multiple, power, linear).\n  2.4) Collect like terms and simplify the algebraic expression for the first derivative.\n  2.5) Justify differentiability of the original function at each step.\n3) Compute f''(x) = 60 * x ^ 4 + 100 * x ^ 3 + 12 * x ^ 2 - 214.\n  3.1) Perform function extensionality with respect to x.\n  3.2) Substitute the previously obtained formula for f'(x).\n  3.3) Apply rules for the derivative of a sum, difference, or product as needed.\n  3.4) Collect like terms and simplify the second derivative.\n  3.5) Justify differentiability of the first derivative at each step.\n4) Split the proof goal into two separate claims: f'(-2) = 0 and f''(-2) < 0.\n5) Substitute -2 into your formula for f'(x) and show that it equals 0.\n6) Substitute -2 into your formula for f''(x) and show that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 55 * x ^ 2 + 222 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 110 * x + 222 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 110 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 4 - 55 * x ^ 2 + 222 * x, we want to prove that it has a local extreme value at x = 3. Precisely, we want to show that f'(3) = 0 (the first derivative at 3 is zero), and the second derivative f''(3) < 0 (the second derivative at 3 is negative, indicating a local maximum).\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that the first derivative of f is f'(x) = 4 * x ^ 3 - 110 * x + 222:\n   2.1) Extend the proof for arbitrary x.\n   2.2) Substitute the definition of f(x) into the derivative.\n   2.3) Apply the rules for differentiation of sums, differences, powers, and products as appropriate for each term.\n   2.4) Collect like terms and simplify the resulting expression.\n   2.5) Confirm that the function is differentiable where needed.\n3) Show that the second derivative of f is f''(x) = 12 * x ^ 2 - 110:\n   3.1) Extend the proof again for arbitrary x.\n   3.2) Substitute the expression for f'(x) just established.\n   3.3) Apply the rules for differentiating sums, differences, and powers for this new expression.\n   3.4) Simplify the resulting expression.\n   3.5) Check and argue differentiability as needed.\n4) Split your goal into two statements: that f'(3) = 0 and that f''(3) < 0.\n5) For the first subgoal, substitute 3 into your formula for f'(x) and verify that the expression equals zero.\n6) For the second subgoal, substitute 3 into your f''(x) and verify the result is negative. Use basic arithmetic and inequalities to conclude."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 - 4 * x ^ 5 + 6804 * x - 1350 * x ^ 2) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 - 20 * x ^ 4 + 6804 - 2700 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 80 * x ^ 3 - 2700 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 2 * x^6 - 4 * x^5 + 6804 * x - 1350 * x^2, we want to show that both the first and second derivatives vanish at x = 3, i.e., f'(3) = 0 and f''(3) = 0.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 12 * x^5 - 20 * x^4 + 6804 - 2700 * x.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition for f(x).\n  2.3) Use the rules for derivatives to compute the derivative term by term.\n  2.4) Combine like terms and rearrange to simplify the result.\n  2.5) Establish differentiability of each term as required.\n3) Show that f''(x) = 60 * x^4 - 80 * x^3 - 2700.\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute in the explicit form of f'(x) you just computed.\n  3.3) Use the rules for derivatives to differentiate each term as necessary.\n  3.4) Simplify algebraically to obtain the final result.\n  3.5) Establish differentiability of each term of f'(x).\n4) Split the current goal into its two parts: f'(3) = 0 and f''(3) = 0.\n5) Substitute the explicit formula for f'(x) at x = 3, and show the result is zero.\n6) Substitute the explicit formula for f''(x) at x = 3, and show the result is zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 6 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^2 - 6x, we want to prove that it has a minima at the point x = 3.  \nTo do this, we must show that f'(3) = 0 (the first derivative at x = 3 is zero) and f''(3) > 0 (the second derivative at x = 3 is positive).\n\n1) Introduce the hypothesis, i.e., supply the definition of f(x).\n2) Compute and prove that f'(x) = 2x - 6.\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the given definition of f(x).\n  2.3) Use rules for differentiating sums, powers, products, and constants to compute the derivative.\n  2.4) Simplify the resulting expression algebraically.\n  2.5) Justify differentiability where required.\n3) Compute and prove that f''(x) = 2.\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the previous result for f'(x).\n  3.3) Use differentiation rules for the difference and linear terms.\n  3.4) Simplify the result.\n  3.5) Justify differentiability.\n4) Split the goal into the two required parts: f'(3) = 0 and f''(3) > 0.\n5) For the first goal, expand and simplify f'(3), confirming it equals 0.\n6) For the second goal, expand and simplify f''(3), confirming it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 6 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^2 - 6x, we want to prove that it has a minimum at the point x=3.\nFor that, we need to verify that f'(3) = 0 (the first derivative vanishes at x=3) and f''(3) > 0 (the second derivative is positive at x=3).\n1) Introduce the hypothesis, namely the definition of the function.\n2) Show that f'(x) = 2x - 6.\n  2.1) Express the property for all x by using extensionality.\n  2.2) Substitute the definition of f in terms of x.\n  2.3) Use basic differentiation rules to compute the derivative term by term.\n  2.4) Combine like terms and simplify the resulting expression.\n  2.5) Establish that the function is differentiable where necessary.\n3) Show that f''(x) = 2.\n  3.1) Express the property for all x by using extensionality.\n  3.2) Substitute the definition of f'(x) that you just proved.\n  3.3) Apply basic differentiation rules to compute the derivative.\n  3.4) Simplify and finish the calculation.\n  3.5) Confirm differentiability as required.\n4) Split the goal into the two required parts: f'(3) = 0 and f''(3) > 0.\n5) Evaluate f'(3) using your explicit formula and show it\u2019s zero.\n6) Evaluate f''(3) and check that it is indeed strictly positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 24 * x, we want to prove that it has a minima at the point x=6.\nFor that we have to show f'(6) = 0, i.e. the first derivative of f(x) at x=6 is 0 and f''(6) > 0, i.e. the second derivative of f(x) at x=6 is greater than 0.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 4 * x - 24.\n  2.1) Extend with respect to variable x.\n  2.2) Expand the function definition for f.\n  2.3) Apply the rules for the derivative of a sum/difference, constant multiplication, power, etc., to compute the derivative.\n  2.4) Simplify the algebraic expressions.\n  2.5) Establish the differentiability of f(x).\n3) Show that f''(x) = 4.\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the expression for the first derivative you just found.\n  3.3) Apply the appropriate derivative properties to compute the second derivative.\n  3.4) Simplify the resulting expression.\n  3.5) Establish the differentiability of f'(x).\n4) Split the goal into proving both f'(6) = 0 and f''(6) > 0.\n5) Substitute the explicit expressions for f'(6) and verify it is 0.\n6) Substitute the explicit expressions for f''(6) and verify it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 5 * x ^ 3 - 738 * x ^ 2 - 5724 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 15 * x ^ 2 - 1476 * x - 5724 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 30 * x - 1476 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 3 * x^4 - 5 * x^3 - 738 * x^2 - 5724 * x, we want to prove that at the point x = -6, both f'(-6) = 0 and f''(-6) = 0. \nThis generally indicates a critical point where not only the first derivative but also the second derivative vanishes.\n\n1) Introduce the hypothesis, providing the definition of the function f(x).\n2) Show that f'(x) = 12 * x^3 - 15 * x^2 - 1476 * x - 5724.\n  2.1) Extend the proof to a generic variable x.\n  2.2) Expand the definition of f(x).\n  2.3) Systematically apply the differentiation rules to each term in the polynomial.\n  2.4) Collect like terms and simplify the resulting expression to obtain the desired derivative formula.\n  2.5) For each operation involved, verify the differentiability of all component functions, making sure each step is valid.\n3) Show that f''(x) = 36 * x^2 - 30 * x - 1476.\n  3.1) Extend the proof to variable x.\n  3.2) Substitute in the formula for f'(x) from the previous step.\n  3.3) Differentiate each term in f'(x), again using appropriate rules for powers and products.\n  3.4) Gather like terms and simplify the expression to obtain the explicit second derivative.\n  3.5) Check the differentiability for all functions in this computation.\n4) Split the final goal into two statements: f'(-6) = 0 and f''(-6) = 0.\n5) For the first goal, substitute x = -6 into the expression for f'(x) and verify the result is 0.\n6) For the second goal, substitute x = -6 into the expression for f''(x) and check that this too evaluates to 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 - 2 * x ^ 5 + x ^ 4 - 35150 * x ^ 2 + 282250 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 - 10 * x ^ 4 + 4 * x ^ 3 - 70300 * x + 282250 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 - 40 * x ^ 3 + 12 * x ^ 2 - 70300 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 4x^6 - 2x^5 + x^4 - 35150x^2 + 282250x \\), we want to prove that both the first and second derivatives vanish at \\( x = 5 \\); that is, \\( f'(5) = 0 \\) and \\( f''(5) = 0 \\).\n\n1) Introduce the hypothesis, namely the definition of the function \\( f \\).\n2) Show that \\( f'(x) = 24x^5 - 10x^4 + 4x^3 - 70300x + 282250 \\)\n   2.1) Extend with respect to the variable \\( x \\).\n   2.2) Expand the function definition inside the derivative.\n   2.3) Apply the standard rules for differentiating sums, differences, constants, powers, multiplications, and polynomials.\n   2.4) Simplify the algebraic expression to match the asserted result for \\( f'(x) \\).\n   2.5) Justify or establish differentiability of each term of \\( f(x) \\).\n3) Show that \\( f''(x) = 120x^4 - 40x^3 + 12x^2 - 70300 \\)\n   3.1) Extend with respect to the variable \\( x \\).\n   3.2) Expand the definition of \\( f'(x) \\) that you just proved.\n   3.3) Apply the rules for differentiation again, as done in the previous step for each term.\n   3.4) Simplify the expression to obtain the claimed formula for \\( f''(x) \\).\n   3.5) Justify the differentiability of \\( f'(x) \\).\n4) Split the proof into the two goals: \\( f'(5) = 0 \\) and \\( f''(5) = 0 \\).\n5) Substitute the definition of \\( f'(x) \\) into the first goal, plug in \\( x = 5 \\), and verify the equation holds.\n6) Substitute the definition of \\( f''(x) \\) into the second goal, plug in \\( x = 5 \\), and verify the equation holds."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 480 * x ^ 2 - 2560 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 960 * x - 2560 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 960 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 5 * x^4 - 480 * x^2 - 2560 * x, we want to prove that at x = -4 both the first and second derivatives vanish: f'(-4) = 0 and f''(-4) = 0.\n1) Introduce the hypothesis, i.e., the function definition for f.\n2) Show that f'(x) = 20 * x^3 - 960 * x - 2560\n  2.1) Extend the proof with respect to the variable x.\n  2.2) Replace f with its definition and expand.\n  2.3) Apply rules for the derivatives of sums, differences, products, constants, and powers.\n  2.4) Simplify the expressions obtained to reach the required formula for f'(x).\n  2.5) Justify the differentiability at the required steps.\n3) Show that f''(x) = 60 * x^2 - 960\n  3.1) Extend the proof with respect to the variable x.\n  3.2) Substitute your previous result for f'(x).\n  3.3) Use the rules for taking derivatives again on all parts.\n  3.4) Simplify the result to the stated expression for f''(x).\n  3.5) Confirm differentiability where needed.\n4) Split the goal into two parts: f'(-4) = 0 and f''(-4) = 0\n5) Substitute the definition of f'(x) into the first goal and verify at x = -4.\n6) Substitute the definition of f''(x) into the second goal and check at x = -4."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 - 2 * x ^ 5 - x ^ 4  ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 - 10 * x ^ 4 - 4 * x ^ 3   := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 - 40 * x ^ 3 - 12 * x ^ 2  := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 4 * x^6 - 2 * x^5 - x^4, we are to show that both f'(0) = 0 and f''(0) = 0.\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 24 * x^5 - 10 * x^4 - 4 * x^3.\n  2.1) Extend the proof with respect to variable x.\n  2.2) Expand the function definition using the hypothesis.\n  2.3) Apply derivative differentiation rules (sum, product, power) to compute f'(x).\n  2.4) Simplify the expression algebraically to arrive at the formula for f'(x).\n  2.5) Demonstrate differentiability of each term as needed.\n3) Show that f''(x) = 120 * x^4 - 40 * x^3 - 12 * x^2.\n  3.1) Extend the proof with respect to variable x for the derivative of f'(x).\n  3.2) Substitute in the formula for f'(x) you just proved.\n  3.3) Use derivative rules (sum, product, power) to compute f''(x).\n  3.4) Simplify the result algebraically to obtain the second derivative.\n  3.5) Justify differentiability of each term as required.\n4) Split the goal into its components: f'(0) = 0 and f''(0) = 0.\n5) Substitute and simplify f'(0) using your earlier result and show the calculation resolves to 0.\n6) Substitute and simplify f''(0) and show the calculation resolves to 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 - 12 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x - 12 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^2 - 12*x, we want to prove that it has a minimum at the point x=6.  \nFor that, we have to show f'(6) = 0, i.e. the first derivative of f(x) at x=6 is 0, and f''(6) > 0, i.e. the second derivative of f(x) at x=6 is greater than 0.\n\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 2 * x - 12.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition in terms of x^2 and -12*x.\n  2.3) Apply derivative rules to compute the derivative of each term.\n  2.4) Simplify the algebraic expression to reach the desired form.\n  2.5) Justify the differentiability of each term.\n3) Show that f''(x) = 2.\n  3.1) Extend with respect to the variable x.\n  3.2) Expand the definition of f'(x) using your previous result.\n  3.3) Apply derivative rules to compute the second derivative.\n  3.4) Simplify the algebraic expression to the constant result.\n  3.5) Justify the differentiability of each term in f'(x).\n4) Split the goal into its components, namely f'(6) = 0 and f''(6) > 0.\n5) Expand f'(6) using your formula, and check that it equals 0.\n6) Expand f''(6) using your formula, and check that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + 3 * x ^ 5 + 2 * x ^ 4 - 3 * x ^ 3 - 9828 * x ^ 2 - 63376 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 15 * x ^ 4 + 8 * x ^ 3 - 9 * x ^ 2 - 19656 * x - 63376 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 60 * x ^ 3 + 24 * x ^ 2 - 18 * x - 19656 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 3x^6 + 3x^5 + 2x^4 - 3x^3 - 9828x^2 - 63376x \\), we want to prove something about its derivatives at \\( x = -4 \\). Specifically, we are to show that both the first and second derivatives at \\( x = -4 \\) are zero: \\( f'(-4) = 0 \\) and \\( f''(-4) = 0 \\).\n\n1) Introduce the hypothesis, i.e., the assumption about the function definition.\n\n2) Compute the first derivative \\( f'(x) \\) and show that \\( f'(x) = 18x^5 + 15x^4 + 8x^3 - 9x^2 - 19656x - 63376 \\):\n  2.1) Extend the goal with respect to the variable \\( x \\).\n  2.2) Substitute the function definition into the expression.\n  2.3) Apply the sum, difference, power, and product rules relevant for polynomials to differentiate each term.\n  2.4) Combine and simplify the terms algebraically to collect all like monomials.\n  2.5) Verify differentiability of each component for completeness.\n\n3) Compute the second derivative \\( f''(x) \\) and show that \\( f''(x) = 90x^4 + 60x^3 + 24x^2 - 18x - 19656 \\):\n  3.1) Extend the goal with respect to the variable \\( x \\).\n  3.2) Substitute the formula for \\( f'(x) \\) just derived.\n  3.3) Apply the differentiation rules (in particular, for powers and sums) to each term.\n  3.4) Combine and simplify the terms as before.\n  3.5) Verify differentiability at each step.\n\n4) Split the proof goal into the two required statements: \\( f'(-4) = 0 \\) and \\( f''(-4) = 0 \\).\n\n5) In the first goal, plug \\( x = -4 \\) into the expression for \\( f'(x) \\) and show that the result simplifies to zero.\n\n6) In the second goal, plug \\( x = -4 \\) into the expression for \\( f''(x) \\) and show that the result simplifies to zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 + 5 * x ^ 4 - 4 * x ^ 3 - 253 * x ^ 2 + 740 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 + 20 * x ^ 3 - 12 * x ^ 2 - 506 * x + 740 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 + 60 * x ^ 2 - 24 * x - 506 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 5 + 5 * x ^ 4 - 4 * x ^ 3 - 253 * x ^ 2 + 740 * x, we want to show that it has a minimum at the point x = 2. For that, we need to check f\u2032(2) = 0 (the first derivative vanishes at x=2) and f\u2033(2) > 0 (the second derivative at x=2 is positive).\n1) Introduce the hypothesis, specifically the definition of the function f.\n2) Show that f\u2032(x) = 10 * x ^ 4 + 20 * x ^ 3 - 12 * x ^ 2 - 506 * x + 740.\n  2.1) Extend by an arbitrary x.\n  2.2) Substitute the explicit definition of f(x).\n  2.3) Apply derivative properties for sum, difference, scalar multiplication, powers, and the identity function repeatedly to compute the derivative term-by-term.\n  2.4) Use algebraic manipulation to collect like terms and finish the calculation.\n  2.5) Argue that each term is differentiable.\n3) Show that f\u2033(x) = 40 * x ^ 3 + 60 * x ^ 2 - 24 * x - 506.\n  3.1) Extend by an arbitrary x.\n  3.2) Substitute the explicit definition for f\u2032(x) that was just established.\n  3.3) Apply the same derivative properties as in step 2 to compute the second derivative, term-by-term.\n  3.4) Use algebraic manipulation to collect like terms and simplify.\n  3.5) Argue that each term in the first derivative is differentiable.\n4) Separate the goal into two subgoals, f\u2032(2) = 0 and f\u2033(2) > 0.\n5) Substitute the definition of f\u2032(x) at x=2 and simplify to verify that it equals zero.\n6) Substitute the definition of f\u2033(x) at x=2 and show that it evaluates to a positive number."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 + 5 * x ^ 4 + 5 * x ^ 3 - 5175 * x ^ 2 + 24543 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 + 20 * x ^ 3 + 15 * x ^ 2 - 10350 * x + 24543 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 + 60 * x ^ 2 + 30 * x - 10350 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 6 + 5 * x ^ 4 + 5 * x ^ 3 - 5175 * x ^ 2 + 24543 * x, we want to prove that at the point x = 3, both the first and second derivatives are equal to zero; that is, f'(3) = 0 and f''(3) = 0.\n1) Introduce the hypothesis, specifically the definition of the function f(x).\n2) Prove that f'(x) = 24 * x ^ 5 + 20 * x ^ 3 + 15 * x ^ 2 - 10350 * x + 24543\n  2.1) Extend with respect to the variable x.\n  2.2) Expand f(x) using its definition from the hypothesis.\n  2.3) Apply theorems about the derivative of sums, differences, products (for constants and powers), and powers, as needed, to compute the derivative of each term.\n  2.4) Gather terms appropriately and simplify the resulting polynomial algebraically to match the desired form.\n  2.5) Justify the differentiability of each term in this context.\n3) Prove that f''(x) = 120 * x ^ 4 + 60 * x ^ 2 + 30 * x - 10350\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute in your earlier result for f'(x).\n  3.3) Apply theorems about the derivative of each summand as needed, computing the derivative of the previously obtained polynomial.\n  3.4) Simplify all terms algebraically to obtain the given expression.\n  3.5) Ensure you justify differentiability as you proceed, especially for all polynomial terms.\n4) Split your goal into the two targets: f'(3) = 0 and f''(3) = 0.\n5) Substitute x = 3 into your formula for f'(x) and check that after simplification it gives zero.\n6) Substitute x = 3 into your formula for f''(x) and again, after simplifying, confirm that it equals zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 5 * x ^ 3 - 72 * x ^ 2 - 595 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 15 * x ^ 2 - 144 * x - 595 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 30 * x - 144 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x\u2074 + 5 x\u00b3 - 72 x\u00b2 - 595 x, we want to prove that it has a local minimum at the point x = -5.\nFor this, we need to show that f'(-5) = 0 (i.e., the first derivative at x = -5 is zero), and that f''(-5) > 0 (i.e., the second derivative is positive at x = -5).\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Prove that f'(x) = 4 x\u00b3 + 15 x\u00b2 - 144 x - 595\n  2.1) Use function extensionality to introduce a variable x.\n  2.2) Substitute the explicit definition of f(x).\n  2.3) Successively apply differentiation rules term-by-term to compute the derivative, using the linearity and product rules as needed.\n  2.4) Simplify the resulting algebraic expressions to obtain a closed form.\n  2.5) Justify the differentiability of each term involved.\n3) Prove that f''(x) = 12 x\u00b2 + 30 x - 144\n  3.1) Use function extensionality to introduce a variable x.\n  3.2) Substitute the explicit form of f'(x) obtained previously.\n  3.3) Apply appropriate differentiation rules to each term of f'(x).\n  3.4) Simplify to get the final closed form.\n  3.5) Justify the differentiability of each necessary term.\n4) Split the goal into its two parts: first, that f'(-5) = 0, and second, that f''(-5) > 0.\n5) Substitute the formula for f'(x) at x = -5, simplify, and verify that it evaluates to 0.\n6) Substitute the formula for f''(x) at x = -5, simplify, and verify that it evaluates to a positive number."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 2 * x ^ 3 - 719 * x ^ 2 + 4840 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 6 * x ^ 2 - 1438 * x + 4840 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 12 * x - 1438 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 4 - 2 * x ^ 3 - 719 * x ^ 2 + 4840 * x, we want to prove that it has a minimum at the point x=5.\nFor that we have to show f'(5) = 0, i.e. the first derivative of f(x) at x=5 is 0 and f''(5) > 0, i.e. the second derivative of f(x) at x=5 is positive.\n\n1) Introduce the hypothesis, i.e. the explicit definition of f(x).\n2) Show that f'(x) = 20 * x ^ 3 - 6 * x ^ 2 - 1438 * x + 4840.\n  2.1) Extend the proof with respect to the variable x.\n  2.2) Substitute the definition of f(x).\n  2.3) Use properties of derivatives for sums, differences, constants, powers, and multiples to compute f'(x).\n  2.4) Collect like terms and simplify the resulting polynomial.\n  2.5) Confirm differentiability for all the terms used.\n3) Show that f''(x) = 60 * x ^ 2 - 12 * x - 1438.\n  3.1) Extend the proof with respect to the variable x.\n  3.2) Substitute the definition of f'(x) you have just found.\n  3.3) Use properties of derivatives again for sums, differences, and powers to compute the second derivative.\n  3.4) Combine like terms and simplify the expression.\n  3.5) Confirm differentiability for all intermediate components.\n4) Split the goal into showing f'(5) = 0 and f''(5) > 0 separately.\n5) Substitute the expression you found for f'(x) and calculate its value at x=5, and show it equals 0.\n6) Substitute the expression you found for f''(x) and calculate its value at x=5, and show it is positive (greater than 0)."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 2 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 2 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^2 + 2x, we want to prove that it has a minimum at the point x = -1.  \nFor that we need to show that f'(-1) = 0 (the first derivative at x = -1 is zero) and f''(-1) > 0 (the second derivative at x = -1 is positive).  \n1) Introduce the hypothesis, that is, the definition of the function.\n2) Show that f'(x) = 2x + 2.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the definition of f(x).\n  2.3) Apply derivative rules to calculate the first derivative.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Prove the differentiability of the function.\n3) Show that f''(x) = 2.\n  3.1) Extend with respect to the variable x.\n  3.2) Expand the definition of f'(x) you have just calculated.\n  3.3) Apply derivative rules to calculate the second derivative.\n  3.4) Simplify the result.\n  3.5) Prove the differentiability of the first derivative.\n4) Split your goal into the two parts: f'(-1) = 0 and f''(-1) > 0.\n5) Use your explicit formula for f'(x) to compute f'(-1) and show that it equals 0.\n6) Use your explicit formula for f''(x) to compute f''(-1) and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 + 3 * x ^ 3 - 250 * x ^ 2 - 1376 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 + 9 * x ^ 2 - 500 * x - 1376 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 + 18 * x - 500 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 3x^4 + 3x^3 - 250x^2 - 1376x \\), we want to prove that it has a local minima at the point \\( x = -4 \\).  \nFor that, we must show \\( f'(-4) = 0 \\) (the first derivative vanishes at \\( x = -4 \\)), and \\( f''(-4) > 0 \\) (the second derivative at that point is positive).\n\n1) Introduce the hypothesis, namely the explicit form of the function definition.\n2) Show that \\( f'(x) = 12x^3 + 9x^2 - 500x - 1376 \\).\n  2.1) State that you will prove this as an equality of functions via extensionality.\n  2.2) Replace the function \\( f \\) with its explicit definition.\n  2.3) Use linearity and product rules for derivatives to expand out the derivative.\n  2.4) Collect like terms and simplify the algebraic expression.\n  2.5) Justify the differentiability of all terms in \\( f \\).\n3) Show that \\( f''(x) = 36x^2 + 18x - 500 \\).\n  3.1) Prove this as a function equality via extensionality.\n  3.2) Substitute the explicit formula you just established for \\( f'(x) \\).\n  3.3) Use linearity and product rules for derivatives to expand out this derivative.\n  3.4) Simplify algebraically to get the desired quadratic expression.\n  3.5) Justify differentiability of all relevant terms.\n4) Split the goal into the two statements: \\( f'(-4) = 0 \\) and \\( f''(-4) > 0 \\).\n5) Substitute in the explicit formula for \\( f'(-4) \\), compute, and show it equals zero.\n6) Substitute in the explicit formula for \\( f''(-4) \\), compute, and show it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 5 * x ^ 3 - 349 * x ^ 2 - 1784 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 15 * x ^ 2 - 698 * x - 1784 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 30 * x - 698 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 4 - 5 * x ^ 3 - 349 * x ^ 2 - 1784 * x, we want to show that f has a local maximum at x = -4.\nFor this, we need to demonstrate that f'(-4) = 0 (the first derivative at x = -4 is zero) and f''(-4) < 0 (the second derivative at x = -4 is negative).\n1) Introduce the hypothesis, namely the specific function definition.\n2) Prove that f'(x) = 12 * x^3 - 15 * x^2 - 698 * x - 1784\n  2.1) Use the extensionality principle to show two functions are equal by pointwise checking.\n  2.2) Substitute the function definition for f(x).\n  2.3) Use the linearity of the derivative and the various rules for taking derivatives of sums, differences, products, powers, and constants.\n  2.4) Carry out the necessary algebraic simplification.\n  2.5) Confirm differentiability at every step for each term in f(x).\n3) Prove that f''(x) = 36 * x^2 - 30 * x - 698\n  3.1) Again, start by showing pointwise equality.\n  3.2) Substitute in the expression for f'(x) obtained in the previous step.\n  3.3) Apply the rules for derivatives term by term.\n  3.4) Perform the required algebraic simplification.\n  3.5) Show the differentiability of each term present after differentiation.\n4) Split the final goal into the two components: f'(-4) = 0 and f''(-4) < 0.\n5) Substitute x = -4 into f'(x) and show the result is 0.\n6) Substitute x = -4 into f''(x) and show the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 6 - 4 * x ^ 5 - 3 * x ^ 4 + 2 * x ^ 3 - 85716 * x ^ 2 - 818856 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  24 * x ^ 5 - 20 * x ^ 4 - 12 * x ^ 3 + 6 * x ^ 2 - 171432 * x - 818856 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  120 * x ^ 4 - 80 * x ^ 3 - 36 * x ^ 2 + 12 * x - 171432 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 4x^6 - 4x^5 - 3x^4 + 2x^3 - 85716x^2 - 818856x \\), we want to show that at \\( x=-6 \\) both the first and second derivatives vanish, i.e. \\( f'(-6) = 0 \\) and \\( f''(-6) = 0 \\).\n1) Introduce the hypothesis, namely the explicit formula for \\( f(x) \\).\n2) Show that \\( f'(x) = 24x^5 - 20x^4 - 12x^3 + 6x^2 - 171432x - 818856 \\)\n  2.1) Extend with respect to variable \\( x \\).\n  2.2) Substitute in the definition of \\( f(x) \\).\n  2.3) Apply basic differentiation rules for sums, differences, products, powers, and the constant multiple rule.\n  2.4) Combine like terms and simplify the resulting expression using algebraic techniques.\n  2.5) Confirm differentiability for all terms involved.\n3) Show that \\( f''(x) = 120x^4 - 80x^3 - 36x^2 + 12x - 171432 \\)\n  3.1) Extend with respect to variable \\( x \\).\n  3.2) Substitute in the formula for \\( f'(x) \\) derived just above.\n  3.3) Again, apply all the necessary differentiation rules, focusing on linearity and powers.\n  3.4) Simplify the resulting polynomial algebraically.\n  3.5) Check the differentiability at each step.\n4) Divide the proof into the two required goals: establish first that \\( f'(-6) = 0 \\), and next that \\( f''(-6) = 0 \\).\n5) In the first subgoal, substitute \\( x = -6 \\) into your \\( f'(x) \\) expression and simplify.\n6) In the second subgoal, substitute \\( x = -6 \\) into your \\( f''(x) \\) expression and simplify."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 4 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^2 - 4 * x, we want to prove that it has a minimum at the point x=1. For that, we show that f'(1) = 0 (the first derivative at x=1 is zero) and f''(1) > 0 (the second derivative at x=1 is positive).\n1) Introduce the assumption, which is the definition of the function f.\n2) Show that f'(x) = 4 * x - 4\n  2.1) Extend the equality for arbitrary x\n  2.2) Substitute the explicit form of f into the expression\n  2.3) Use linearity and rules for the derivative (such as product, sum, power, constant)\n  2.4) Collect terms and simplify using algebraic manipulation\n  2.5) Justify differentiability of the expressions as needed\n3) Show that f''(x) = 4\n  3.1) Extend the equality for arbitrary x\n  3.2) Substitute the explicit form of f'(x) you just derived\n  3.3) Use properties of the derivative to differentiate\n  3.4) Simplify the result\n  3.5) Justify differentiability for the current expression\n4) Split into proving both f'(1) = 0 and f''(1) > 0\n5) Substitute the definition of f'(x) at x=1 in the first subgoal, simplify, and check it equals zero\n6) Substitute the definition of f''(x) at x=1 in the second subgoal, simplify, and check it is positive"
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 5 + 3 * x ^ 4 - 3 * x ^ 3 + 12896 * x - 2170 * x ^ 2) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  15 * x ^ 4 + 12 * x ^ 3 - 9 * x ^ 2 + 12896 - 4340 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 3 + 36 * x ^ 2 - 18 * x - 4340 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^5 + 3 * x^4 - 3 * x^3 + 12896 * x - 2170 * x^2, we want to show that it has a stationary point at x=4 and that the second derivative at this point is positive (indicating a local minimum).\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 15 * x^4 + 12 * x^3 - 9 * x^2 + 12896 - 4340 * x\n  2.1) Apply function extensionality to work with the variable x.\n  2.2) Substitute the given function definition for f.\n  2.3) Use differentiation rules to compute the derivative of each term, breaking up sums and differences as needed.\n  2.4) Use algebraic simplification to combine all results into the final form of the first derivative.\n  2.5) Confirm each term in the computation is differentiable at every step.\n3) Show that f''(x) = 60 * x^3 + 36 * x^2 - 18 * x - 4340\n  3.1) Apply function extensionality again for the variable x.\n  3.2) Substitute the form of f'(x) previously found.\n  3.3) Use differentiation rules for polynomials, handling additions and subtractions.\n  3.4) Combine and simplify the resulting algebraic expressions to obtain the second derivative.\n  3.5) Verify differentiability in each computation step for f'(x).\n4) Split the main goal into f'(4) = 0 and f''(4) > 0.\n5) For the first goal, substitute x=4 into your result for f'(x) and show that this evaluates to zero.\n6) For the second goal, substitute x=4 into your result for f''(x) and show that this evaluates to a positive number."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - x ^ 3 - 3 * x ^ 2 ) \u2192 (deriv f (0:\u211d) = 0 \u2227 deriv (deriv f) (0:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 3 * x ^ 2 - 6 * x  := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 6 * x - 6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x\u2074 - x\u00b3 - 3x\u00b2, we want to prove that it has a local maximum at x=0 by showing f'(0) = 0 and f''(0) < 0.\n1) Introduce the hypothesis, i.e., the function definition of f(x).\n2) Show that f'(x) = 4x\u00b3 - 3x\u00b2 - 6x.\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute f(x) with its definition.\n  2.3) Use the rules for differentiation (linearity, subtraction, power rule, and product with constants) to compute the derivative of each term.\n  2.4) Collect like terms and simplify the expression using basic algebra.\n  2.5) Justify the differentiability at each step for the expressions involved.\n3) Show that f''(x) = 12x\u00b2 - 6x - 6.\n  3.1) Extend again with respect to variable x.\n  3.2) Substitute the expression for f'(x) from the previous step.\n  3.3) Use the same differentiation rules term by term to compute the second derivative.\n  3.4) Simplify the resulting expression.\n  3.5) Justify the differentiability of the resulting expressions.\n4) Split the proof into proving f'(0) = 0 and f''(0) < 0.\n5) For f'(0) = 0:\n  5.1) Substitute 0 into the explicit expression found for f'(x).\n  5.2) Simplify to show that it equals zero.\n6) For f''(0) < 0:\n  6.1) Substitute 0 into the explicit expression found for f''(x).\n  6.2) Simplify to show that the value is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + x ^ 5 - 4 * x ^ 4 + x ^ 3 - 26260 * x ^ 2 - 211550 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 5 * x ^ 4 - 16 * x ^ 3 + 3 * x ^ 2 - 52520 * x - 211550 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 20 * x ^ 3 - 48 * x ^ 2 + 6 * x - 52520 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 3x^6 + x^5 - 4x^4 + x^3 - 26260x^2 - 211550x \\), we want to prove that both the first and second derivatives are zero at \\( x = -5 \\), i.e., \\( f'(-5) = 0 \\) and \\( f''(-5) = 0 \\).\n\n1) Introduce the hypothesis, namely the function definition.\n2) Prove that \\( f'(x) = 18x^5 + 5x^4 - 16x^3 + 3x^2 - 52520x - 211550 \\).\n  2.1) Extend with respect to variable \\( x \\).\n  2.2) Substitute the definition of \\( f(x) \\) into the derivative.\n  2.3) Use differentiation rules to compute the derivative of each term and combine them.\n  2.4) Simplify algebraically to get the required expression for \\( f'(x) \\).\n  2.5) Justify the differentiability for all required terms.\n3) Prove that \\( f''(x) = 90x^4 + 20x^3 - 48x^2 + 6x - 52520 \\).\n  3.1) Extend with respect to variable \\( x \\).\n  3.2) Substitute in the previously calculated expression for \\( f'(x) \\).\n  3.3) Apply differentiation rules to \\( f'(x) \\), term by term.\n  3.4) Simplify algebraically to obtain \\( f''(x) \\).\n  3.5) Confirm differentiability for all terms as needed.\n4) Split the goal so that you separately prove \\( f'(-5) = 0 \\) and \\( f''(-5) = 0 \\).\n5) Expand \\( f'(-5) \\) using your result from step 2, simplify and show it equals 0.\n6) Expand \\( f''(-5) \\) using your result from step 3, simplify and show it equals 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 49128 * x - 7677 * x ^ 2) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 49128 - 15354 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 - 15354 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 6 + 49128 * x - 7677 * x ^ 2, we want to prove that it has a minimum at the point x = 4.\nFor that, we have to show f'(4) = 0 (i.e., the first derivative of f(x) at x=4 is 0), and f''(4) > 0 (i.e., the second derivative of f(x) at x=4 is greater than 0).\n1) Introduce the hypothesis, which is the function definition of f.\n2) Show that f'(x) = 12 * x ^ 5 + 49128 - 15354 * x\n  2.1) Extend the function with respect to variable x.\n  2.2) Substitute the definition of f(x).\n  2.3) Apply derivative rules to each term of the function (including handling powers, multiplication, and constants).\n  2.4) Simplify the resulting expression using algebra.\n  2.5) Justify differentiability of f(x).\n3) Show that f''(x) = 60 * x ^ 4 - 15354\n  3.1) Extend with respect to variable x.\n  3.2) Substitute the form of f'(x) just proved.\n  3.3) Apply derivative rules to each term.\n  3.4) Simplify the resulting expression.\n  3.5) Justify differentiability of f'(x).\n4) Split the overall goal into two subgoals: proving f'(4) = 0 and f''(4) > 0.\n5) In the first subgoal, substitute and simplify the expression for f'(4) using the formula for f'(x).\n6) In the second subgoal, substitute and simplify the expression for f''(4) using the formula for f''(x), and verify the required inequality."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 5 + 2 * x ^ 4 - x ^ 3 + 423 * x ^ 2 + 1971 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  10 * x ^ 4 + 8 * x ^ 3 - 3 * x ^ 2 + 846 * x + 1971 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  40 * x ^ 3 + 24 * x ^ 2 - 6 * x + 846 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = 2x^5 + 2x^4 - x^3 + 423x^2 + 1971x \\), we want to prove that both the first and second derivatives vanish at \\( x = -3 \\), i.e., \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\).\n1) Introduce the hypothesis, i.e. the definition of the function \\( f \\).\n2) Show that \\( f'(x) = 10x^4 + 8x^3 - 3x^2 + 846x + 1971 \\).\n  2.1) Extend with respect to \\( x \\).\n  2.2) Expand the function definition for \\( f(x) \\).\n  2.3) Apply derivative rules (such as product, sum, power, and constant rules) to compute the derivative.\n  2.4) Combine like terms and simplify the expression.\n  2.5) Show that \\( f \\) is differentiable as needed for each term.\n3) Show that \\( f''(x) = 40x^3 + 24x^2 - 6x + 846 \\).\n  3.1) Extend with respect to \\( x \\).\n  3.2) Expand the definition of \\( f'(x) \\) that you just derived.\n  3.3) Apply derivative rules as before for each term.\n  3.4) Combine like terms and simplify the final expression.\n  3.5) Show that \\( f'(x) \\) is differentiable as needed for each term.\n4) Split the main goal: show \\( f'(-3) = 0 \\) and \\( f''(-3) = 0 \\).\n5) For the first subgoal, substitute \\( x = -3 \\) into the expression for \\( f'(x) \\) and check that it evaluates to 0.\n6) For the second subgoal, substitute \\( x = -3 \\) into the expression for \\( f''(x) \\) and check that it evaluates to 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 6 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 6 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 2 - 6 * x, we want to show that it has a minimum at the point x=1.\nFor that, we need to prove that f'(1) = 0, i.e., the first derivative of f(x) at x=1 is 0, and f''(1) > 0, i.e., the second derivative of f(x) at x=1 is positive.\n1) Introduce the hypothesis, namely the function definition.\n2) Show that f'(x) = 6 * x - 6.\n  2.1) Extend with respect to variable x.\n  2.2) Substitute in the definition of f(x) from your hypothesis.\n  2.3) Use the properties of derivatives (for sum, difference, constant multiples, powers, and the identity function) to compute the first derivative.\n  2.4) Simplify the resulting algebraic expression for the derivative.\n  2.5) Show the differentiability of each term as needed.\n3) Show that f''(x) = 6.\n  3.1) Extend with respect to variable x.\n  3.2) Substitute in your newly proven form of f'(x).\n  3.3) Use the rules of derivatives (including for linear terms and constants) to compute the second derivative.\n  3.4) Simplify the result.\n  3.5) Demonstrate differentiability as necessary.\n4) Split the statement to prove f'(1) = 0 and f''(1) > 0 separately.\n5) Substitute your result for f'(x) into f'(1) and check that it is 0.\n6) Substitute your result for f''(x) into f''(1) and check that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 12 * x ^ 2 + 48 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 24 * x + 48 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 24 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x^3 + 12x^2 + 48x, we want to show that it has a stationary point at x = -4 such that both the first and second derivatives at this point vanish, i.e., f'(-4) = 0 and f''(-4) = 0.\n\n1) Introduce the hypothesis, which gives the explicit definition of the function f(x).\n2) Show that f'(x) = 3x^2 + 24x + 48.\n  2.1) Extend by introducing a general variable x.\n  2.2) Substitute in the definition of f(x).\n  2.3) Apply theorems for the derivative of sums, constants, powers, and scalar multiplication to expand the derivative.\n  2.4) Simplify the resulting algebraic expression to get the explicit form.\n  2.5) Establish the differentiability of f(x) at every x involved.\n3) Show that f''(x) = 6x + 24.\n  3.1) Extend by introducing a general variable x.\n  3.2) Substitute in the explicit formula for f'(x) obtained above.\n  3.3) Apply derivative rules (for sums, constants, powers, and multiplication) to expand the second derivative.\n  3.4) Simplify the final algebraic expression to the required explicit form.\n  3.5) Establish the differentiability of f'(x) at every x involved.\n4) Split the goal, so you have the two separate claims: f'(-4) = 0 and f''(-4) = 0.\n5) Substitute the value x = -4 into the explicit formula for f'(x) and verify that it equals zero.\n6) Substitute the value x = -4 into the explicit formula for f''(x) and verify that it equals zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 18 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 18 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 2 - 18 * x, we want to prove that it has a minima at the point x=3. \nTo do this, we need to show f'(3) = 0 (the first derivative at x=3 is 0) and f''(3) > 0 (the second derivative at x=3 is positive).\n1) Introduce the hypothesis, namely the definition of the function f(x).\n2) Prove that the first derivative of f(x) satisfies f'(x) = 6 * x - 18.\n  2.1) Make the statement about the form of f'(x).\n  2.2) Rewrite f(x) using the hypothesis.\n  2.3) Use theorems for the derivatives of sums and products to break down the derivative into simpler parts.\n  2.4) Simplify the resulting expression algebraically to obtain the required form.\n  2.5) Confirm differentiability as required for the application of differentiation rules.\n3) Prove that the second derivative of f(x) satisfies f''(x) = 6.\n  3.1) Make the statement about the form of f''(x).\n  3.2) Expand the previous result for f'(x).\n  3.3) Use differentiation rules to differentiate again.\n  3.4) Simplify the result algebraically.\n  3.5) Confirm differentiability conditions as above.\n4) Split the overall goal into two parts: showing f'(3) = 0 and f''(3) > 0.\n5) Substitute the value into the first derivative at x=3 and verify it is zero.\n6) Substitute the value into the second derivative at x=3 and verify it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 42 * x - 31 * x ^ 2) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 42 - 62 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 62 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 4 - 42 * x - 31 * x ^ 2, we want to prove that it has a maximum at the point x = -1. To do this, we must show that f'(-1) = 0 (the first derivative at x = -1 is zero, so the point is stationary) and f''(-1) < 0 (the second derivative at x = -1 is negative, confirming that this critical point is a maximum).\n\n1) Introduce the hypothesis, namely the function definition.\n2) Show that f'(x) = 20 * x ^ 3 - 42 - 62 * x\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the function definition for f.\n  2.3) Apply the appropriate differentiation rules to each term (sum, difference, constant multiple, power rule, etc.).\n  2.4) Simplify and collect like terms to reach the desired formula for the derivative.\n  2.5) Justify the differentiability of f as needed for the steps above.\n3) Show that f''(x) = 60 * x ^ 2 - 62\n  3.1) Extend with respect to x again.\n  3.2) Substitute in your expression for f'(x) from the previous step.\n  3.3) Apply the corresponding differentiation rules term by term.\n  3.4) Simplify the resulting expression to get the formula for the second derivative.\n  3.5) Justify the differentiability of f' as needed.\n4) Split the final goal into its two parts: f'(-1) = 0, and f''(-1) < 0.\n5) For the first part, substitute the formula for f'(x) at x = -1 and simplify to demonstrate it equals zero.\n6) For the second part, substitute the formula for f''(x) at x = -1 and confirm that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 + x ^ 4 - 2 * x ^ 3 - 2343 * x ^ 2 + 20988 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 + 4 * x ^ 3 - 6 * x ^ 2 - 4686 * x + 20988 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 + 12 * x ^ 2 - 12 * x - 4686 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^5 + x^4 - 2x^3 - 2343x^2 + 20988x, we want to prove that it obtains a local maximum at x=6. Specifically, you need to show f'(6) = 0 (the first derivative vanishes at 6) and f''(6) < 0 (the second derivative is negative at 6).\n1) Introduce the hypothesis, i.e., the given definition of the function f.\n2) Prove that the first derivative f'(x) = 5 * x^4 + 4 * x^3 - 6 * x^2 - 4686 * x + 20988\n  2.1) Unfold the definition of f and take the derivative with respect to x.\n  2.2) Apply the relevant rules for the derivative of sums, powers, constants, and scalar multiples.\n  2.3) Simplify the resulting algebraic expression.\n  2.4) Confirm the differentiability for all the individual terms as you proceed.\n3) Prove that the second derivative f''(x) = 20 * x^3 + 12 * x^2 - 12 * x - 4686\n  3.1) Unfold the definition of f'(x) you just established and take its derivative.\n  3.2) Again, use the linearity and rules for derivatives of powers and constants.\n  3.3) Simplify the algebra to get the closed form for the second derivative.\n  3.4) Confirm differentiability for all the terms present.\n4) Split your goal into its two statements: show both f'(6) = 0 and f''(6) < 0.\n5) For f'(6), substitute x = 6 into your explicit formula for the first derivative and show, after calculation, that it equals zero.\n6) For f''(6), substitute x = 6 into your formula for the second derivative, and check by explicit evaluation that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - 46873 * x ^ 2 + 374980 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 93746 * x + 374980 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 93746 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x ^ 6 - 46873 * x ^ 2 + 374980 * x, we want to show that it has a minima at the point x=5.\nSpecifically, we want to prove f'(5) = 0 (the first derivative at x=5 is zero), and that f''(5) > 0 (the second derivative at x=5 is positive).\n\n1) Introduce the hypothesis, which is the definition of the function.\n2) Prove that f'(x) = 30 * x ^ 5 - 93746 * x + 374980\n  2.1) Extend by introducing variable x.\n  2.2) Rewrite f(x) using the given definition.\n  2.3) Apply the rules for taking derivatives of sums, differences, products, powers, and constants.\n  2.4) Simplify the result algebraically to obtain the form above.\n  2.5) Confirm the differentiability of each term in f(x).\n3) Prove that f''(x) = 150 * x ^ 4 - 93746\n  3.1) Extend by introducing variable x.\n  3.2) Use the result for f'(x) from the previous step.\n  3.3) Apply the derivative rules to f'(x) (sum, difference, product, power, constant).\n  3.4) Simplify the algebra to reach the desired form.\n  3.5) Confirm the differentiability of each term in f'(x).\n4) Split the goal into two: f'(5) = 0 and f''(5) > 0\n5) Substitute x=5 into the formula for f'(x) and show this equals zero.\n6) Substitute x=5 into the formula for f''(x) and show this is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 5 - 2 * x ^ 3 - 68 * x ^ 2 + 216 * x) \u2192 (deriv f (2:\u211d) = 0 \u2227 deriv (deriv f) (2:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  5 * x ^ 4 - 6 * x ^ 2 - 136 * x + 216 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  20 * x ^ 3 - 12 * x - 136 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function \\( f(x) = x^5 - 2x^3 - 68x^2 + 216x \\), we want to show that both the first and second derivatives vanish at \\( x = 2 \\), i.e., \\( f'(2) = 0 \\) and \\( f''(2) = 0 \\).\n1) Introduce the assumption, namely the explicit function definition for \\( f \\).\n2) Show that \\( f'(x) = 5x^4 - 6x^2 - 136x + 216 \\).\n  2.1) Express that the equality should hold for all \\( x \\), by extending with respect to \\( x \\).\n  2.2) Substitute the function definition into the goal.\n  2.3) Use the rules for differentiating sums, differences, constant multiples, and powers to compute the derivative step by step.\n  2.4) Simplify the resulting expression to match the claimed form of the derivative.\n  2.5) Argue that all terms involved are differentiable at each step.\n3) Show that \\( f''(x) = 20x^3 - 12x - 136 \\).\n  3.1) Again, express that the equality should hold for all \\( x \\).\n  3.2) Substitute the formula for \\( f'(x) \\) obtained earlier.\n  3.3) Use differentiation rules to obtain the second derivative, carefully applying the rules for each term.\n  3.4) Simplify to obtain the claimed formula for \\( f''(x) \\).\n  3.5) Show that all terms differentiated are differentiable.\n4) Split the goal into its two parts: \\( f'(2) = 0 \\) and \\( f''(2) = 0 \\).\n5) Substitute the explicit expression for \\( f'(x) \\) to compute \\( f'(2) \\) and show it vanishes.\n6) Substitute the explicit expression for \\( f''(x) \\) to compute \\( f''(2) \\) and show it vanishes."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 - 6924 * x - 865 * x ^ 2) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 - 6924 - 1730 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 - 1730 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 4 x^4 - 6924 x - 865 x^2 \\), we want to prove that it has a local maximum at the point \\( x = -6 \\). To do this, we need to show \\( f'(-6) = 0 \\) and \\( f''(-6) < 0 \\).\n1) Introduce the function definition as a hypothesis.\n2) Show that \\( f'(x) = 16 x^3 - 6924 - 1730 x \\).\n  2.1) Expand with respect to the variable \\( x \\).\n  2.2) Substitute the definition of \\( f \\).\n  2.3) Use rules for the derivative of sums and differences.\n  2.4) Compute the derivatives of each term: power rule and constant multiple rule.\n  2.5) Combine and simplify the expressions to get the final form.\n  2.6) Confirm the differentiability for each separate part.\n3) Show that \\( f''(x) = 48 x^2 - 1730 \\).\n  3.1) Expand with respect to the variable \\( x \\).\n  3.2) Substitute the formula for \\( f'(x) \\) from the previous step.\n  3.3) Use sum and difference derivative rules as before.\n  3.4) Apply the power rule and constant multiple rule as applicable to each term.\n  3.5) Combine and simplify the results.\n  3.6) Justify the differentiability of each term in \\( f'(x) \\).\n4) Split the proof to show \\( f'(-6) = 0 \\) and \\( f''(-6) < 0 \\) separately.\n5) Expand the definition and evaluate \\( f'(-6) \\) to show it equals 0.\n6) Expand the definition and evaluate \\( f''(-6) \\) to show it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 + 34 * x - 27 * x ^ 2) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 + 34 - 54 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 54 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x^4 + 34 * x - 27 * x^2, we want to show it has a critical point at x = 1, and that it is a local minimum there (i.e., f'(1) = 0 and f''(1) > 0).\n1) Introduce the given function definition as a hypothesis.\n2) Show that the first derivative f'(x) = 20 * x^3 + 34 - 54 * x.\n  2.1) State the goal for the derivative as a function of x.\n  2.2) Substitute the function definition into your work.\n  2.3) Use derivative rules (such as sum, subtraction, constant multiple, and power rules) to expand the calculation.\n  2.4) Simplify and combine like terms where needed.\n  2.5) Confirm the differentiability of each component.\n3) Show that the second derivative f''(x) = 60 * x^2 - 54.\n  3.1) State the goal for the derivative of f'(x).\n  3.2) Substitute the result from the previous step.\n  3.3) Use derivative rules systematically to expand and compute.\n  3.4) Simplify the resulting expression.\n  3.5) Confirm the differentiability at each step.\n4) Split the main goal into two parts: proving f'(1) = 0 and f''(1) > 0.\n5) Substitute x = 1 into the formula for f'(x) and show that it equals zero.\n6) Substitute x = 1 into the formula for f''(x) and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 - 2 * x ^ 5 + x ^ 4 - 5 * x ^ 3 - 1855 * x ^ 2 - 8619 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 - 10 * x ^ 4 + 4 * x ^ 3 - 15 * x ^ 2 - 3710 * x - 8619 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 - 40 * x ^ 3 + 12 * x ^ 2 - 30 * x - 3710 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 6 - 2 * x ^ 5 + x ^ 4 - 5 * x ^ 3 - 1855 * x ^ 2 - 8619 * x, we want to show that it has a local maximum at the point x = -3.\nTo do this, we need to show that f'(-3) = 0 (that is, the first derivative at x = -3 is zero) and f''(-3) < 0 (the second derivative at x = -3 is negative).\n\n1) Introduce the hypothesis, i.e., the definition of the function.\n2) Show that f'(x) = 6 * x ^ 5 - 10 * x ^ 4 + 4 * x ^ 3 - 15 * x ^ 2 - 3710 * x - 8619.\n  2.1) Perform functional extensionality with respect to x.\n  2.2) Substitute the function definition for f.\n  2.3) Apply the rules for the derivatives of sums, differences, powers, and scalar multiples.\n  2.4) Use algebraic manipulation to combine terms and obtain the simplified expression for the derivative.\n  2.5) Verify that each term is differentiable.\n3) Show that f''(x) = 30 * x ^ 4 - 40 * x ^ 3 + 12 * x ^ 2 - 30 * x - 3710.\n  3.1) Perform functional extensionality with respect to x.\n  3.2) Substitute f'(x) by the expression obtained above.\n  3.3) Apply the rules for differentiation as in step 2 (linearity, power rule, constant multiples).\n  3.4) Simplify the resulting expression algebraically.\n  3.5) Check the differentiability of the resulting terms.\n4) Split the goal into two parts: proving f'(-3) = 0 and f''(-3) < 0.\n5) Substitute the explicit formula for f'(x), evaluate at x = -3, and verify that the value is zero.\n6) Substitute the explicit formula for f''(x), evaluate at x = -3, and verify that the value is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 4 * x ^ 5 - 23752 * x ^ 2 + 187520 * x) \u2192 (deriv f (5:\u211d) = 0 \u2227 deriv (deriv f) (5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 20 * x ^ 4 - 47504 * x + 187520 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 80 * x ^ 3 - 47504 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 6 + 4 * x ^ 5 - 23752 * x ^ 2 + 187520 * x, we want to show that it has a local maximum at the point x=5. \nTo do so, we show that f'(5) = 0 (the first derivative at x=5 is zero) and f''(5) < 0 (the second derivative at x=5 is negative).\n\n1) Introduce the hypothesis, i.e., the given function definition for f(x).\n2) Show that f'(x) = 12 * x ^ 5 + 20 * x ^ 4 - 47504 * x + 187520\n  2.1) Use function extensionality to argue for equality of derivatives as functions in x.\n  2.2) Substitute the definition of f(x) into the derivative.\n  2.3) Apply derivative rules and theorems to each term of the polynomial (product, sum, power, constant, etc.).\n  2.4) Collect terms, reorganize, and simplify the algebraic expression until you reach the stated form.\n  2.5) Confirm differentiability of each term and composition.\n3) Show that f''(x) = 60 * x ^ 4 + 80 * x ^ 3 - 47504\n  3.1) Use function extensionality again for functions in x.\n  3.2) Substitute the result for f'(x) you just computed.\n  3.3) Apply the rules for differentiating polynomials and sums again to compute the second derivative.\n  3.4) Collect terms and reorganize to reach the required form.\n  3.5) Confirm differentiability of each component in f'(x).\n4) Split the main goal into two subgoals: f'(5) = 0 and f''(5) < 0.\n5) Substitute the explicit form of f'(x) at x=5 and use arithmetic to check that f'(5) = 0.\n6) Substitute the explicit form of f''(x) at x=5 and use arithmetic to check that f''(5) < 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 2 - 24 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^2 - 24 * x, we want to show that it has a minimum at the point x=4. That is, we need to check f'(4) = 0 (the first derivative vanishes at x=4), and f''(4) > 0 (the second derivative is positive at x=4).\n1) Introduce the hypothesis, which is the definition of the function f.\n2) Show that f'(x) = 6 * x - 24:\n  2.1) Apply function extensionality with respect to x.\n  2.2) Unfold the definition of f in the hypothesis.\n  2.3) Use the properties of the derivative, including the rules for constant multiples, sums, and powers, to compute the derivative of each relevant term.\n  2.4) Use algebraic simplifications to combine like terms.\n  2.5) Argue that f is everywhere differentiable to justify using derivative rules.\n3) Show that f''(x) = 6:\n  3.1) Apply function extensionality with respect to x.\n  3.2) Substitute the previously found formula for f'(x).\n  3.3) Use derivative rules to compute the derivative.\n  3.4) Simplify to reach the constant result.\n  3.5) Argue differentiability as needed.\n4) Split the goal, so you separately prove f'(4) = 0 and f''(4) > 0.\n5) Unfold and simplify f'(4) to show that it is zero.\n6) Unfold and simplify f''(4), and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 + 4 * x ^ 5 - 28080 * x ^ 2 + 264384 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 + 20 * x ^ 4 - 56160 * x + 264384 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 + 80 * x ^ 3 - 56160 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x^6 + 4 * x^5 - 28080 * x^2 + 264384 * x, we want to show that both the first and second derivatives vanish at x = 6; that is, f'(6) = 0 and f''(6) = 0.\n\n1) Introduce the given hypothesis (the definition of f).\n2) Show that f'(x) = 6 * x^5 + 20 * x^4 - 56160 * x + 264384.\n  2.1) Extend the proof with respect to variable x.\n  2.2) Substitute the hypothesis to expand the definition of f.\n  2.3) Break down the computation of the derivative of each term by applying general derivative rules, such as sum, product, and constant rules.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Show that each term in f is differentiable.\n3) Show that f''(x) = 30 * x^4 + 80 * x^3 - 56160.\n  3.1) Extend the proof with respect to variable x.\n  3.2) Expand the definition using the previously proven formula for f'(x).\n  3.3) Use rules for differentiating sums and products and compute the derivative term-by-term.\n  3.4) Simplify the algebraic result for f''(x).\n  3.5) Show that each term in f'(x) is differentiable.\n4) Split the goal into its two parts: show f'(6) = 0 and f''(6) = 0.\n5) For the f'(6) goal, expand f'(6) using the formula you derived and simplify.\n6) For the f''(6) goal, expand f''(6) using the formula you derived and simplify."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 + 4 * x ^ 3 - 576 * x ^ 2 - 4752 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 + 12 * x ^ 2 - 1152 * x - 4752 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 + 24 * x - 1152 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 3 * x^4 + 4 * x^3 - 576 * x^2 - 4752 * x, we want to show that both the first and second derivatives vanish at x = -6: that is, f'(-6) = 0 and f''(-6) = 0.\n\n1) Introduce the hypothesis, namely the function definition.\n2) Show that f'(x) = 12 * x^3 + 12 * x^2 - 1152 * x - 4752.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition using your hypothesis.\n  2.3) Apply differentiation properties to calculate the derivative.\n  2.4) Simplify the resulting algebraic expression to get the explicit form for f'(x).\n  2.5) Justify differentiability of each term in f(x).\n3) Show that f''(x) = 36 * x^2 + 24 * x - 1152.\n  3.1) Extend with respect to the variable x.\n  3.2) Replace f' with your previous result and expand this expression.\n  3.3) Apply the relevant differentiation rules to each term.\n  3.4) Simplify the resulting algebraic expression to the explicit form for f''(x).\n  3.5) Justify differentiability of each term in f'(x).\n4) Split the goal into two parts: (a) f'(-6) = 0 and (b) f''(-6) = 0.\n5) In the first goal, substitute x = -6 into your formula for f'(x) and verify that it equals 0.\n6) In the second goal, substitute x = -6 into your formula for f''(x) and verify that it equals 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 4 - 3 * x ^ 3 - 351 * x ^ 2 + 1928 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  16 * x ^ 3 - 9 * x ^ 2 - 702 * x + 1928 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  48 * x ^ 2 - 18 * x - 702 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 4 - 3 * x ^ 3 - 351 * x ^ 2 + 1928 * x, we want to prove that it has a maximum at the point x=4. Specifically, we want to show that f'(4) = 0 (the first derivative at x=4 is zero), and f''(4) < 0 (the second derivative at x=4 is negative).\n1) Introduce the hypothesis, i.e., the provided definition of the function.\n2) Show that f'(x) = 16 * x ^ 3 - 9 * x ^ 2 - 702 * x + 1928\n  2.1) Apply function extensionality with respect to x.\n  2.2) Substitute the definition of f(x).\n  2.3) Use the relevant theorems for computing the derivative of sums, differences, and products with constants and powers.\n  2.4) Perform the necessary algebraic simplification.\n  2.5) Confirm differentiability of each component function used.\n3) Show that f''(x) = 48 * x ^ 2 - 18 * x - 702\n  3.1) Apply function extensionality with respect to x.\n  3.2) Substitute the formula for f'(x) proven earlier.\n  3.3) Use theorems for the derivative of sums, differences, constants, powers, and products, as needed.\n  3.4) Simplify algebraically.\n  3.5) Confirm differentiability of each component function in f'(x).\n4) Split the overall claim into its two parts: f'(4) = 0 and f''(4) < 0.\n5) For the first part, substitute the formula for f'(x) at x=4 and verify that it equals zero.\n6) For the second part, substitute the formula for f''(x) at x=4 and verify that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 4 - 3 * x ^ 3 - 242 * x ^ 2 + 993 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 3 - 9 * x ^ 2 - 484 * x + 993 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 2 - 18 * x - 484 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 5 * x^4 - 3 * x^3 - 242 * x^2 + 993 * x, we want to show that it has a minimum at the point x = 3. Specifically, we seek to prove that f'(3) = 0 (the first derivative at x=3 vanishes) and f''(3) > 0 (the second derivative at x=3 is positive).\n1) Introduce the hypothesis, namely the definition of the function f.\n2) Show that f'(x) = 20 * x^3 - 9 * x^2 - 484 * x + 993\n  2.1) State the goal for the derivative of f, for all x.\n  2.2) Expand the definition of f in terms of x.\n  2.3) Apply derivative rules for sums, differences, and each polynomial term to compute the derivative.\n  2.4) Simplify the resulting expression to the desired form.\n  2.5) Justify the differentiability of each term and thus of f.\n3) Show that f''(x) = 60 * x^2 - 18 * x - 484\n  3.1) State the goal for the derivative of f', for all x.\n  3.2) Substitute your result for f' from the previous step.\n  3.3) Apply derivative rules again for sum, difference, and polynomial terms to compute this derivative.\n  3.4) Combine and simplify the terms to match the desired form.\n  3.5) Justify the differentiability of f'.\n4) Now split the goal into proving f'(3) = 0 and f''(3) > 0.\n5) Substitute x=3 into your formula for f'(x), and show it evaluates to zero.\n6) Substitute x=3 into your formula for f''(x), and show it evaluates to a positive number."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  5 * x ^ 6 - x ^ 5 + 2 * x ^ 4 + 4 * x ^ 3 - 18797 * x ^ 2 + 120232 * x) \u2192 (deriv f (4:\u211d) = 0 \u2227 deriv (deriv f) (4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  30 * x ^ 5 - 5 * x ^ 4 + 8 * x ^ 3 + 12 * x ^ 2 - 37594 * x + 120232 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  150 * x ^ 4 - 20 * x ^ 3 + 24 * x ^ 2 + 24 * x - 37594 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 5x^6 - x^5 + 2x^4 + 4x^3 - 18797x^2 + 120232x \\), we are to show that \\( f'(4) = 0 \\) and \\( f''(4) > 0 \\), establishing a local minimum at \\( x = 4 \\).\n\n1) Introduce the hypothesis, specifically the definition of \\( f \\).\n2) Show that \\( f'(x) = 30x^5 - 5x^4 + 8x^3 + 12x^2 - 37594x + 120232 \\).\n  2.1) State this as an intermediate result to use later.\n  2.2) Use function extensionality to reduce the goal to proving the derivatives are equal at every \\( x \\).\n  2.3) Expand out the definition of \\( f(x) \\) using your assumption.\n  2.4) Apply derivative rules (sum, difference, product, power rules, etc.) step by step to each term.\n  2.5) Collect like terms algebraically to finish showing the derivatives match.\n  2.6) Prove or assert differentiability of each function as required by the chain of rules\u2014this is reflected in supplying differentiability facts for each summand.\n3) Show that \\( f''(x) = 150x^4 - 20x^3 + 24x^2 + 24x - 37594 \\).\n  3.1) State this as an intermediate result for later use.\n  3.2) Use function extensionality to reduce the goal for derivatives to equality at each \\( x \\).\n  3.3) Expand the expression for \\( f'(x) \\) established in step 2.\n  3.4) Apply derivative rules term by term.\n  3.5) Again, collect algebraic terms to match the claimed formula.\n  3.6) Prove differentiability for each term as needed.\n4) Split the goal: \\( f'(4) = 0 \\) and \\( f''(4) > 0 \\).\n5) In the first goal, expand \\( f'(4) \\) using your explicit formula from step 2 and confirm it simplifies to 0.\n6) In the second goal, expand \\( f''(4) \\) using your explicit formula from step 3 and confirm the result is positive, completing the proof."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 - 2 * x ^ 4 + x ^ 3 + 373 * x ^ 2 + 1096 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 - 8 * x ^ 3 + 3 * x ^ 2 + 746 * x + 1096 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 - 24 * x ^ 2 + 6 * x + 746 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x^5 - 2 * x^4 + x^3 + 373 * x^2 + 1096 * x, we want to prove that it has a maximum at the point x = -2.  \nFor this, we need to show that f'(-2) = 0 (the first derivative at x = -2 is zero, a stationary point), and f''(-2) < 0 (the second derivative at x = -2 is negative, so it is a local maximum).\n1) Introduce the hypothesis, which is the definition of the function f.\n2) Show that f'(x) = 20 * x^4 - 8 * x^3 + 3 * x^2 + 746 * x + 1096\n  2.1) State the goal for the derivative of f as a function of x.\n  2.2) Expand the definition of f as given by the hypothesis.\n  2.3) Apply derivative rules for sums, differences, constant multiples, and powers to compute the derivative term by term.\n  2.4) Use algebraic manipulation to combine like terms and produce the stated expression for the first derivative.\n  2.5) Justify differentiability of each term.\n3) Show that f''(x) = 80 * x^3 - 24 * x^2 + 6 * x + 746\n  3.1) State the goal for the derivative of f' as a function of x.\n  3.2) Expand the formula for f' and apply differentiation to each term.\n  3.3) Use rules for differentiation (power, sum, multiple, constant) step by step.\n  3.4) Use algebra to simplify and match the target expression.\n  3.5) Confirm differentiability of all terms involved.\n4) Split the overall target into two: f'(-2) = 0 and f''(-2) < 0.\n5) Substitute x = -2 into the formula for f' and show the resulting calculation yields zero.\n6) Substitute x = -2 into f'' and show the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 6 + 2 * x ^ 4 - 5 * x ^ 3 - 2504 * x - 801 * x ^ 2) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  18 * x ^ 5 + 8 * x ^ 3 - 15 * x ^ 2 - 2504 - 1602 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  90 * x ^ 4 + 24 * x ^ 2 - 30 * x - 1602 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^6 + 2 * x^4 - 5 * x^3 - 2504 * x - 801 * x^2, we want to prove that it has a local maxima at x = -2. This means we need to show that the first derivative at x = -2 is zero, and the second derivative at x = -2 is negative.\n\n1) Introduce the hypothesis, i.e., assume the function definition for f.\n2) Show that f'(x) = 18 * x^5 + 8 * x^3 - 15 * x^2 - 2504 - 1602 * x.\n   2.1) State that you will prove this equality by extending with respect to x.\n   2.2) Substitute in the given function definition for f.\n   2.3) Apply derivative theorems and properties (sum, difference, power rule, constant multiple, etc.) to compute the derivative term by term.\n   2.4) Combine and simplify the resulting terms using algebra.\n   2.5) Verify the differentiability for each term as you differentiate.\n3) Show that f''(x) = 90 * x^4 + 24 * x^2 - 30 * x - 1602.\n   3.1) State that you will prove this equality by extending with respect to x for f'.\n   3.2) Substitute in your formula for f'(x) from step 2.\n   3.3) Apply derivative properties again to find the second derivative term by term.\n   3.4) Combine and simplify the resulting terms via algebra.\n   3.5) Show differentiability for each of the involved terms.\n4) Split the overall goal into two subgoals: (a) f'(-2) = 0 and (b) f''(-2) < 0.\n5) For the first subgoal, substitute the value x = -2 into your formula for f', and simplify the expression to confirm it equals 0.\n6) For the second subgoal, substitute x = -2 into your formula for f'', simplify, and show the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 - 9 * x ^ 2 + 27 * x) \u2192 (deriv f (3:\u211d) = 0 \u2227 deriv (deriv f) (3:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 - 18 * x + 27 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x - 18 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x^3 - 9 * x^2 + 27 * x, we want to show that f\u2032(3) = 0 and f\u2032\u2032(3) = 0.\n1) Introduce the hypothesis, i.e. supply the definition of the function as an assumption.\n2) Prove that f\u2032(x) = 3 * x^2 - 18 * x + 27.\n  2.1) Extend with respect to the variable x.\n  2.2) Substitute the given function definition for f.\n  2.3) Apply basic properties of derivatives to each term in the function.\n  2.4) Group terms and simplify the result.\n  2.5) Justify that the original function is differentiable as required for the use of derivative rules.\n3) Prove that f\u2032\u2032(x) = 6 * x - 18.\n  3.1) Extend with respect to the variable x.\n  3.2) Substitute the expression for f\u2032(x) that was just proved.\n  3.3) Apply rules for computing the derivative (sum, difference, constant multiple, power, etc.).\n  3.4) Simplify the resulting expression.\n  3.5) Justify the required differentiability of f\u2032(x).\n4) Split the goal into two parts: f\u2032(3) = 0 and f\u2032\u2032(3) = 0.\n5) For the first goal, substitute f\u2032(3) using the result of step 2 and simplify.\n6) For the second goal, substitute f\u2032\u2032(3) using the result of step 3 and simplify."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 - 7 * x ^ 2 + 10 * x) \u2192 (deriv f (1:\u211d) = 0 \u2227 deriv (deriv f) (1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 - 14 * x + 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 - 14 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^4 - 7x^2 + 10x, we want to prove that it has a local maximum at the point x=1. For that, we need to show that f'(1) = 0 (the first derivative at x=1 vanishes), and f''(1) < 0 (the second derivative at x=1 is negative).\n\n1) Introduce the hypothesis, i.e., the definition of the function f.\n2) Show that f'(x) = 4x^3 - 14x + 10.\n  2.1) Extend the definition with respect to x.\n  2.2) Substitute the function definition for f.\n  2.3) Use derivative rules to differentiate each term.\n  2.4) Collect like terms and simplify the result.\n  2.5) Establish the differentiability of f.\n3) Show that f''(x) = 12x^2 - 14.\n  3.1) Extend the definition with respect to x.\n  3.2) Substitute the form of f'(x) previously proved.\n  3.3) Use derivative rules to compute the derivative of each term.\n  3.4) Combine terms and simplify.\n  3.5) Establish the differentiability of f'.\n4) Split the final goal into its components: show f'(1)=0 and f''(1)<0.\n5) Substitute x=1 into the expression for f'(x), expand, and verify it equals 0.\n6) Substitute x=1 into the expression for f''(x), expand, and verify it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^2 - 24 * x, we want to prove that it has a minimum at the point x=6.\nFor this, we must show that f'(6) = 0 (i.e., the first derivative of f(x) at x=6 is 0) and f''(6) > 0 (i.e., the second derivative of f(x) at x=6 is positive).\n1) Introduce the hypothesis, specifically the definition of the function f.\n2) Show that f'(x) = 4 * x - 24.\n  2.1) Apply functional extensionality to reduce to proving equality for all x.\n  2.2) Expand the definition of f(x) using the given hypothesis.\n  2.3) Apply derivative computation rules to each term.\n  2.4) Combine and simplify the resulting expressions algebraically.\n  2.5) Justify the differentiability of the relevant components.\n3) Show that f''(x) = 4.\n  3.1) Apply functional extensionality again for the derivative of the first derivative.\n  3.2) Expand using your previous result for f'(x).\n  3.3) Apply derivative rules for the resulting terms.\n  3.4) Combine and simplify to obtain a constant function.\n  3.5) Justify differentiability of the terms in f'(x).\n4) Split the final goal into the two required parts: proving f'(6) = 0 and f''(6) > 0.\n5) Substitute the explicit form of f'(x) at x=6 and verify the equation holds.\n6) Substitute f''(x) at x=6 and show it is greater than zero."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 44 * x ^ 2 + 215 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 88 * x + 215 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 88 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 3x^3 + 44x^2 + 215x \\), we want to prove that it has a maximum at the point \\( x = -5 \\).  \nFor that we have to show \\( f'(-5) = 0 \\), i.e., the first derivative of \\( f(x) \\) at \\( x = -5 \\) is 0, and \\( f''(-5) < 0 \\), i.e., the second derivative of \\( f(x) \\) at \\( x = -5 \\) is less than 0.\n\n1) Introduce the hypothesis, in this case the definition of the function.\n2) Show that \\( f'(x) = 9x^2 + 88x + 215 \\).\n  2.1) Extend with respect to the variable \\( x \\).\n  2.2) Expand the function definition in terms of \\( x \\).\n  2.3) Apply rules for differentiating sums and each term (for example, derivatives of powers, constants, and multiples).\n  2.4) Combine and simplify the algebraic expression to get the claimed formula for \\( f'(x) \\).\n  2.5) Show the differentiability of each component to justify the calculation.\n3) Show that \\( f''(x) = 18x + 88 \\).\n  3.1) Extend with respect to the variable \\( x \\).\n  3.2) Expand the definition of \\( f'(x) \\) that you just proved.\n  3.3) Use the rules for differentiating sums and each term (as before).\n  3.4) Combine and simplify to confirm the claimed formula for the second derivative.\n  3.5) Establish differentiability for each component.\n4) Split the goal into its components: showing \\( f'(-5) = 0 \\) and \\( f''(-5) < 0 \\).\n5) Substitute and simplify the definition of \\( f'(-5) \\), verifying that it is zero.\n6) Substitute and simplify the definition of \\( f''(-5) \\), verifying that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 4 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 + 4 * x, we want to prove that it has a minimum at the point x = -2.\nFor that, we have to show that f'(-2) = 0 (i.e., the first derivative of f(x) at x = -2 is 0) and f''(-2) > 0 (i.e., the second derivative of f(x) at x = -2 is greater than 0).\n\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 2 * x + 4.\n  2.1) Work by extending with respect to variable x.\n  2.2) Substitute the explicit function definition.\n  2.3) Apply derivative rules to each term to compute the derivative.\n  2.4) Simplify the resulting algebraic expressions.\n  2.5) Prove differentiability of f(x) as you carry out the computation.\n3) Show that f''(x) = 2.\n  3.1) Work by extending with respect to variable x.\n  3.2) Substitute the expression for f'(x) you just derived.\n  3.3) Apply the derivative rules for the sum and for each term.\n  3.4) Simplify the algebra to confirm the result.\n  3.5) Prove differentiability of f'(x) as you carry out the computation.\n4) Split the current goal into its two parts: f'(-2) = 0 and f''(-2) > 0.\n5) Substitute the formula for f'(-2) and show that it equals 0.\n6) Substitute the formula for f''(-2) and show that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 6 - 24576 * x - 3840 * x ^ 2) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  6 * x ^ 5 - 24576 - 7680 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  30 * x ^ 4 - 7680 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = x^6 - 24576 * x - 3840 * x^2, we want to prove that at the point x = -4, both the first and second derivatives of f vanish, i.e., f'(-4) = 0 and f''(-4) = 0.\n1) Introduce the hypothesis, namely the definition of the function.\n2) Show that the first derivative is f'(x) = 6 * x^5 - 24576 - 7680 * x.\n  2.1) State that you will prove the expression for the derivative for any x.\n  2.2) Substitute the definition of f into the expression for the derivative.\n  2.3) Step through the sum and difference rule for derivatives.\n  2.4) Apply the rules for differentiating powers and constant multiples.\n  2.5) Use the differentiability of each summand to justify the steps.\n  2.6) Collect like terms and simplify the algebraic expression.\n3) Show that the second derivative is f''(x) = 30 * x^4 - 7680.\n  3.1) State that you will prove the expression for the second derivative for any x.\n  3.2) Substitute your previous expression for f'(x) into the derivative.\n  3.3) Apply the sum, difference, and constant multiple derivative rules.\n  3.4) Use the rules for the derivative of powers and constants.\n  3.5) Justify the differentiability of each term.\n  3.6) Collect and simplify the terms.\n4) Break your goal into proving f'(-4) = 0 and f''(-4) = 0.\n5) Substitute x = -4 into your explicit f'(x) expression and simplify to verify the equation.\n6) Substitute x = -4 into your explicit f''(x) expression and simplify to verify the equation."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 4 + x ^ 3 - 97 * x ^ 2 - 393 * x) \u2192 (deriv f (-3:\u211d) = 0 \u2227 deriv (deriv f) (-3:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  8 * x ^ 3 + 3 * x ^ 2 - 194 * x - 393 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  24 * x ^ 2 + 6 * x - 194 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x^4 + x^3 - 97 * x^2 - 393 * x, we want to prove that it has a minima at the point x = -3. To do so, we need to show that the first derivative at x = -3 is zero (f'(-3) = 0), and that the second derivative at x = -3 is positive (f''(-3) > 0).\n\n1) Introduce the hypothesis, that is, the function definition.\n2) Show that f'(x) = 8 * x^3 + 3 * x^2 - 194 * x - 393\n  2.1) Extend the proof by considering an arbitrary x.\n  2.2) Substitute the function definition for f.\n  2.3) Use properties of derivatives (linearity, product, chain rule as required) to compute the derivative.\n  2.4) Simplify and collect like terms in the result.\n  2.5) Justify the differentiability of each term.\n3) Show that f''(x) = 24 * x^2 + 6 * x - 194\n  3.1) Extend the proof by considering an arbitrary x for the second derivative.\n  3.2) Substitute the explicit form of f'(x) previously computed.\n  3.3) Use properties of derivatives to compute the derivative of f'(x).\n  3.4) Simplify and collect terms in the result.\n  3.5) Justify the differentiability of each term in f'(x).\n4) Split the overall goal into two statements: f'(-3) = 0 and f''(-3) > 0.\n5) Substitute -3 into the formula for f'(x) and verify that it equals 0.\n6) Substitute -3 into the formula for f''(x) and verify that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 3 + 19 * x ^ 2 + 120 * x) \u2192 (deriv f (-6:\u211d) = 0 \u2227 deriv (deriv f) (-6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  3 * x ^ 2 + 38 * x + 120 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  6 * x + 38 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 3 + 19 * x ^ 2 + 120 * x, we want to prove that it has a minimum at the point x = -6.\nFor this, we need to show f'(-6) = 0 (the first derivative of f at x = -6 is zero) and f''(-6) > 0 (the second derivative of f at x = -6 is positive).\n\n1) Introduce the hypothesis, i.e., the function definition.\n2) Show that f'(x) = 3 * x ^ 2 + 38 * x + 120.\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the definition of f.\n  2.3) Apply the rules for differentiating sums, powers, and scalar multiples to compute the derivative.\n  2.4) Combine like terms to simplify and confirm the expression for the first derivative.\n  2.5) Justify that f is differentiable everywhere.\n3) Show that f''(x) = 6 * x + 38.\n  3.1) Extend with respect to variable x.\n  3.2) Use your previous result for f'(x).\n  3.3) Differentiate each term in f'(x) using the standard rules for derivatives.\n  3.4) Combine terms to obtain the formula for the second derivative.\n  3.5) Check differentiability for f'.\n4) Split the goal into the two required statements: f'(-6) = 0 and f''(-6) > 0.\n5) Substitute the expression for f'(x) at x = -6, and show the result is zero.\n6) Substitute the expression for f''(x) at x = -6, and show the result is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 4 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 4 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x ^ 2 + 4 * x, we want to prove that it has a minimum at the point x = -2.\nFor that we have to show f'(-2) = 0, i.e., the first derivative of f(x) at x = -2 is 0, and f''(-2) > 0, i.e., the second derivative of f(x) at x = -2 is greater than 0.\n1) Introduce the hypothesis, in this case the function definition.\n2) Show that f'(x) = 2 * x + 4.\n  2.1) Extend with respect to the variable x.\n  2.2) Expand the function definition.\n  2.3) Apply derivative theorems to calculate the derivative of each term.\n  2.4) Combine the results and simplify the algebra to obtain the desired expression.\n  2.5) Establish the differentiability of f(x).\n3) Show that f''(x) = 2.\n  3.1) Extend with respect to the variable x.\n  3.2) Expand the definition of f'(x) that you just proved.\n  3.3) Apply derivative theorems to calculate the derivative.\n  3.4) Simplify the algebra to obtain the constant value.\n  3.5) Establish the differentiability of f'(x).\n4) Split the current goal into its parts: showing f'(-2) = 0 and f''(-2) > 0.\n5) Substitute in the definition of f'(x) at x = -2, and show that it is 0.\n6) Substitute in the definition of f''(x) at x = -2, and show that it is greater than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 6 + 3 * x ^ 4 - 3 * x ^ 3 - 39471 * x ^ 2 + 378072 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 5 + 12 * x ^ 3 - 9 * x ^ 2 - 78942 * x + 378072 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  60 * x ^ 4 + 36 * x ^ 2 - 18 * x - 78942 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function \\( f(x) = 2x^6 + 3x^4 - 3x^3 - 39471x^2 + 378072x \\), we want to prove that it has a local minimum at \\( x = 6 \\). Specifically, we need to show that \\( f'(6) = 0 \\) (the first derivative at \\( x=6 \\) is zero) and \\( f''(6) > 0 \\) (the second derivative at \\( x=6 \\) is positive).\n\n1) Introduce the hypothesis, providing the definition of the function.\n2) Show that \\( f'(x) = 12x^5 + 12x^3 - 9x^2 - 78942x + 378072 \\).\n  2.1) Consider the function as a whole and isolate the variable \\( x \\).\n  2.2) Expand the definition of \\( f(x) \\).\n  2.3) Apply standard differentiation rules to compute the derivative of each term.\n  2.4) Simplify the resulting expression.\n  2.5) Establish the differentiability of each component used.\n3) Show that \\( f''(x) = 60x^4 + 36x^2 - 18x - 78942 \\).\n  3.1) Consider the function \\( f'(x) \\) as obtained above and isolate the variable \\( x \\).\n  3.2) Expand the definition of \\( f'(x) \\).\n  3.3) Apply standard differentiation rules to compute the derivative of each term.\n  3.4) Simplify the resulting expression.\n  3.5) Establish the differentiability of each component used.\n4) Split the final goal into its two constituent parts: \\( f'(6) = 0 \\) and \\( f''(6) > 0 \\).\n5) Substitute \\( x=6 \\) into \\( f'(x) \\) as previously found and demonstrate the result is zero.\n6) Substitute \\( x=6 \\) into \\( f''(x) \\) and show that the result is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 2 + 10 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  2 * x + 10 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  2 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x\u00b2 + 10x, we want to prove that it has a minimum at the point x = -5.\nFor this, we need to show f'(-5) = 0 (the first derivative of f at x = -5 is 0), and f''(-5) > 0 (the second derivative of f at x = -5 is greater than 0).\n1) Introduce the hypothesis, specifically the given definition of f.\n2) Show that f'(x) = 2x + 10\n  2.1) Extend the proof to all x.\n  2.2) Substitute the definition of f and expand it.\n  2.3) Use derivative rules to compute the derivative with respect to x.\n  2.4) Simplify the algebraic expression to reach the result.\n  2.5) Justify the differentiability of f as required for the computation.\n3) Show that f''(x) = 2\n  3.1) Extend the proof with respect to x.\n  3.2) Substitute the result for f'(x) found in step 2.\n  3.3) Use derivative rules to compute the derivative of f'(x).\n  3.4) Simplify the expression to reach the constant result.\n  3.5) Justify the differentiability of f' as required.\n4) Split the proof into two cases: establishing f'(-5) = 0 and then showing f''(-5) > 0.\n5) For the first case, replace f'(-5) by the explicit formula found earlier and simplify.\n6) For the second case, replace f''(-5) by the explicit formula and verify it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 44 * x ^ 2 + 215 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 88 * x + 215 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 88 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^3 + 44 * x^2 + 215 * x, we want to prove that it has a local maximum at the point x = -5. To do this, we must show that f'(-5) = 0 (i.e., the first derivative at x = -5 is zero) and f''(-5) < 0 (i.e., the second derivative at x = -5 is negative).\n1) Introduce the hypothesis, in this case the function definition for f.\n2) Show that f'(x) = 9 * x^2 + 88 * x + 215.\n  2.1) Extend with respect to a general variable x.\n  2.2) Substitute the explicit definition of f.\n  2.3) Use linearity and product rules of differentiation to find the derivative term by term.\n  2.4) Simplify the resulting expression algebraically.\n  2.5) Argue that every term being differentiated is differentiable at all real numbers.\n3) Show that f''(x) = 18 * x + 88.\n  3.1) Extend with respect to a general variable x.\n  3.2) Use the result for f'(x) found above.\n  3.3) Differentiate term by term, applying linearity and the appropriate differentiation rules for powers and constants.\n  3.4) Combine and simplify to reach the closed form for f''(x).\n  3.5) Argue for differentiability of each term being used.\n4) Split your goal into two subgoals: showing f'(-5) = 0 and f''(-5) < 0.\n5) For the first subgoal, expand f'(-5) using the formula for f'(x), and verify algebraically that the result is 0.\n6) In the second subgoal, expand f''(-5) using the formula for f''(x), and show algebraically that the result is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 5 * x ^ 3 + 3 * x ^ 2 - 16 * x) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 15 * x ^ 2 + 6 * x - 16 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 30 * x + 6 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^4 + 5 * x^3 + 3 * x^2 - 16 * x, we want to show that it has a local maxima at x = -2. Specifically, we need to check that f'(-2) = 0 and f''(-2) < 0.\n1) Introduce the function definition as a hypothesis.\n2) Show that f'(x) = 4 * x^3 + 15 * x^2 + 6 * x - 16.\n  2.1) Use function extensionality to handle the variable x.\n  2.2) Expand f(x) using the given hypothesis.\n  2.3) Apply rules for the derivative of sums, differences, powers, and constants to compute the derivative.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Justify differentiability of each component function.\n3) Show that f''(x) = 12 * x^2 + 30 * x + 6.\n  3.1) Use function extensionality for the second derivative.\n  3.2) Substitute the expression for f'(x) found previously.\n  3.3) Apply rules for the derivative again to compute the second derivative.\n  3.4) Simplify the algebra.\n  3.5) Justify differentiability of the terms in f'(x).\n4) Split the goal into the two parts: f'(-2) = 0 and f''(-2) < 0.\n5) Substitute the expression for f'(-2) and verify the equation.\n6) Substitute the expression for f''(-2), simplify, and show that it is negative."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  x ^ 4 + 3 * x ^ 3 - 20 * x - 4 * x ^ 2) \u2192 (deriv f (-2:\u211d) = 0 \u2227 deriv (deriv f) (-2:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x ^ 3 + 9 * x ^ 2 - 20 - 8 * x := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.add (differentiableAt_pow _) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  12 * x ^ 2 + 18 * x - 8 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact differentiableAt_const _\n    exact DifferentiableAt.sub (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (differentiableAt_const _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = x^4 + 3x^3 - 20x - 4x^2, we want to show that it has a minimum at the point x = -2.\nFor this, we show f'(-2) = 0 (so the first derivative at x = -2 is 0), and f''(-2) > 0 (so the second derivative at x = -2 is positive).\n1) Introduce the given hypothesis, namely the definition of f.\n2) Prove that f'(x) = 4x^3 + 9x^2 - 20 - 8x.\n  2.1) Extend with respect to x.\n  2.2) Expand the full functional definition for f, substituting where necessary.\n  2.3) Apply the general rules for the derivative with respect to sums, differences, products, and powers.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Argue that all components/functions involved are differentiable at the relevant points.\n3) Prove that f''(x) = 12x^2 + 18x - 8.\n  3.1) Extend with respect to x.\n  3.2) Substitute the result for f' from step 2.\n  3.3) Apply the standard derivative rules again to each piece.\n  3.4) Simplify to obtain the final polynomial form.\n  3.5) Argue that all functions involved are differentiable here too.\n4) Split the goal into its conjunctive parts: f'(-2) = 0 and f''(-2) > 0.\n5) Evaluate f'(-2) using the explicit formula and confirm that it vanishes.\n6) Evaluate f''(-2) using the explicit formula and confirm positivity."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 4 - 287 * x ^ 2 - 1528 * x) \u2192 (deriv f (-4:\u211d) = 0 \u2227 deriv (deriv f) (-4:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  12 * x ^ 3 - 574 * x - 1528 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  36 * x ^ 2 - 574 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 3 * x^4 - 287 * x^2 - 1528 * x, we want to show that it has a stationary point at x = -4 and that this point is a local minimum (i.e., f'(-4) = 0 and f''(-4) > 0).\n\n1) Introduce the hypothesis, specifically the function definition.\n2) Show that f'(x) = 12 * x^3 - 574 * x - 1528\n  2.1) Work with the definition of f and consider the general variable x.\n  2.2) Expand the function definition to identify all summands and factors.\n  2.3) Apply basic rules of differentiation to each summand/factor accordingly.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Ensure that the differentiability conditions for f(x) are verified.\n3) Show that f''(x) = 36 * x^2 - 574\n  3.1) Consider the function f' you just derived, and differentiate it with respect to x.\n  3.2) Expand out any sub-expressions as needed.\n  3.3) Use appropriate rules for differentiation.\n  3.4) Simplify the resulting expression.\n  3.5) Check the differentiability where necessary.\n4) Split the overall goal into two parts: proving f'(-4) = 0 and f''(-4) > 0.\n5) Evaluate f'(-4) explicitly using the formula from step 2, and show that it equals zero.\n6) Evaluate f''(-4) explicitly using the formula from step 3, and show that it is positive."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  2 * x ^ 2 - 24 * x) \u2192 (deriv f (6:\u211d) = 0 \u2227 deriv (deriv f) (6:\u211d) > 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  4 * x - 24 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  4 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 2 * x ^ 2 - 24 * x, we want to show that it has a minima at x = 6.\nFor that, we need to prove that f'(6) = 0 (the first derivative at x = 6 is zero) and f''(6) > 0 (the second derivative at x = 6 is positive).\n1) Introduce the function definition as a hypothesis.\n2) Show that f'(x) = 4 * x - 24.\n  2.1) Extend the equality for all x.\n  2.2) Substitute in the given function definition.\n  2.3) Apply derivative rules to compute the derivative.\n  2.4) Simplify the algebraic terms to finish this computation.\n  2.5) Justify the differentiability of each subterm.\n3) Show that f''(x) = 4.\n  3.1) Extend the equality for all x.\n  3.2) Substitute in the expression for f'(x) that was previously obtained.\n  3.3) Use appropriate derivative rules to take the derivative once more.\n  3.4) Simplify the result.\n  3.5) Justify the differentiability of each necessary term.\n4) Split the overall goal into its two required parts: f'(6) = 0 and f''(6) > 0.\n5) Substitute and compute f'(6) = 0 directly and verify.\n6) Substitute and compute f''(6) > 0 directly and verify."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  4 * x ^ 5 - x ^ 4 - 4 * x ^ 3 + 31 * x ^ 2 + 50 * x) \u2192 (deriv f (-1:\u211d) = 0 \u2227 deriv (deriv f) (-1:\u211d) < 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  20 * x ^ 4 - 4 * x ^ 3 - 12 * x ^ 2 + 62 * x + 50 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact differentiableAt_pow _\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  80 * x ^ 3 - 12 * x ^ 2 - 24 * x + 62 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_sub]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.sub (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  norm_num\n    ",
        "annotation": "Given the function f(x) = 4 * x ^ 5 - x ^ 4 - 4 * x ^ 3 + 31 * x ^ 2 + 50 * x, we want to show that there is a local maximum at x = -1. \nFor that, we need to prove that f'(-1) = 0 (the first derivative at x = -1 is 0), and f''(-1) < 0 (the second derivative at x = -1 is negative).\n1) Introduce the hypothesis\u2014that is, state the definition of the function.\n2) Show that f'(x) = 20 * x ^ 4 - 4 * x ^ 3 - 12 * x ^ 2 + 62 * x + 50\n  2.1) Extend the function equality with respect to a variable x.\n  2.2) Substitute the definition of f(x).\n  2.3) Apply rules for the sum, difference, product, and power of differentiable functions to compute the derivative.\n  2.4) Simplify the resulting algebraic expression.\n  2.5) Justify the differentiability of each term used in the computation.\n3) Show that f''(x) = 80 * x ^ 3 - 12 * x ^ 2 - 24 * x + 62\n  3.1) Extend the desired equality with respect to x.\n  3.2) Substitute the formula for f'(x) you previously proved.\n  3.3) Apply differentiation rules for sums, products, and powers to compute the second derivative.\n  3.4) Simplify the resulting expression.\n  3.5) Justify the differentiability of each term in the computation.\n4) Split the goal into the two required statements: f'(-1) = 0 and f''(-1) < 0.\n5) Substitute the formula for f'(x) at x = -1 and simplify to show it equals 0.\n6) Substitute the formula for f''(x) at x = -1 and verify it is less than 0."
    },
    {
        "theorem": "example (f:\u211d\u2192\u211d) : (f = fun x:\u211d =>  3 * x ^ 3 + 45 * x ^ 2 + 225 * x) \u2192 (deriv f (-5:\u211d) = 0 \u2227 deriv (deriv f) (-5:\u211d) = 0) := by",
        "proof": "\n  intros hf\n  have h_deriv_f : deriv f = fun x =>  9 * x ^ 2 + 90 * x + 225 := by\n    ext x\n    rw [hf]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _))\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n\n  have h_deriv_deriv_f : deriv (deriv f) = fun x =>  18 * x + 90 := by\n    ext x\n    rw [h_deriv_f]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_add]\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_pow'']\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_mul]\n    nth_rewrite 1 [deriv_const]\n    nth_rewrite 1 [deriv_id'']\n    nth_rewrite 1 [deriv_const]\n    \n    ring\n    exact differentiableAt_const _\n    exact differentiableAt_id\n    exact differentiableAt_id\n    exact differentiableAt_const _\n    exact differentiableAt_pow _\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)\n    exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)\n    exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_pow _)) (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id))\n    exact differentiableAt_const _\n\n  constructor\n  nth_rewrite 1 [h_deriv_f]\n  ring\n  nth_rewrite 1 [h_deriv_deriv_f]\n  ring\n  \n    ",
        "annotation": "Given the function f(x) = 3 * x ^ 3 + 45 * x ^ 2 + 225 * x, we want to prove that it has a stationary point at x = -5 such that both the first and second derivatives at x = -5 are zero.\nThat is, we need to show f'(-5) = 0 and f''(-5) = 0.\n\n1) Introduce the hypothesis, namely the explicit definition of the function f.\n2) Show that f'(x) = 9 * x ^ 2 + 90 * x + 225\n  2.1) Extend with respect to variable x.\n  2.2) Substitute the explicit definition of f.\n  2.3) Use derivative rules to compute the derivative term by term (for the cubic, quadratic, and linear parts).\n  2.4) Combine like terms and simplify the algebraic expression.\n  2.5) Show that all terms are differentiable.\n3) Show that f''(x) = 18 * x + 90\n  3.1) Extend with respect to variable x.\n  3.2) Substitute in the expression for f'(x) from the previous step.\n  3.3) Compute the derivative using linearity and other basic rules.\n  3.4) Combine like terms and simplify.\n  3.5) Verify the differentiability of each term (which will be polynomials).\n4) Split the final goal into the two parts: f'(-5) = 0 and f''(-5) = 0.\n5) Substitute -5 into the formula for f'(x) and show that the result is 0.\n6) Substitute -5 into the formula for f''(x) and show that the result is 0."
    }
]