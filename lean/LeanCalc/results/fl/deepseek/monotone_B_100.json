{
    "tactics": [
        {
            "usedConstants": [
                "MonotoneOn.mono"
            ],
            "tactic": "apply MonotoneOn.mono",
            "proofState": 0,
            "pos": {
                "line": 5,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 80 * x + 1600) sorry",
            "endPos": {
                "line": 5,
                "column": 23
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 1,
            "pos": {
                "line": 6,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 80 * x + 1600) ?s\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 6,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_subset_Icc_iff, le_of_lt]",
            "proofState": 2,
            "pos": {
                "line": 7,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?s\ny : \u2115\nhy : y \u2208 ?s\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 80 * x + 1600) x \u2264 (fun x => 4 * x ^ 2 - 80 * x + 1600) y\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 7,
                "column": 46
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 10), sq_nonneg (y - 10)]",
            "proofState": 3,
            "pos": {
                "line": 8,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?s\ny : \u2115\nhy : y \u2208 ?s\nh : x \u2264 y\n\u22a2 4 * x ^ 2 - 80 * x + 1600 \u2264 4 * y ^ 2 - 80 * y + 1600\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 8,
                "column": 52
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Ici_self)",
            "proofState": 4,
            "pos": {
                "line": 11,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 32 * x + 64) sorry",
            "endPos": {
                "line": 11,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx",
            "proofState": 5,
            "pos": {
                "line": 12,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 32 * x + 64) ?m.34064",
            "endPos": {
                "line": 12,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 6,
            "pos": {
                "line": 21,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 50 * x + 625) sorry",
            "endPos": {
                "line": 21,
                "column": 28
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.pow",
            "proofState": 7,
            "pos": {
                "line": 22,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 22,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 8,
            "pos": {
                "line": 43,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 40 * x + 200) sorry",
            "endPos": {
                "line": 43,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "norm_num at hx hy",
            "proofState": 9,
            "pos": {
                "line": 44,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 40 * x + 200) x \u2264 (fun x => 4 * x ^ 2 - 40 * x + 200) y",
            "endPos": {
                "line": 44,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 5), sq_nonneg (y - 5)]",
            "proofState": 10,
            "pos": {
                "line": 45,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry ()\ny : \u2115\nhy : y \u2208 sorry ()\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 40 * x + 200) x \u2264 (fun x => 4 * x ^ 2 - 40 * x + 200) y",
            "endPos": {
                "line": 45,
                "column": 50
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 11,
            "pos": {
                "line": 48,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 162 * x + 6561) sorry",
            "endPos": {
                "line": 48,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 12,
            "pos": {
                "line": 55,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 140 * x + 700) sorry",
            "endPos": {
                "line": 55,
                "column": 22
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 13,
            "pos": {
                "line": 56,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 56,
                "column": 28
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 14,
            "pos": {
                "line": 70,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 54 * x + 486) sorry",
            "endPos": {
                "line": 70,
                "column": 70
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 15,
            "pos": {
                "line": 71,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 54 * x + 486) ?m.89856",
            "endPos": {
                "line": 71,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 16,
            "pos": {
                "line": 78,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 108 * x + 3402) sorry",
            "endPos": {
                "line": 78,
                "column": 70
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx",
            "proofState": 17,
            "pos": {
                "line": 79,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 108 * x + 3402) ?m.96472",
            "endPos": {
                "line": 79,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 18,
            "pos": {
                "line": 86,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 30 * x + 270) sorry",
            "endPos": {
                "line": 86,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq, le_iff_lt_or_eq] at hx hy",
            "proofState": 19,
            "pos": {
                "line": 87,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 30 * x + 270) x \u2264 (fun x => 5 * x ^ 2 - 30 * x + 270) y",
            "endPos": {
                "line": 87,
                "column": 57
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 20,
            "pos": {
                "line": 100,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 36 * x + 972) sorry",
            "endPos": {
                "line": 100,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 21,
            "pos": {
                "line": 101,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 2 * x ^ 2 - 36 * x + 972) x \u2264 (fun x => 2 * x ^ 2 - 36 * x + 972) y",
            "endPos": {
                "line": 101,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 22,
            "pos": {
                "line": 106,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 18 * x + 270) sorry",
            "endPos": {
                "line": 106,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, Set.mem_setOf_eq] at hx hy",
            "proofState": 23,
            "pos": {
                "line": 107,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 3 * x ^ 2 - 18 * x + 270) x \u2264 (fun x => 3 * x ^ 2 - 18 * x + 270) y",
            "endPos": {
                "line": 107,
                "column": 44
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 24,
            "pos": {
                "line": 111,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 48 * x + 576) sorry",
            "endPos": {
                "line": 111,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 25,
            "pos": {
                "line": 112,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 48 * x + 576) x \u2264 (fun x => 4 * x ^ 2 - 48 * x + 576) y",
            "endPos": {
                "line": 112,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Ici_self)",
            "proofState": 26,
            "pos": {
                "line": 116,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 32 * x + 160) sorry",
            "endPos": {
                "line": 116,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 27,
            "pos": {
                "line": 117,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 32 * x + 160) ?m.128603",
            "endPos": {
                "line": 117,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.mono _ (Set.Icc_subset_Ici_self)",
            "proofState": 28,
            "pos": {
                "line": 123,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 126 * x + 3528) sorry",
            "endPos": {
                "line": 123,
                "column": 51
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 29,
            "pos": {
                "line": 128,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 70 * x + 245) sorry",
            "endPos": {
                "line": 128,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 30,
            "pos": {
                "line": 129,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 70 * x + 245) x \u2264 (fun x => 5 * x ^ 2 - 70 * x + 245) y",
            "endPos": {
                "line": 129,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "MonotoneOn.mono"
            ],
            "tactic": "apply MonotoneOn.mono",
            "proofState": 31,
            "pos": {
                "line": 133,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 72 * x + 324) sorry",
            "endPos": {
                "line": 133,
                "column": 23
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply convex_Icc",
            "proofState": 32,
            "pos": {
                "line": 134,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 72 * x + 324) ?s\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 134,
                "column": 18
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc_left (by norm_num))",
            "proofState": 33,
            "pos": {
                "line": 141,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 14 * x + 28) sorry",
            "endPos": {
                "line": 141,
                "column": 61
            }
        },
        {
            "usedConstants": [],
            "tactic": "exact fun x hx y hy hxy => by nlinarith [sq_nonneg (x - 1), sq_nonneg (y - 1), sq_nonneg (x - y)]",
            "proofState": 34,
            "pos": {
                "line": 142,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 14 * x + 28) ?m.155541",
            "endPos": {
                "line": 143,
                "column": 71
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 1), sq_nonneg (y - 1), sq_nonneg (x - y)]",
            "proofState": 35,
            "pos": {
                "line": 143,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.155900 x\ny : ?m.155901 x hx\nhy : ?m.155902 x hx y\nhxy : ?m.155903 x hx y hy\n\u22a2 ?m.155904 x hx y hy hxy",
            "endPos": {
                "line": 143,
                "column": 71
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "exact MonotoneOn.const_mul (by nlinarith) (by nlinarith)",
            "proofState": 36,
            "pos": {
                "line": 146,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 96 * x + 768) sorry",
            "endPos": {
                "line": 146,
                "column": 58
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 37,
            "pos": {
                "line": 149,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 40 * x + 700) sorry",
            "endPos": {
                "line": 149,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "Membership.mem",
                "sorryAx",
                "Eq.mp",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "True",
                "eq_true",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set.instMembership",
                "Set"
            ],
            "tactic": "simp only [Icc, hx, hy, mem_setOf_eq] at hx hy",
            "proofState": 38,
            "pos": {
                "line": 150,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 40 * x + 700) x \u2264 (fun x => 4 * x ^ 2 - 40 * x + 700) y",
            "endPos": {
                "line": 150,
                "column": 48
            }
        },
        {
            "usedConstants": [
                "Eq.mpr",
                "NonAssocSemiring.toAddCommMonoidWithOne",
                "Mathlib.Tactic.Ring.single_pow",
                "HMul.hMul",
                "Nat.rawCast",
                "Mathlib.Tactic.Ring.mul_zero",
                "Mathlib.Tactic.Ring.mul_pf_left",
                "Mathlib.Tactic.Ring.add_pf_add_gt",
                "congrArg",
                "CommSemiring.toSemiring",
                "Mathlib.Tactic.Ring.mul_pow",
                "Nat.instMonoid",
                "Mathlib.Tactic.Ring.mul_pf_right",
                "AddMonoid.toAddZeroClass",
                "Mathlib.Tactic.Ring.one_mul",
                "HSub.hSub",
                "Mathlib.Tactic.Ring.zero_mul",
                "Nat.instMulOneClass",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "Nat.instAddMonoid",
                "Mathlib.Tactic.Ring.instCommSemiringNat",
                "Monoid.toNatPow",
                "id",
                "Distrib.toAdd",
                "AddMonoidWithOne.toNatCast",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "AddCommMonoidWithOne.toAddMonoidWithOne",
                "Mathlib.Meta.NormNum.isNat_ofNat",
                "Mathlib.Tactic.Ring.atom_pf'",
                "LE.le",
                "Mathlib.Tactic.Ring.one_pow",
                "Nat.instAddMonoidWithOne",
                "Mathlib.Tactic.Ring.mul_congr",
                "AddMonoidWithOne.toOne",
                "Mathlib.Tactic.Ring.add_mul",
                "instHAdd",
                "Mathlib.Tactic.Ring.add_pf_add_zero",
                "instHSub",
                "instNatAtLeastTwo",
                "HPow.hPow",
                "Distrib.toMul",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "pow_one",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Mathlib.Tactic.Ring.pow_add",
                "Nat",
                "Mathlib.Tactic.Ring.mul_one",
                "congr",
                "Nat.instCommSemiring",
                "One.toOfNat1",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Zero.toOfNat0",
                "Eq.refl",
                "instHPow",
                "Mathlib.Tactic.Ring.cast_pos",
                "Mathlib.Tactic.RingNF.nat_rawCast_1",
                "mul_one",
                "Mathlib.Tactic.Ring.atom_pf",
                "add_zero",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "Eq",
                "instOfNatAtLeastTwo",
                "MonoidWithZero.toMonoid",
                "Mathlib.Tactic.Ring.mul_add",
                "Eq.trans",
                "MulZeroClass.toZero",
                "Mathlib.Tactic.Ring.add_congr",
                "Mathlib.Tactic.Ring.pow_congr",
                "Mathlib.Tactic.Ring.pow_zero",
                "Semiring.toMonoidWithZero",
                "instHMul"
            ],
            "tactic": "ring_nf",
            "proofState": 39,
            "pos": {
                "line": 151,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx y : \u2115\nhxy : x \u2264 y\nhx hy : True\n\u22a2 (fun x => 4 * x ^ 2 - 40 * x + 700) x \u2264 (fun x => 4 * x ^ 2 - 40 * x + 700) y",
            "endPos": {
                "line": 151,
                "column": 9
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 5), sq_nonneg (y - 5)]",
            "proofState": 40,
            "pos": {
                "line": 152,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx y : \u2115\nhxy : x \u2264 y\nhx hy : True\n\u22a2 700 + (x ^ 2 * 4 - x * 40) \u2264 700 + (y ^ 2 * 4 - y * 40)",
            "endPos": {
                "line": 152,
                "column": 50
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 41,
            "pos": {
                "line": 177,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 72 * x + 1008) sorry",
            "endPos": {
                "line": 177,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 42,
            "pos": {
                "line": 178,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 9 * x ^ 2 - 72 * x + 1008) x \u2264 (fun x => 9 * x ^ 2 - 72 * x + 1008) y",
            "endPos": {
                "line": 178,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 43,
            "pos": {
                "line": 184,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 80 * x + 3600) sorry",
            "endPos": {
                "line": 184,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_def, and_imp, ge_iff_le, le_of_lt]",
            "proofState": 44,
            "pos": {
                "line": 185,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 80 * x + 3600) x \u2264 (fun x => 4 * x ^ 2 - 80 * x + 3600) y",
            "endPos": {
                "line": 185,
                "column": 55
            }
        },
        {
            "usedConstants": [
                "Eq.mpr",
                "NonAssocSemiring.toAddCommMonoidWithOne",
                "Mathlib.Tactic.Ring.single_pow",
                "HMul.hMul",
                "Nat.rawCast",
                "Mathlib.Tactic.Ring.mul_zero",
                "Mathlib.Tactic.Ring.mul_pf_left",
                "Mathlib.Tactic.Ring.add_pf_add_gt",
                "congrArg",
                "CommSemiring.toSemiring",
                "Mathlib.Tactic.Ring.mul_pow",
                "Nat.instMonoid",
                "Mathlib.Tactic.Ring.mul_pf_right",
                "AddMonoid.toAddZeroClass",
                "Mathlib.Tactic.Ring.one_mul",
                "HSub.hSub",
                "Mathlib.Tactic.Ring.zero_mul",
                "Nat.instMulOneClass",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "Nat.instAddMonoid",
                "Mathlib.Tactic.Ring.instCommSemiringNat",
                "Monoid.toNatPow",
                "id",
                "Distrib.toAdd",
                "AddMonoidWithOne.toNatCast",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "AddCommMonoidWithOne.toAddMonoidWithOne",
                "Mathlib.Meta.NormNum.isNat_ofNat",
                "Mathlib.Tactic.Ring.atom_pf'",
                "LE.le",
                "Mathlib.Tactic.Ring.one_pow",
                "Nat.instAddMonoidWithOne",
                "Mathlib.Tactic.Ring.mul_congr",
                "AddMonoidWithOne.toOne",
                "Mathlib.Tactic.Ring.add_mul",
                "instHAdd",
                "Mathlib.Tactic.Ring.add_pf_add_zero",
                "instHSub",
                "instNatAtLeastTwo",
                "HPow.hPow",
                "Distrib.toMul",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "pow_one",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Mathlib.Tactic.Ring.pow_add",
                "Nat",
                "Mathlib.Tactic.Ring.mul_one",
                "congr",
                "Nat.instCommSemiring",
                "One.toOfNat1",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Zero.toOfNat0",
                "Eq.refl",
                "instHPow",
                "Mathlib.Tactic.Ring.cast_pos",
                "Mathlib.Tactic.RingNF.nat_rawCast_1",
                "mul_one",
                "Mathlib.Tactic.Ring.atom_pf",
                "add_zero",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "Eq",
                "instOfNatAtLeastTwo",
                "MonoidWithZero.toMonoid",
                "Mathlib.Tactic.Ring.mul_add",
                "Eq.trans",
                "MulZeroClass.toZero",
                "Mathlib.Tactic.Ring.add_congr",
                "Mathlib.Tactic.Ring.pow_congr",
                "Mathlib.Tactic.Ring.pow_zero",
                "Semiring.toMonoidWithZero",
                "instHMul"
            ],
            "tactic": "ring_nf",
            "proofState": 45,
            "pos": {
                "line": 186,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 4 * x ^ 2 - 80 * x + 3600 \u2264 4 * y ^ 2 - 80 * y + 3600",
            "endPos": {
                "line": 186,
                "column": 9
            }
        },
        {
            "usedConstants": [],
            "tactic": "linarith [sq_nonneg (x - 15), sq_nonneg (y - 15)]",
            "proofState": 46,
            "pos": {
                "line": 187,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 3600 + (x ^ 2 * 4 - x * 80) \u2264 3600 + (y ^ 2 * 4 - y * 80)",
            "endPos": {
                "line": 187,
                "column": 51
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 47,
            "pos": {
                "line": 190,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 80 * x + 1000) sorry",
            "endPos": {
                "line": 190,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_subset_Icc_iff, le_refl, true_and]",
            "proofState": 48,
            "pos": {
                "line": 191,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 8 * x ^ 2 - 80 * x + 1000) x \u2264 (fun x => 8 * x ^ 2 - 80 * x + 1000) y",
            "endPos": {
                "line": 191,
                "column": 55
            }
        },
        {
            "usedConstants": [
                "Eq.mpr",
                "NonAssocSemiring.toAddCommMonoidWithOne",
                "Mathlib.Tactic.Ring.single_pow",
                "HMul.hMul",
                "Nat.rawCast",
                "Mathlib.Tactic.Ring.mul_zero",
                "Mathlib.Tactic.Ring.mul_pf_left",
                "Mathlib.Tactic.Ring.add_pf_add_gt",
                "congrArg",
                "CommSemiring.toSemiring",
                "Mathlib.Tactic.Ring.mul_pow",
                "Nat.instMonoid",
                "Mathlib.Tactic.Ring.mul_pf_right",
                "AddMonoid.toAddZeroClass",
                "Mathlib.Tactic.Ring.one_mul",
                "HSub.hSub",
                "Mathlib.Tactic.Ring.zero_mul",
                "Nat.instMulOneClass",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "Nat.instAddMonoid",
                "Mathlib.Tactic.Ring.instCommSemiringNat",
                "Monoid.toNatPow",
                "id",
                "Distrib.toAdd",
                "AddMonoidWithOne.toNatCast",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "AddCommMonoidWithOne.toAddMonoidWithOne",
                "Mathlib.Meta.NormNum.isNat_ofNat",
                "Mathlib.Tactic.Ring.atom_pf'",
                "LE.le",
                "Mathlib.Tactic.Ring.one_pow",
                "Nat.instAddMonoidWithOne",
                "Mathlib.Tactic.Ring.mul_congr",
                "AddMonoidWithOne.toOne",
                "Mathlib.Tactic.Ring.add_mul",
                "instHAdd",
                "Mathlib.Tactic.Ring.add_pf_add_zero",
                "instHSub",
                "instNatAtLeastTwo",
                "HPow.hPow",
                "Distrib.toMul",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "pow_one",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Mathlib.Tactic.Ring.pow_add",
                "Nat",
                "Mathlib.Tactic.Ring.mul_one",
                "congr",
                "Nat.instCommSemiring",
                "One.toOfNat1",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Zero.toOfNat0",
                "Eq.refl",
                "instHPow",
                "Mathlib.Tactic.Ring.cast_pos",
                "Mathlib.Tactic.RingNF.nat_rawCast_1",
                "mul_one",
                "Mathlib.Tactic.Ring.atom_pf",
                "add_zero",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "Eq",
                "instOfNatAtLeastTwo",
                "MonoidWithZero.toMonoid",
                "Mathlib.Tactic.Ring.mul_add",
                "Eq.trans",
                "MulZeroClass.toZero",
                "Mathlib.Tactic.Ring.add_congr",
                "Mathlib.Tactic.Ring.pow_congr",
                "Mathlib.Tactic.Ring.pow_zero",
                "Semiring.toMonoidWithZero",
                "instHMul"
            ],
            "tactic": "ring_nf",
            "proofState": 49,
            "pos": {
                "line": 192,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 8 * x ^ 2 - 80 * x + 1000 \u2264 8 * y ^ 2 - 80 * y + 1000",
            "endPos": {
                "line": 192,
                "column": 9
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 5), sq_nonneg (y - 5), hx, hy]",
            "proofState": 50,
            "pos": {
                "line": 193,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 1000 + (x ^ 2 * 8 - x * 80) \u2264 1000 + (y ^ 2 * 8 - y * 80)",
            "endPos": {
                "line": 193,
                "column": 58
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 51,
            "pos": {
                "line": 196,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 48 * x + 1344) sorry",
            "endPos": {
                "line": 196,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 52,
            "pos": {
                "line": 203,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 70 * x + 2205) sorry",
            "endPos": {
                "line": 203,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 53,
            "pos": {
                "line": 204,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 70 * x + 2205) x \u2264 (fun x => 5 * x ^ 2 - 70 * x + 2205) y",
            "endPos": {
                "line": 204,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Membership.mem",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instMembership",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (fun x hx => _)",
            "proofState": 54,
            "pos": {
                "line": 208,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 48 * x + 216) sorry",
            "endPos": {
                "line": 208,
                "column": 41
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx",
            "proofState": 55,
            "pos": {
                "line": 209,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 209,
                "column": 14
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp_all [Real.sqrt_le_iff]",
            "proofState": 56,
            "pos": {
                "line": 213,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 48 * x + 216) sorry",
            "endPos": {
                "line": 213,
                "column": 31
            }
        },
        {
            "usedConstants": [],
            "tactic": "linarith",
            "proofState": 57,
            "pos": {
                "line": 214,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 \u2200 x \u2208 sorry, x \u2208 sorry",
            "endPos": {
                "line": 214,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Membership.mem",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instMembership",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (fun x hx => by simp [hx])",
            "proofState": 58,
            "pos": {
                "line": 217,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 64 * x + 1152) sorry",
            "endPos": {
                "line": 217,
                "column": 52
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp [hx]",
            "proofState": 59,
            "pos": {
                "line": 217,
                "column": 42
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\n\u22a2 x \u2208 ?m.304522",
            "endPos": {
                "line": 217,
                "column": 51
            }
        },
        {
            "usedConstants": [],
            "tactic": "have h : \u2200 x \u2208 Icc (4 : \u211d) (7 : \u211d), (8 * x ^ 2 - 64 * x + 1152) = 8 * (x - 4) ^ 2 + 288 :=\n  by\n  intro x hx\n  simp [sq, mul_add, mul_sub, mul_comm, mul_left_comm]\n  ring",
            "proofState": 60,
            "pos": {
                "line": 218,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 64 * x + 1152) ?m.304522",
            "endPos": {
                "line": 221,
                "column": 8
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc_left (by norm_num))",
            "proofState": 61,
            "pos": {
                "line": 227,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 56 * x + 448) sorry",
            "endPos": {
                "line": 227,
                "column": 61
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 62,
            "pos": {
                "line": 228,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 56 * x + 448) ?m.319843",
            "endPos": {
                "line": 228,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 63,
            "pos": {
                "line": 229,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 56 * x + 448) sorry",
            "endPos": {
                "line": 229,
                "column": 30
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.pow",
            "proofState": 64,
            "pos": {
                "line": 230,
                "column": 4
            },
            "goals": "no goals",
            "endPos": {
                "line": 230,
                "column": 24
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 65,
            "pos": {
                "line": 240,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 10 * x + 45) sorry",
            "endPos": {
                "line": 240,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 66,
            "pos": {
                "line": 241,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 10 * x + 45) x \u2264 (fun x => 5 * x ^ 2 - 10 * x + 45) y",
            "endPos": {
                "line": 241,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 67,
            "pos": {
                "line": 245,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 40 * x + 240) sorry",
            "endPos": {
                "line": 245,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp only [mul_assoc, mul_one, sub_eq_add_neg, neg_add_rev, neg_mul_eq_neg_mul] at hx hy \u22a2",
            "proofState": 68,
            "pos": {
                "line": 246,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 10 * x ^ 2 - 40 * x + 240) x \u2264 (fun x => 10 * x ^ 2 - 40 * x + 240) y",
            "endPos": {
                "line": 246,
                "column": 92
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x + y), sq_nonneg (x - y), sq_nonneg (x + y - 2), sq_nonneg (x + y - 10)]",
            "proofState": 69,
            "pos": {
                "line": 247,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 10 * x ^ 2 - 40 * x + 240 \u2264 10 * y ^ 2 - 40 * y + 240",
            "endPos": {
                "line": 247,
                "column": 97
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 70,
            "pos": {
                "line": 250,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 60 * x + 810) sorry",
            "endPos": {
                "line": 250,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [mem_Icc] at hx hy",
            "proofState": 71,
            "pos": {
                "line": 251,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 10 * x ^ 2 - 60 * x + 810) x \u2264 (fun x => 10 * x ^ 2 - 60 * x + 810) y",
            "endPos": {
                "line": 251,
                "column": 30
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 72,
            "pos": {
                "line": 255,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 12 * x + 60) sorry",
            "endPos": {
                "line": 255,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp only [Icc, le_set_biUnion_iff, mem_Icc] at hx hy \u22a2",
            "proofState": 73,
            "pos": {
                "line": 256,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 3 * x ^ 2 - 12 * x + 60) x \u2264 (fun x => 3 * x ^ 2 - 12 * x + 60) y",
            "endPos": {
                "line": 256,
                "column": 57
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp_all only [ge_iff_le, gt_iff_lt, sub_le_sub_iff_right, sub_lt_sub_iff_right]",
            "proofState": 74,
            "pos": {
                "line": 257,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 3 * x ^ 2 - 12 * x + 60 \u2264 3 * y ^ 2 - 12 * y + 60",
            "endPos": {
                "line": 257,
                "column": 82
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Ici_self)",
            "proofState": 75,
            "pos": {
                "line": 261,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 8 * x + 4) sorry",
            "endPos": {
                "line": 261,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 76,
            "pos": {
                "line": 262,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 8 * x + 4) ?m.387058",
            "endPos": {
                "line": 262,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 77,
            "pos": {
                "line": 268,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 144 * x + 2592) sorry",
            "endPos": {
                "line": 268,
                "column": 28
            }
        },
        {
            "usedConstants": [],
            "tactic": "intro x hx y hy hxy",
            "proofState": 78,
            "pos": {
                "line": 269,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 269,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 79,
            "pos": {
                "line": 288,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 112 * x + 3136) sorry",
            "endPos": {
                "line": 288,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq] at hx hy",
            "proofState": 80,
            "pos": {
                "line": 289,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 112 * x + 3136) x \u2264 (fun x => 7 * x ^ 2 - 112 * x + 3136) y",
            "endPos": {
                "line": 289,
                "column": 40
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 81,
            "pos": {
                "line": 293,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 80 * x + 200) sorry",
            "endPos": {
                "line": 293,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 82,
            "pos": {
                "line": 306,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 16 * x + 48) sorry",
            "endPos": {
                "line": 306,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_def, and_imp, ge_iff_le, le_of_lt]",
            "proofState": 83,
            "pos": {
                "line": 307,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 16 * x + 48) x \u2264 (fun x => 4 * x ^ 2 - 16 * x + 48) y",
            "endPos": {
                "line": 307,
                "column": 55
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - y), sq_nonneg (x + y), hx.1, hx.2, hy.1, hy.2]",
            "proofState": 84,
            "pos": {
                "line": 308,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 4 * x ^ 2 - 16 * x + 48 \u2264 4 * y ^ 2 - 16 * y + 48",
            "endPos": {
                "line": 308,
                "column": 74
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 85,
            "pos": {
                "line": 311,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 48 * x + 432) sorry",
            "endPos": {
                "line": 311,
                "column": 70
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "exact\n  MonotoneOn.sub (MonotoneOn.const_mul (by norm_num) <| MonotoneOn.pow (MonotoneOn.id (by norm_num) (by norm_num)))\n    (MonotoneOn.const_mul (by norm_num) <| MonotoneOn.id (by norm_num) (by norm_num))",
            "proofState": 86,
            "pos": {
                "line": 312,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 48 * x + 432) ?m.421793",
            "endPos": {
                "line": 315,
                "column": 87
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 87,
            "pos": {
                "line": 318,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 84 * x + 252) sorry",
            "endPos": {
                "line": 318,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 88,
            "pos": {
                "line": 323,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 40 * x + 400) sorry",
            "endPos": {
                "line": 323,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 89,
            "pos": {
                "line": 324,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 2 * x ^ 2 - 40 * x + 400) x \u2264 (fun x => 2 * x ^ 2 - 40 * x + 400) y",
            "endPos": {
                "line": 324,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 90,
            "pos": {
                "line": 328,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 36 * x + 324) sorry",
            "endPos": {
                "line": 328,
                "column": 28
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.pow",
            "proofState": 91,
            "pos": {
                "line": 329,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 329,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ Icc_subset_Icc_left",
            "proofState": 92,
            "pos": {
                "line": 334,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 112 * x + 2744) sorry",
            "endPos": {
                "line": 334,
                "column": 45
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 93,
            "pos": {
                "line": 335,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 112 * x + 2744) ?m.450011",
            "endPos": {
                "line": 335,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 94,
            "pos": {
                "line": 340,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 160 * x + 4000) sorry",
            "endPos": {
                "line": 340,
                "column": 22
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 95,
            "pos": {
                "line": 341,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 341,
                "column": 28
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 96,
            "pos": {
                "line": 359,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 24 * x + 648) sorry",
            "endPos": {
                "line": 359,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [mem_Icc] at hx hy",
            "proofState": 97,
            "pos": {
                "line": 360,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 2 * x ^ 2 - 24 * x + 648) x \u2264 (fun x => 2 * x ^ 2 - 24 * x + 648) y",
            "endPos": {
                "line": 360,
                "column": 30
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 98,
            "pos": {
                "line": 365,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 70 * x + 245) sorry",
            "endPos": {
                "line": 365,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq] at hx hy",
            "proofState": 99,
            "pos": {
                "line": 366,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 70 * x + 245) x \u2264 (fun x => 5 * x ^ 2 - 70 * x + 245) y",
            "endPos": {
                "line": 366,
                "column": 40
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 100,
            "pos": {
                "line": 372,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 48 * x + 432) sorry",
            "endPos": {
                "line": 372,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 101,
            "pos": {
                "line": 373,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 48 * x + 432) x \u2264 (fun x => 4 * x ^ 2 - 48 * x + 432) y",
            "endPos": {
                "line": 373,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 102,
            "pos": {
                "line": 377,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 36 * x + 108) sorry",
            "endPos": {
                "line": 377,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ Icc_subset_Icc_left",
            "proofState": 103,
            "pos": {
                "line": 382,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 24 * x + 360) sorry",
            "endPos": {
                "line": 382,
                "column": 45
            }
        },
        {
            "usedConstants": [],
            "tactic": "exact fun x hx y hy hxy => by\n  simp only [mem_Icc] at hx hy\n  nlinarith [sq_nonneg (x - y)]",
            "proofState": 104,
            "pos": {
                "line": 383,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 24 * x + 360) ?m.490123",
            "endPos": {
                "line": 385,
                "column": 33
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [mem_Icc] at hx hy",
            "proofState": 105,
            "pos": {
                "line": 384,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.490482 x\ny : ?m.490483 x hx\nhy : ?m.490484 x hx y\nhxy : ?m.490485 x hx y hy\n\u22a2 ?m.490486 x hx y hy hxy",
            "endPos": {
                "line": 384,
                "column": 32
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 106,
            "pos": {
                "line": 388,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 40 * x + 320) sorry",
            "endPos": {
                "line": 388,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_def, le_refl, true_and, and_true, le_of_lt]",
            "proofState": 107,
            "pos": {
                "line": 389,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 40 * x + 320) x \u2264 (fun x => 5 * x ^ 2 - 40 * x + 320) y",
            "endPos": {
                "line": 389,
                "column": 64
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "Eq",
                "letFun",
                "instHMul"
            ],
            "tactic": "have h : \u2200 x, (\u03bb x \u21a6 5 * x ^ 2 - 40 * x + 320) x = 5 * x ^ 2 - 40 * x + 320 :=\n  by\n  intro x\n  rfl",
            "proofState": 108,
            "pos": {
                "line": 390,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 5 * x ^ 2 - 40 * x + 320 \u2264 5 * y ^ 2 - 40 * y + 320",
            "endPos": {
                "line": 392,
                "column": 7
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x",
            "proofState": 109,
            "pos": {
                "line": 391,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 \u2200 (x : \u2115), (fun x => 5 * x ^ 2 - 40 * x + 320) x = 5 * x ^ 2 - 40 * x + 320",
            "endPos": {
                "line": 391,
                "column": 11
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat",
                "instAddNat",
                "Eq.refl",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "rfl",
            "proofState": 110,
            "pos": {
                "line": 392,
                "column": 4
            },
            "goals": "x\u271d\u00b9 : Sort u_1\nIcc : x\u271d\u00b9\nx\u271d : \u2115\nhx : x\u271d \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x\u271d \u2264 y\nx : \u2115\n\u22a2 (fun x => 5 * x ^ 2 - 40 * x + 320) x = 5 * x ^ 2 - 40 * x + 320",
            "endPos": {
                "line": 392,
                "column": 7
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Monoid.toNatPow",
                "Eq.mp",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat",
                "True",
                "eq_self",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "Eq",
                "instHMul",
                "forall_congr"
            ],
            "tactic": "simp_all only [h]",
            "proofState": 111,
            "pos": {
                "line": 393,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\nh : \u2200 (x : \u2115), (fun x => 5 * x ^ 2 - 40 * x + 320) x = 5 * x ^ 2 - 40 * x + 320\n\u22a2 5 * x ^ 2 - 40 * x + 320 \u2264 5 * y ^ 2 - 40 * y + 320",
            "endPos": {
                "line": 393,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 4), sq_nonneg (y - 4)]",
            "proofState": 112,
            "pos": {
                "line": 394,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\nh : \u2200 (x : \u2115), True\n\u22a2 5 * x ^ 2 - 40 * x + 320 \u2264 5 * y ^ 2 - 40 * y + 320",
            "endPos": {
                "line": 394,
                "column": 50
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 113,
            "pos": {
                "line": 397,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 140 * x + 4410) sorry",
            "endPos": {
                "line": 397,
                "column": 22
            }
        },
        {
            "usedConstants": [],
            "tactic": "intro x hx",
            "proofState": 114,
            "pos": {
                "line": 398,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 398,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Ici_self)",
            "proofState": 115,
            "pos": {
                "line": 413,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 24 * x + 48) sorry",
            "endPos": {
                "line": 413,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "exact\n  MonotoneOn.sub (fun x hx y hy hxy => by nlinarith [sq_nonneg (x - y)])\n    (fun x hx y hy hxy => by nlinarith [sq_nonneg (x + y - 4)])",
            "proofState": 116,
            "pos": {
                "line": 414,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 24 * x + 48) ?m.539183",
            "endPos": {
                "line": 418,
                "column": 42
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc_right (by linarith))",
            "proofState": 117,
            "pos": {
                "line": 421,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 32 * x + 64) sorry",
            "endPos": {
                "line": 421,
                "column": 62
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx",
            "proofState": 118,
            "pos": {
                "line": 422,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 32 * x + 64) ?m.546573",
            "endPos": {
                "line": 422,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _",
            "proofState": 119,
            "pos": {
                "line": 431,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 160 * x + 4000) sorry",
            "endPos": {
                "line": 431,
                "column": 25
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply convex_Icc",
            "proofState": 120,
            "pos": {
                "line": 432,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?m.553189\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 160 * x + 4000) ?m.553189",
            "endPos": {
                "line": 432,
                "column": 18
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ Icc_subset_Icc_left",
            "proofState": 121,
            "pos": {
                "line": 439,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 12 * x + 48) sorry",
            "endPos": {
                "line": 439,
                "column": 45
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 122,
            "pos": {
                "line": 440,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 12 * x + 48) ?m.560111",
            "endPos": {
                "line": 440,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc_left (by norm_num))",
            "proofState": 123,
            "pos": {
                "line": 446,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 36 * x + 108) sorry",
            "endPos": {
                "line": 446,
                "column": 61
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "exact MonotoneOn.const_mul (fun x hx y hy hxy => by nlinarith) 6",
            "proofState": 124,
            "pos": {
                "line": 447,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 447,
                "column": 66
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 125,
            "pos": {
                "line": 456,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 28 * x + 224) sorry",
            "endPos": {
                "line": 456,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc_left (by norm_num))",
            "proofState": 126,
            "pos": {
                "line": 469,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 90 * x + 2025) sorry",
            "endPos": {
                "line": 469,
                "column": 61
            }
        },
        {
            "usedConstants": [],
            "tactic": "exact fun x hx y hy h => by nlinarith [sq_nonneg (x - y)]",
            "proofState": 127,
            "pos": {
                "line": 470,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 90 * x + 2025) ?m.581361",
            "endPos": {
                "line": 471,
                "column": 33
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - y)]",
            "proofState": 128,
            "pos": {
                "line": 471,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.581720 x\ny : ?m.581721 x hx\nhy : ?m.581722 x hx y\nh : ?m.581723 x hx y hy\n\u22a2 ?m.581724 x hx y hy h",
            "endPos": {
                "line": 471,
                "column": 33
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 129,
            "pos": {
                "line": 474,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 36 * x + 108) sorry",
            "endPos": {
                "line": 474,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf, le_of_lt] at hx hy",
            "proofState": 130,
            "pos": {
                "line": 475,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 9 * x ^ 2 - 36 * x + 108) x \u2264 (fun x => 9 * x ^ 2 - 36 * x + 108) y",
            "endPos": {
                "line": 475,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 131,
            "pos": {
                "line": 479,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 84 * x + 1176) sorry",
            "endPos": {
                "line": 479,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, \u2190 and_assoc] at hx hy",
            "proofState": 132,
            "pos": {
                "line": 480,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 6 * x ^ 2 - 84 * x + 1176) x \u2264 (fun x => 6 * x ^ 2 - 84 * x + 1176) y",
            "endPos": {
                "line": 480,
                "column": 39
            }
        },
        {
            "usedConstants": [
                "MonotoneOn.mono"
            ],
            "tactic": "apply MonotoneOn.mono",
            "proofState": 133,
            "pos": {
                "line": 486,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 54 * x + 162) sorry",
            "endPos": {
                "line": 486,
                "column": 23
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 134,
            "pos": {
                "line": 487,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 54 * x + 162) ?s\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 487,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 4), sq_nonneg (y - 4), hxy]",
            "proofState": 135,
            "pos": {
                "line": 488,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?s\ny : \u2115\nhy : y \u2208 ?s\nhxy : x \u2264 y\n\u22a2 (fun x => 9 * x ^ 2 - 54 * x + 162) x \u2264 (fun x => 9 * x ^ 2 - 54 * x + 162) y",
            "endPos": {
                "line": 488,
                "column": 55
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 136,
            "pos": {
                "line": 492,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 108 * x + 324) sorry",
            "endPos": {
                "line": 492,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [mem_Icc] at hx hy",
            "proofState": 137,
            "pos": {
                "line": 493,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 9 * x ^ 2 - 108 * x + 324) x \u2264 (fun x => 9 * x ^ 2 - 108 * x + 324) y",
            "endPos": {
                "line": 493,
                "column": 30
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _",
            "proofState": 138,
            "pos": {
                "line": 498,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 4 * x + 12) sorry",
            "endPos": {
                "line": 498,
                "column": 25
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 139,
            "pos": {
                "line": 499,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?m.642363",
            "endPos": {
                "line": 499,
                "column": 23
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp",
            "proofState": 140,
            "pos": {
                "line": 505,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 505,
                "column": 8
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 141,
            "pos": {
                "line": 508,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 10 * x + 10) sorry",
            "endPos": {
                "line": 508,
                "column": 28
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply MonotoneOn.pow",
            "proofState": 142,
            "pos": {
                "line": 509,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 509,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 143,
            "pos": {
                "line": 523,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 12 * x + 12) sorry",
            "endPos": {
                "line": 523,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, le_sub_iff_add_le, sub_le_iff_le_add, add_right_inj] at hx hy hxy",
            "proofState": 144,
            "pos": {
                "line": 524,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 6 * x ^ 2 - 12 * x + 12) x \u2264 (fun x => 6 * x ^ 2 - 12 * x + 12) y",
            "endPos": {
                "line": 524,
                "column": 83
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "refine' MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 145,
            "pos": {
                "line": 528,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 64 * x + 768) sorry",
            "endPos": {
                "line": 528,
                "column": 72
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 146,
            "pos": {
                "line": 529,
                "column": 2
            },
            "goals": "case refine'_1\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\ncase refine'_2\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 64 * x + 768) ?refine'_1",
            "endPos": {
                "line": 529,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Membership.mem",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instMembership",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono (fun x hx => by simp_all)",
            "proofState": 147,
            "pos": {
                "line": 534,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 12 * x + 24) sorry",
            "endPos": {
                "line": 534,
                "column": 49
            }
        },
        {
            "usedConstants": [
                "Eq.mpr",
                "Nat.instOrderedSub",
                "Preorder.toLT",
                "Nat.instIsOrderedAddMonoid",
                "HMul.hMul",
                "IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT",
                "Nat.instMonoid",
                "covariant_swap_add_of_covariant_add",
                "PartialOrder.toPreorder",
                "HSub.hSub",
                "Preorder.toLE",
                "Membership.mem",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "contravariant_lt_of_covariant_le",
                "LE.le",
                "instHAdd",
                "Nat.instIsOrderedCancelAddMonoid",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "_private.Mathlib.Algebra.Order.Monoid.Unbundled.Basic.0._proof_4",
                "Nat",
                "LT.lt",
                "Nat.instPartialOrder",
                "instAddNat",
                "Nat.instAddCommMonoid",
                "Eq.refl",
                "contravariant_swap_add_of_contravariant_add",
                "_private.Mathlib.Algebra.Order.Sub.Defs.0._proof_1",
                "AddCommSemigroup.toAddCommMagma",
                "instHPow",
                "OfNat.ofNat",
                "Eq",
                "Set.instMembership",
                "implies_congr_ctx",
                "IsOrderedCancelAddMonoid.toIsCancelAdd",
                "IsCancelAdd.toIsRightCancelAdd",
                "Nat.instAddCommSemigroup",
                "Eq.trans",
                "AddCommMagma.toAdd",
                "IsOrderedAddMonoid.toAddLeftMono",
                "instHMul",
                "forall_congr",
                "Set",
                "Nat.instLinearOrder"
            ],
            "tactic": "simp_all",
            "proofState": 148,
            "pos": {
                "line": 534,
                "column": 40
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?m.669155\n\u22a2 \u2200 \u2983b : \u2115\u2984, b \u2208 ?m.669155 \u2192 x \u2264 b \u2192 6 * x ^ 2 - 12 * x + 24 \u2264 6 * b ^ 2 - 12 * b + 24",
            "endPos": {
                "line": 534,
                "column": 48
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 149,
            "pos": {
                "line": 535,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?m.669155\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 535,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 150,
            "pos": {
                "line": 540,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 50 * x + 750) sorry",
            "endPos": {
                "line": 540,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc_def, mem_setOf_eq] at hx hy",
            "proofState": 151,
            "pos": {
                "line": 541,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 50 * x + 750) x \u2264 (fun x => 5 * x ^ 2 - 50 * x + 750) y",
            "endPos": {
                "line": 541,
                "column": 44
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Membership.mem",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "LE.le",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instMembership",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono (fun x hx y hy hxy => _)",
            "proofState": 152,
            "pos": {
                "line": 545,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 140 * x + 4200) sorry",
            "endPos": {
                "line": 545,
                "column": 48
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp_all only [mul_sub_left_distrib, mul_sub_right_distrib, mul_one, sub_add, sub_eq_add_neg, mul_assoc]",
            "proofState": 153,
            "pos": {
                "line": 546,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?m.755359\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 \u2200 x \u2208 ?m.755359, \u2200 y \u2208 ?m.755359, x \u2264 y \u2192 7 * x ^ 2 - 140 * x + 4200 \u2264 7 * y ^ 2 - 140 * y + 4200",
            "endPos": {
                "line": 547,
                "column": 14
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ <| Icc_subset_Icc (by norm_num) (by norm_num)",
            "proofState": 154,
            "pos": {
                "line": 551,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 100 * x + 2000) sorry",
            "endPos": {
                "line": 551,
                "column": 71
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "exact\n  MonotoneOn.sub (fun x hx y hy hxy => mul_le_mul_of_nonneg_left hxy (by norm_num))\n    (fun x hx y hy hxy => mul_le_mul_of_nonneg_left hxy (by norm_num))",
            "proofState": 155,
            "pos": {
                "line": 552,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 100 * x + 2000) ?m.762178",
            "endPos": {
                "line": 556,
                "column": 52
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 156,
            "pos": {
                "line": 559,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 160 * x + 1920) sorry",
            "endPos": {
                "line": 559,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq] at hx hy",
            "proofState": 157,
            "pos": {
                "line": 560,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 10 * x ^ 2 - 160 * x + 1920) x \u2264 (fun x => 10 * x ^ 2 - 160 * x + 1920) y",
            "endPos": {
                "line": 560,
                "column": 40
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "refine' MonotoneOn.mono _ _",
            "proofState": 158,
            "pos": {
                "line": 565,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 90 * x + 4050) sorry",
            "endPos": {
                "line": 565,
                "column": 29
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx",
            "proofState": 159,
            "pos": {
                "line": 566,
                "column": 4
            },
            "goals": "case refine'_1\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 566,
                "column": 14
            }
        },
        {
            "usedConstants": [],
            "tactic": "norm_num",
            "proofState": 160,
            "pos": {
                "line": 571,
                "column": 4
            },
            "goals": "case refine'_2\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 90 * x + 4050) sorry",
            "endPos": {
                "line": 571,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 161,
            "pos": {
                "line": 574,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 180 * x + 6480) sorry",
            "endPos": {
                "line": 574,
                "column": 70
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 162,
            "pos": {
                "line": 575,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 180 * x + 6480) ?m.790047",
            "endPos": {
                "line": 575,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 163,
            "pos": {
                "line": 580,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 32 * x + 512) sorry",
            "endPos": {
                "line": 580,
                "column": 22
            }
        },
        {
            "usedConstants": [],
            "tactic": "exact MonotoneOn.const_mul (fun _ _ _ \u21a6 by linarith)",
            "proofState": 164,
            "pos": {
                "line": 581,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 581,
                "column": 54
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 165,
            "pos": {
                "line": 588,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 20 * x + 70) sorry",
            "endPos": {
                "line": 588,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_def, mem_setOf_eq]",
            "proofState": 166,
            "pos": {
                "line": 589,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 10 * x ^ 2 - 20 * x + 70) x \u2264 (fun x => 10 * x ^ 2 - 20 * x + 70) y",
            "endPos": {
                "line": 589,
                "column": 39
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - y)]",
            "proofState": 167,
            "pos": {
                "line": 590,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 10 * x ^ 2 - 20 * x + 70 \u2264 10 * y ^ 2 - 20 * y + 70",
            "endPos": {
                "line": 590,
                "column": 31
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 168,
            "pos": {
                "line": 593,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 14 * x + 63) sorry",
            "endPos": {
                "line": 593,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 169,
            "pos": {
                "line": 594,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 14 * x + 63) x \u2264 (fun x => 7 * x ^ 2 - 14 * x + 63) y",
            "endPos": {
                "line": 594,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 170,
            "pos": {
                "line": 598,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 84 * x + 882) sorry",
            "endPos": {
                "line": 598,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, Set.mem_setOf_eq] at hx hy",
            "proofState": 171,
            "pos": {
                "line": 599,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 6 * x ^ 2 - 84 * x + 882) x \u2264 (fun x => 6 * x ^ 2 - 84 * x + 882) y",
            "endPos": {
                "line": 599,
                "column": 44
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 172,
            "pos": {
                "line": 604,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 16 * x + 224) sorry",
            "endPos": {
                "line": 604,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq] at hx hy",
            "proofState": 173,
            "pos": {
                "line": 605,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 2 * x ^ 2 - 16 * x + 224) x \u2264 (fun x => 2 * x ^ 2 - 16 * x + 224) y",
            "endPos": {
                "line": 605,
                "column": 40
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 174,
            "pos": {
                "line": 609,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 70 * x + 1050) sorry",
            "endPos": {
                "line": 609,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Set.mem_Icc, le_of_lt]",
            "proofState": 175,
            "pos": {
                "line": 610,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 70 * x + 1050) x \u2264 (fun x => 7 * x ^ 2 - 70 * x + 1050) y",
            "endPos": {
                "line": 610,
                "column": 39
            }
        },
        {
            "usedConstants": [
                "Eq.mpr",
                "NonAssocSemiring.toAddCommMonoidWithOne",
                "Mathlib.Tactic.Ring.single_pow",
                "HMul.hMul",
                "Nat.rawCast",
                "Mathlib.Tactic.Ring.mul_zero",
                "Mathlib.Tactic.Ring.mul_pf_left",
                "Mathlib.Tactic.Ring.add_pf_add_gt",
                "congrArg",
                "CommSemiring.toSemiring",
                "Mathlib.Tactic.Ring.mul_pow",
                "Nat.instMonoid",
                "Mathlib.Tactic.Ring.mul_pf_right",
                "AddMonoid.toAddZeroClass",
                "Mathlib.Tactic.Ring.one_mul",
                "HSub.hSub",
                "Mathlib.Tactic.Ring.zero_mul",
                "Nat.instMulOneClass",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "Nat.instAddMonoid",
                "Mathlib.Tactic.Ring.instCommSemiringNat",
                "Monoid.toNatPow",
                "id",
                "Distrib.toAdd",
                "AddMonoidWithOne.toNatCast",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "AddCommMonoidWithOne.toAddMonoidWithOne",
                "Mathlib.Meta.NormNum.isNat_ofNat",
                "Mathlib.Tactic.Ring.atom_pf'",
                "LE.le",
                "Mathlib.Tactic.Ring.one_pow",
                "Nat.instAddMonoidWithOne",
                "Mathlib.Tactic.Ring.mul_congr",
                "AddMonoidWithOne.toOne",
                "Mathlib.Tactic.Ring.add_mul",
                "instHAdd",
                "Mathlib.Tactic.Ring.add_pf_add_zero",
                "instHSub",
                "instNatAtLeastTwo",
                "HPow.hPow",
                "Distrib.toMul",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "pow_one",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Mathlib.Tactic.Ring.pow_add",
                "Nat",
                "Mathlib.Tactic.Ring.mul_one",
                "congr",
                "Nat.instCommSemiring",
                "One.toOfNat1",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Zero.toOfNat0",
                "Eq.refl",
                "instHPow",
                "Mathlib.Tactic.Ring.cast_pos",
                "Mathlib.Tactic.RingNF.nat_rawCast_1",
                "mul_one",
                "Mathlib.Tactic.Ring.atom_pf",
                "add_zero",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "Eq",
                "instOfNatAtLeastTwo",
                "MonoidWithZero.toMonoid",
                "Mathlib.Tactic.Ring.mul_add",
                "Eq.trans",
                "MulZeroClass.toZero",
                "Mathlib.Tactic.Ring.add_congr",
                "Mathlib.Tactic.Ring.pow_congr",
                "Mathlib.Tactic.Ring.pow_zero",
                "Semiring.toMonoidWithZero",
                "instHMul"
            ],
            "tactic": "ring_nf",
            "proofState": 176,
            "pos": {
                "line": 611,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 7 * x ^ 2 - 70 * x + 1050 \u2264 7 * y ^ 2 - 70 * y + 1050",
            "endPos": {
                "line": 611,
                "column": 9
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 5), sq_nonneg (y - 5), sq_nonneg (y - 7), sq_nonneg (x - 7)]",
            "proofState": 177,
            "pos": {
                "line": 612,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 1050 + (x ^ 2 * 7 - x * 70) \u2264 1050 + (y ^ 2 * 7 - y * 70)",
            "endPos": {
                "line": 612,
                "column": 88
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 178,
            "pos": {
                "line": 615,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 90 * x + 1215) sorry",
            "endPos": {
                "line": 615,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 179,
            "pos": {
                "line": 626,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 144 * x + 2880) sorry",
            "endPos": {
                "line": 626,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc_def, Set.mem_setOf_eq] at hx hy",
            "proofState": 180,
            "pos": {
                "line": 627,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 9 * x ^ 2 - 144 * x + 2880) x \u2264 (fun x => 9 * x ^ 2 - 144 * x + 2880) y",
            "endPos": {
                "line": 627,
                "column": 48
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 181,
            "pos": {
                "line": 631,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 48 * x + 768) sorry",
            "endPos": {
                "line": 631,
                "column": 28
            }
        },
        {
            "usedConstants": [],
            "tactic": "intro x hx",
            "proofState": 182,
            "pos": {
                "line": 632,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 632,
                "column": 12
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Membership.mem",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "LE.le",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instMembership",
                "instHMul",
                "Set"
            ],
            "tactic": "exact fun x hx y hy hxy => by\n  simp only [Set.mem_Icc] at hx hy\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y - 12)]",
            "proofState": 183,
            "pos": {
                "line": 640,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 9 * x ^ 2 - 144 * x + 2880) sorry",
            "endPos": {
                "line": 642,
                "column": 57
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Set.mem_Icc] at hx hy",
            "proofState": 184,
            "pos": {
                "line": 641,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 9 * x ^ 2 - 144 * x + 2880) x \u2264 (fun x => 9 * x ^ 2 - 144 * x + 2880) y",
            "endPos": {
                "line": 641,
                "column": 36
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 185,
            "pos": {
                "line": 645,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 80 * x + 800) sorry",
            "endPos": {
                "line": 645,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 186,
            "pos": {
                "line": 653,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 24 * x + 324) sorry",
            "endPos": {
                "line": 653,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Nat.instIsOrderedAddMonoid",
                "IsOrderedRing.toPosMulMono",
                "HMul.hMul",
                "Nat.instMonoid",
                "IsCancelAdd.toIsLeftCancelAdd",
                "PartialOrder.toPreorder",
                "HSub.hSub",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "SemilatticeInf.toPartialOrder",
                "Monoid.toNatPow",
                "DistribLattice.toLattice",
                "Distrib.toAdd",
                "Nat.instStarOrderedRing",
                "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
                "Nat.instStarRing",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "Nat.instNonUnitalSemiring",
                "instZeroLEOneClass",
                "instHAdd",
                "Nat.instIsOrderedCancelAddMonoid",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Nat",
                "StarOrderedRing.toExistsAddOfLE",
                "sq_nonneg",
                "Nat.instCommSemiring",
                "Nat.instPartialOrder",
                "StarOrderedRing.toIsOrderedRing",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Nat.instAddCommMonoid",
                "Nat.instSemiring",
                "Zero.toOfNat0",
                "instHPow",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "instDistribLatticeOfLinearOrder",
                "IsOrderedCancelAddMonoid.toIsCancelAdd",
                "letFun",
                "IsCancelAdd.toIsRightCancelAdd",
                "MonoidWithZero.toMonoid",
                "MulZeroClass.toZero",
                "Lattice.toSemilatticeInf",
                "IsOrderedAddMonoid.toAddLeftMono",
                "Semiring.toMonoidWithZero",
                "instHMul",
                "Nat.instLinearOrder"
            ],
            "tactic": "have := sq_nonneg (x - 4)",
            "proofState": 187,
            "pos": {
                "line": 654,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 4 * x ^ 2 - 24 * x + 324) x \u2264 (fun x => 4 * x ^ 2 - 24 * x + 324) y",
            "endPos": {
                "line": 654,
                "column": 27
            }
        },
        {
            "usedConstants": [
                "Nat.instIsOrderedAddMonoid",
                "IsOrderedRing.toPosMulMono",
                "HMul.hMul",
                "Nat.instMonoid",
                "IsCancelAdd.toIsLeftCancelAdd",
                "PartialOrder.toPreorder",
                "HSub.hSub",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "SemilatticeInf.toPartialOrder",
                "Monoid.toNatPow",
                "DistribLattice.toLattice",
                "Distrib.toAdd",
                "Nat.instStarOrderedRing",
                "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
                "Nat.instStarRing",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "Nat.instNonUnitalSemiring",
                "instZeroLEOneClass",
                "instHAdd",
                "Nat.instIsOrderedCancelAddMonoid",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Nat",
                "StarOrderedRing.toExistsAddOfLE",
                "sq_nonneg",
                "Nat.instCommSemiring",
                "Nat.instPartialOrder",
                "StarOrderedRing.toIsOrderedRing",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Nat.instAddCommMonoid",
                "Nat.instSemiring",
                "Zero.toOfNat0",
                "instHPow",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "instDistribLatticeOfLinearOrder",
                "IsOrderedCancelAddMonoid.toIsCancelAdd",
                "letFun",
                "IsCancelAdd.toIsRightCancelAdd",
                "MonoidWithZero.toMonoid",
                "MulZeroClass.toZero",
                "Lattice.toSemilatticeInf",
                "IsOrderedAddMonoid.toAddLeftMono",
                "Semiring.toMonoidWithZero",
                "instHMul",
                "Nat.instLinearOrder"
            ],
            "tactic": "have := sq_nonneg (y - 4)",
            "proofState": 188,
            "pos": {
                "line": 655,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\nthis : 0 \u2264 (x - 4) ^ 2\n\u22a2 (fun x => 4 * x ^ 2 - 24 * x + 324) x \u2264 (fun x => 4 * x ^ 2 - 24 * x + 324) y",
            "endPos": {
                "line": 655,
                "column": 27
            }
        },
        {
            "usedConstants": [
                "Nat.instIsOrderedAddMonoid",
                "IsOrderedRing.toPosMulMono",
                "HMul.hMul",
                "Nat.instMonoid",
                "IsCancelAdd.toIsLeftCancelAdd",
                "PartialOrder.toPreorder",
                "HSub.hSub",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "SemilatticeInf.toPartialOrder",
                "Monoid.toNatPow",
                "DistribLattice.toLattice",
                "Distrib.toAdd",
                "Nat.instStarOrderedRing",
                "IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono",
                "Nat.instStarRing",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "Nat.instNonUnitalSemiring",
                "instZeroLEOneClass",
                "instHAdd",
                "Nat.instIsOrderedCancelAddMonoid",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Nat",
                "StarOrderedRing.toExistsAddOfLE",
                "sq_nonneg",
                "Nat.instCommSemiring",
                "Nat.instPartialOrder",
                "StarOrderedRing.toIsOrderedRing",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Nat.instAddCommMonoid",
                "Nat.instSemiring",
                "Zero.toOfNat0",
                "instHPow",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "instDistribLatticeOfLinearOrder",
                "IsOrderedCancelAddMonoid.toIsCancelAdd",
                "letFun",
                "IsCancelAdd.toIsRightCancelAdd",
                "MonoidWithZero.toMonoid",
                "MulZeroClass.toZero",
                "Lattice.toSemilatticeInf",
                "IsOrderedAddMonoid.toAddLeftMono",
                "Semiring.toMonoidWithZero",
                "instHMul",
                "Nat.instLinearOrder"
            ],
            "tactic": "have := sq_nonneg (x + y - 4)",
            "proofState": 189,
            "pos": {
                "line": 656,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\nthis\u271d : 0 \u2264 (x - 4) ^ 2\nthis : 0 \u2264 (y - 4) ^ 2\n\u22a2 (fun x => 4 * x ^ 2 - 24 * x + 324) x \u2264 (fun x => 4 * x ^ 2 - 24 * x + 324) y",
            "endPos": {
                "line": 656,
                "column": 31
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [hx.1, hx.2, hy.1, hy.2, hxy]",
            "proofState": 190,
            "pos": {
                "line": 657,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\nthis\u271d\u00b9 : 0 \u2264 (x - 4) ^ 2\nthis\u271d : 0 \u2264 (y - 4) ^ 2\nthis : 0 \u2264 (x + y - 4) ^ 2\n\u22a2 (fun x => 4 * x ^ 2 - 24 * x + 324) x \u2264 (fun x => 4 * x ^ 2 - 24 * x + 324) y",
            "endPos": {
                "line": 657,
                "column": 41
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 191,
            "pos": {
                "line": 660,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 20 * x + 100) sorry",
            "endPos": {
                "line": 660,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Monoid.toNatPow",
                "id",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "LE.le",
                "instHAdd",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "instAddNat",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "simp_all only [Icc_def, Set.mem_setOf_eq, ge_iff_le]",
            "proofState": 192,
            "pos": {
                "line": 661,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 10 * x ^ 2 - 20 * x + 100) x \u2264 (fun x => 10 * x ^ 2 - 20 * x + 100) y",
            "endPos": {
                "line": 661,
                "column": 54
            }
        },
        {
            "usedConstants": [
                "Eq.mpr",
                "NonAssocSemiring.toAddCommMonoidWithOne",
                "Mathlib.Tactic.Ring.single_pow",
                "HMul.hMul",
                "Nat.rawCast",
                "Mathlib.Tactic.Ring.mul_zero",
                "Mathlib.Tactic.Ring.mul_pf_left",
                "Mathlib.Tactic.Ring.add_pf_add_gt",
                "congrArg",
                "CommSemiring.toSemiring",
                "Mathlib.Tactic.Ring.mul_pow",
                "Nat.instMonoid",
                "Mathlib.Tactic.Ring.mul_pf_right",
                "AddMonoid.toAddZeroClass",
                "Mathlib.Tactic.Ring.one_mul",
                "HSub.hSub",
                "Mathlib.Tactic.Ring.zero_mul",
                "Nat.instMulOneClass",
                "NonUnitalNonAssocSemiring.toMulZeroClass",
                "Preorder.toLE",
                "Nat.instAddMonoid",
                "Mathlib.Tactic.Ring.instCommSemiringNat",
                "Monoid.toNatPow",
                "id",
                "Distrib.toAdd",
                "AddMonoidWithOne.toNatCast",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "AddCommMonoidWithOne.toAddMonoidWithOne",
                "Mathlib.Meta.NormNum.isNat_ofNat",
                "Mathlib.Tactic.Ring.atom_pf'",
                "LE.le",
                "Mathlib.Tactic.Ring.one_pow",
                "Nat.instAddMonoidWithOne",
                "Mathlib.Tactic.Ring.mul_congr",
                "AddMonoidWithOne.toOne",
                "Mathlib.Tactic.Ring.add_mul",
                "instHAdd",
                "Mathlib.Tactic.Ring.add_pf_add_zero",
                "instHSub",
                "instNatAtLeastTwo",
                "HPow.hPow",
                "Distrib.toMul",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "pow_one",
                "NonAssocSemiring.toNonUnitalNonAssocSemiring",
                "Mathlib.Tactic.Ring.pow_add",
                "Nat",
                "Mathlib.Tactic.Ring.mul_one",
                "congr",
                "Nat.instCommSemiring",
                "One.toOfNat1",
                "NonUnitalNonAssocSemiring.toDistrib",
                "instAddNat",
                "Zero.toOfNat0",
                "Eq.refl",
                "instHPow",
                "Mathlib.Tactic.Ring.cast_pos",
                "Mathlib.Tactic.RingNF.nat_rawCast_1",
                "mul_one",
                "Mathlib.Tactic.Ring.atom_pf",
                "add_zero",
                "OfNat.ofNat",
                "Semiring.toNonAssocSemiring",
                "Eq",
                "instOfNatAtLeastTwo",
                "MonoidWithZero.toMonoid",
                "Mathlib.Tactic.Ring.mul_add",
                "Eq.trans",
                "MulZeroClass.toZero",
                "Mathlib.Tactic.Ring.add_congr",
                "Mathlib.Tactic.Ring.pow_congr",
                "Mathlib.Tactic.Ring.pow_zero",
                "Semiring.toMonoidWithZero",
                "instHMul"
            ],
            "tactic": "ring_nf",
            "proofState": 193,
            "pos": {
                "line": 662,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 10 * x ^ 2 - 20 * x + 100 \u2264 10 * y ^ 2 - 20 * y + 100",
            "endPos": {
                "line": 662,
                "column": 9
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - y)]",
            "proofState": 194,
            "pos": {
                "line": 663,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 100 + (x ^ 2 * 10 - x * 20) \u2264 100 + (y ^ 2 * 10 - y * 20)",
            "endPos": {
                "line": 663,
                "column": 31
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 195,
            "pos": {
                "line": 666,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 98 * x + 1372) sorry",
            "endPos": {
                "line": 666,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq] at hx hy",
            "proofState": 196,
            "pos": {
                "line": 667,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 98 * x + 1372) x \u2264 (fun x => 7 * x ^ 2 - 98 * x + 1372) y",
            "endPos": {
                "line": 667,
                "column": 40
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _",
            "proofState": 197,
            "pos": {
                "line": 672,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 42 * x + 252) sorry",
            "endPos": {
                "line": 672,
                "column": 25
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "rintro x hx y hy h",
            "proofState": 198,
            "pos": {
                "line": 673,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?m.959435",
            "endPos": {
                "line": 673,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "rintro x hx y hy h",
            "proofState": 199,
            "pos": {
                "line": 675,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 42 * x + 252) ?m.959435",
            "endPos": {
                "line": 675,
                "column": 20
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 200,
            "pos": {
                "line": 679,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 56 * x + 112) sorry",
            "endPos": {
                "line": 679,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, le_def] at hx hy",
            "proofState": 201,
            "pos": {
                "line": 680,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 56 * x + 112) x \u2264 (fun x => 7 * x ^ 2 - 56 * x + 112) y",
            "endPos": {
                "line": 680,
                "column": 34
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Ici_self)",
            "proofState": 202,
            "pos": {
                "line": 692,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 4 * x + 8) sorry",
            "endPos": {
                "line": 692,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 203,
            "pos": {
                "line": 693,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 4 * x + 8) ?m.972421",
            "endPos": {
                "line": 693,
                "column": 21
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Ici_self)",
            "proofState": 204,
            "pos": {
                "line": 698,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 70 * x + 1750) sorry",
            "endPos": {
                "line": 698,
                "column": 47
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 205,
            "pos": {
                "line": 699,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 70 * x + 1750) ?m.979037",
            "endPos": {
                "line": 699,
                "column": 28
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.id",
            "proofState": 206,
            "pos": {
                "line": 700,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 70 * x + 1750) sorry",
            "endPos": {
                "line": 700,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "apply Icc_subset_Ici_self",
            "proofState": 207,
            "pos": {
                "line": 701,
                "column": 2
            },
            "goals": "no goals",
            "endPos": {
                "line": 701,
                "column": 27
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 208,
            "pos": {
                "line": 704,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 72 * x + 1296) sorry",
            "endPos": {
                "line": 704,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "Preorder.toLE",
                "Membership.mem",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "LE.le",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instMembership",
                "instHMul",
                "Set"
            ],
            "tactic": "exact fun x hx y hy hxy \u21a6 by\n  simp only [Icc, Set.mem_setOf_eq] at hx hy\n  simp_all only [mul_add, mul_one, mul_neg, mul_comm]\n  ring_nf\n  nlinarith [sq_nonneg (x - y)]",
            "proofState": 209,
            "pos": {
                "line": 711,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 64 * x + 128) sorry",
            "endPos": {
                "line": 715,
                "column": 33
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, Set.mem_setOf_eq] at hx hy",
            "proofState": 210,
            "pos": {
                "line": 712,
                "column": 4
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 8 * x ^ 2 - 64 * x + 128) x \u2264 (fun x => 8 * x ^ 2 - 64 * x + 128) y",
            "endPos": {
                "line": 712,
                "column": 46
            }
        },
        {
            "usedConstants": [
                "MonotoneOn.mono"
            ],
            "tactic": "apply MonotoneOn.mono",
            "proofState": 211,
            "pos": {
                "line": 718,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 32 * x + 192) sorry",
            "endPos": {
                "line": 718,
                "column": 23
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul"
            ],
            "tactic": "apply MonotoneOn.const_mul",
            "proofState": 212,
            "pos": {
                "line": 719,
                "column": 2
            },
            "goals": "case h\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 32 * x + 192) ?s\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 719,
                "column": 28
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 213,
            "pos": {
                "line": 720,
                "column": 2
            },
            "goals": "case s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\ncase h'\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 ?s\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 720,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc_right (by norm_num))",
            "proofState": 214,
            "pos": {
                "line": 738,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 18 * x + 189) sorry",
            "endPos": {
                "line": 738,
                "column": 62
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 215,
            "pos": {
                "line": 739,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 18 * x + 189) ?m.1008416",
            "endPos": {
                "line": 739,
                "column": 19
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "MonotoneOn",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.sub",
            "proofState": 216,
            "pos": {
                "line": 744,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 8 * x + 12) sorry",
            "endPos": {
                "line": 744,
                "column": 22
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 217,
            "pos": {
                "line": 753,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 126 * x + 5670) sorry",
            "endPos": {
                "line": 753,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [mem_Icc] at hx hy",
            "proofState": 218,
            "pos": {
                "line": 754,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 126 * x + 5670) x \u2264 (fun x => 7 * x ^ 2 - 126 * x + 5670) y",
            "endPos": {
                "line": 754,
                "column": 30
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy hxy",
            "proofState": 219,
            "pos": {
                "line": 759,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 60 * x + 1080) sorry",
            "endPos": {
                "line": 759,
                "column": 21
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq, \u2190 sub_le_iff_le_add] at hx hy",
            "proofState": 220,
            "pos": {
                "line": 760,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\n\u22a2 (fun x => 5 * x ^ 2 - 60 * x + 1080) x \u2264 (fun x => 5 * x ^ 2 - 60 * x + 1080) y",
            "endPos": {
                "line": 760,
                "column": 61
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ <| Icc_subset_Icc_right (by norm_num)",
            "proofState": 221,
            "pos": {
                "line": 764,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 40 * x + 300) sorry",
            "endPos": {
                "line": 764,
                "column": 63
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "exact\n  MonotoneOn.sub (MonotoneOn.const_mul (fun _ hx _ hy => by linarith [hx.1, hy.1]) <| by norm_num)\n    (MonotoneOn.const_mul (fun _ hx _ hy => by linarith [hx.1, hy.1]) <| by norm_num)",
            "proofState": 222,
            "pos": {
                "line": 765,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 40 * x + 300) ?m.1034981",
            "endPos": {
                "line": 768,
                "column": 44
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "apply MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 223,
            "pos": {
                "line": 771,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 48 * x + 576) sorry",
            "endPos": {
                "line": 771,
                "column": 70
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "sorryAx",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "Unit",
                "Nat",
                "Function.const",
                "Lean.Name",
                "OfNat.ofNat",
                "Set"
            ],
            "tactic": "exact (convex_Icc _ _).monotoneOn_of_deriv_nonneg (fun x _ => by norm_num) (fun x _ => by norm_num)",
            "proofState": 224,
            "pos": {
                "line": 772,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115",
            "endPos": {
                "line": 775,
                "column": 40
            }
        },
        {
            "usedConstants": [
                "Unit.unit",
                "HMul.hMul",
                "Nat.instMonoid",
                "HSub.hSub",
                "sorryAx",
                "Monoid.toNatPow",
                "instSubNat",
                "HasSubset.Subset",
                "instMulNat",
                "instOfNatNat",
                "Lean.Name.num",
                "Lean.Name.str",
                "Lean.Name.anonymous",
                "Bool.true",
                "instHAdd",
                "Unit",
                "instHSub",
                "HPow.hPow",
                "HAdd.hAdd",
                "Nat.instPreorder",
                "Nat",
                "Function.const",
                "instAddNat",
                "Lean.Name",
                "instHPow",
                "OfNat.ofNat",
                "Set.instHasSubset",
                "MonotoneOn.mono",
                "instHMul",
                "Set"
            ],
            "tactic": "refine' MonotoneOn.mono _ (Icc_subset_Icc (by norm_num) (by norm_num))",
            "proofState": 225,
            "pos": {
                "line": 798,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 28 * x + 168) sorry",
            "endPos": {
                "line": 798,
                "column": 72
            }
        },
        {
            "usedConstants": [],
            "tactic": "exact fun x hx y hy hxy =>\n  sub_le_sub (by nlinarith [sq_nonneg (x - 4), sq_nonneg (y - 4), hxy])\n    (by nlinarith [sq_nonneg (x - 4), sq_nonneg (y - 4), hxy])",
            "proofState": 226,
            "pos": {
                "line": 799,
                "column": 2
            },
            "goals": "case refine'_1\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115\ncase refine'_2\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 28 * x + 168) ?refine'_1",
            "endPos": {
                "line": 801,
                "column": 62
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 4), sq_nonneg (y - 4), hxy]",
            "proofState": 227,
            "pos": {
                "line": 800,
                "column": 8
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.1057148 x\ny : ?m.1057149 x hx\nhy : ?m.1057150 x hx y\nhxy : ?m.1057151 x hx y hy\n\u22a2 ?m.1057156 x hx y hy hxy \u2264 ?m.1057157 x hx y hy hxy",
            "endPos": {
                "line": 800,
                "column": 61
            }
        },
        {
            "usedConstants": [],
            "tactic": "nlinarith [sq_nonneg (x - 4), sq_nonneg (y - 4), hxy]",
            "proofState": 228,
            "pos": {
                "line": 801,
                "column": 8
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.1057148 x\ny : \u2115\nhy : ?m.1057150 x hx y\nhxy : ?m.1057151 x hx y hy\n\u22a2 ?m.1057158 x hx y hy hxy \u2264 ?m.1057159 x hx y hy hxy",
            "endPos": {
                "line": 801,
                "column": 61
            }
        },
        {
            "usedConstants": [
                "Nat"
            ],
            "tactic": "intro x hx y hy h",
            "proofState": 229,
            "pos": {
                "line": 804,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 7 * x ^ 2 - 56 * x + 336) sorry",
            "endPos": {
                "line": 804,
                "column": 19
            }
        },
        {
            "usedConstants": [],
            "tactic": "simp only [Icc, mem_setOf_eq, le_of_lt] at hx hy",
            "proofState": 230,
            "pos": {
                "line": 805,
                "column": 2
            },
            "goals": "x\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\n\u22a2 (fun x => 7 * x ^ 2 - 56 * x + 336) x \u2264 (fun x => 7 * x ^ 2 - 56 * x + 336) y",
            "endPos": {
                "line": 805,
                "column": 50
            }
        }
    ],
    "messages": [
        {
            "severity": "error",
            "pos": {
                "line": 4,
                "column": 55
            },
            "endPos": {
                "line": 4,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.364"
        },
        {
            "severity": "error",
            "pos": {
                "line": 7,
                "column": 17
            },
            "endPos": {
                "line": 7,
                "column": 35
            },
            "data": "unknown identifier 'Icc_subset_Icc_iff'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 8,
                "column": 2
            },
            "endPos": {
                "line": 8,
                "column": 52
            },
            "data": "linarith failed to find a contradiction\ncase h.a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?s\ny : \u2115\nhy : y \u2208 ?s\nh : x \u2264 y\na\u271d : 4 * x ^ 2 - 80 * x + 1600 > 4 * y ^ 2 - 80 * y + 1600\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 10,
                "column": 53
            },
            "endPos": {
                "line": 10,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.28159"
        },
        {
            "severity": "error",
            "pos": {
                "line": 11,
                "column": 27
            },
            "endPos": {
                "line": 11,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Ici_self'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 12,
                "column": 10
            },
            "endPos": {
                "line": 12,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 20,
                "column": 54
            },
            "endPos": {
                "line": 20,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.34775"
        },
        {
            "severity": "error",
            "pos": {
                "line": 21,
                "column": 8
            },
            "endPos": {
                "line": 21,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 22,
                "column": 2
            },
            "endPos": {
                "line": 22,
                "column": 22
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 42,
                "column": 54
            },
            "endPos": {
                "line": 42,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.42019"
        },
        {
            "severity": "error",
            "pos": {
                "line": 45,
                "column": 2
            },
            "endPos": {
                "line": 45,
                "column": 50
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry ()\ny : \u2115\nhy : y \u2208 sorry ()\nh : x \u2264 y\na\u271d : (fun x => 4 * x ^ 2 - 40 * x + 200) x > (fun x => 4 * x ^ 2 - 40 * x + 200) y\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 47,
                "column": 56
            },
            "endPos": {
                "line": 47,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.69549"
        },
        {
            "severity": "error",
            "pos": {
                "line": 48,
                "column": 8
            },
            "endPos": {
                "line": 48,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.75454 \u2192 ?m.75455) \u2192 Set ?m.75454 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 49,
                "column": 2
            },
            "endPos": {
                "line": 50,
                "column": 71
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 54,
                "column": 55
            },
            "endPos": {
                "line": 54,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.76750"
        },
        {
            "severity": "error",
            "pos": {
                "line": 55,
                "column": 8
            },
            "endPos": {
                "line": 55,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.82655 \u2192 ?m.82656) \u2192 Set ?m.82655 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 56,
                "column": 2
            },
            "endPos": {
                "line": 56,
                "column": 28
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 69,
                "column": 54
            },
            "endPos": {
                "line": 69,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.83951"
        },
        {
            "severity": "error",
            "pos": {
                "line": 70,
                "column": 27
            },
            "endPos": {
                "line": 70,
                "column": 41
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 71,
                "column": 10
            },
            "endPos": {
                "line": 71,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 77,
                "column": 56
            },
            "endPos": {
                "line": 77,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.90567"
        },
        {
            "severity": "error",
            "pos": {
                "line": 78,
                "column": 27
            },
            "endPos": {
                "line": 78,
                "column": 41
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 79,
                "column": 10
            },
            "endPos": {
                "line": 79,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 85,
                "column": 54
            },
            "endPos": {
                "line": 85,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.97183"
        },
        {
            "severity": "error",
            "pos": {
                "line": 87,
                "column": 2
            },
            "endPos": {
                "line": 87,
                "column": 57
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 87,
                "column": 18
            },
            "endPos": {
                "line": 87,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 87,
                "column": 2
            },
            "endPos": {
                "line": 87,
                "column": 57
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 99,
                "column": 54
            },
            "endPos": {
                "line": 99,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.103562"
        },
        {
            "severity": "error",
            "pos": {
                "line": 101,
                "column": 2
            },
            "endPos": {
                "line": 101,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 105,
                "column": 54
            },
            "endPos": {
                "line": 105,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.109945"
        },
        {
            "severity": "error",
            "pos": {
                "line": 107,
                "column": 2
            },
            "endPos": {
                "line": 107,
                "column": 44
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 107,
                "column": 2
            },
            "endPos": {
                "line": 107,
                "column": 44
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 110,
                "column": 54
            },
            "endPos": {
                "line": 110,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.116315"
        },
        {
            "severity": "error",
            "pos": {
                "line": 112,
                "column": 2
            },
            "endPos": {
                "line": 112,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 115,
                "column": 54
            },
            "endPos": {
                "line": 115,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.122698"
        },
        {
            "severity": "error",
            "pos": {
                "line": 116,
                "column": 27
            },
            "endPos": {
                "line": 116,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Ici_self'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 117,
                "column": 10
            },
            "endPos": {
                "line": 117,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 122,
                "column": 56
            },
            "endPos": {
                "line": 122,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.129314"
        },
        {
            "severity": "error",
            "pos": {
                "line": 127,
                "column": 54
            },
            "endPos": {
                "line": 127,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.136366"
        },
        {
            "severity": "error",
            "pos": {
                "line": 129,
                "column": 2
            },
            "endPos": {
                "line": 129,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 132,
                "column": 54
            },
            "endPos": {
                "line": 132,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.142749"
        },
        {
            "severity": "error",
            "pos": {
                "line": 134,
                "column": 2
            },
            "endPos": {
                "line": 134,
                "column": 18
            },
            "data": "tactic 'apply' failed, failed to unify\n  \u2200 \u2983a b : ?\ud835\udd5c\u2984, 0 \u2264 a \u2192 0 \u2264 b \u2192 a + b = 1 \u2192 a \u2022 ?x + b \u2022 ?y \u2208 Set.Icc ?r ?s\nwith\n  MonotoneOn (fun x => 4 * x ^ 2 - 72 * x + 324) ?s\ncase h\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 72 * x + 324) ?s"
        },
        {
            "severity": "error",
            "pos": {
                "line": 140,
                "column": 53
            },
            "endPos": {
                "line": 140,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.149636"
        },
        {
            "severity": "error",
            "pos": {
                "line": 141,
                "column": 27
            },
            "endPos": {
                "line": 141,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 143,
                "column": 4
            },
            "endPos": {
                "line": 143,
                "column": 71
            },
            "data": "linarith failed to find a contradiction\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.155900 x\ny : \u2115\nhy : ?m.155902 x hx y\nhxy : ?m.155903 x hx y hy\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 142,
                "column": 2
            },
            "endPos": {
                "line": 143,
                "column": 71
            },
            "data": "type mismatch\n  fun x hx y hy hxy => ?m.155899\nhas type\n  (x : \u2115) \u2192\n    (hx : ?m.155900 x) \u2192\n      (y : \u2115) \u2192\n        (hy : ?m.155902 x hx y) \u2192\n          (hxy : ?m.155903 x hx y hy) \u2192\n            ?m.155904 x hx y hy hxy : Sort (imax 1 ?u.155885 1 ?u.155891 ?u.155894 ?u.155897)\nbut is expected to have type\n  Set \u2115 : Type"
        },
        {
            "severity": "error",
            "pos": {
                "line": 145,
                "column": 54
            },
            "endPos": {
                "line": 145,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.172752"
        },
        {
            "severity": "error",
            "pos": {
                "line": 146,
                "column": 8
            },
            "endPos": {
                "line": 146,
                "column": 58
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 148,
                "column": 54
            },
            "endPos": {
                "line": 148,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.179838"
        },
        {
            "severity": "error",
            "pos": {
                "line": 150,
                "column": 2
            },
            "endPos": {
                "line": 150,
                "column": 48
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 150,
                "column": 26
            },
            "endPos": {
                "line": 150,
                "column": 38
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 152,
                "column": 2
            },
            "endPos": {
                "line": 152,
                "column": 50
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx y : \u2115\nhxy : x \u2264 y\nhx hy : True\na\u271d : 700 + (x ^ 2 * 4 - x * 40) > 700 + (y ^ 2 * 4 - y * 40)\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 176,
                "column": 55
            },
            "endPos": {
                "line": 176,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.208792"
        },
        {
            "severity": "error",
            "pos": {
                "line": 178,
                "column": 2
            },
            "endPos": {
                "line": 178,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 183,
                "column": 55
            },
            "endPos": {
                "line": 183,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.215175"
        },
        {
            "severity": "error",
            "pos": {
                "line": 185,
                "column": 17
            },
            "endPos": {
                "line": 185,
                "column": 24
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 187,
                "column": 2
            },
            "endPos": {
                "line": 187,
                "column": 51
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\na\u271d : 3600 + (x ^ 2 * 4 - x * 80) > 3600 + (y ^ 2 * 4 - y * 80)\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 189,
                "column": 55
            },
            "endPos": {
                "line": 189,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.241029"
        },
        {
            "severity": "error",
            "pos": {
                "line": 191,
                "column": 17
            },
            "endPos": {
                "line": 191,
                "column": 35
            },
            "data": "unknown identifier 'Icc_subset_Icc_iff'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 193,
                "column": 2
            },
            "endPos": {
                "line": 193,
                "column": 58
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\na\u271d : 1000 + (x ^ 2 * 8 - x * 80) > 1000 + (y ^ 2 * 8 - y * 80)\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 195,
                "column": 55
            },
            "endPos": {
                "line": 195,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.270941"
        },
        {
            "severity": "error",
            "pos": {
                "line": 196,
                "column": 8
            },
            "endPos": {
                "line": 196,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.276846 \u2192 ?m.276847) \u2192 Set ?m.276846 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 197,
                "column": 2
            },
            "endPos": {
                "line": 198,
                "column": 73
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 202,
                "column": 55
            },
            "endPos": {
                "line": 202,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.278142"
        },
        {
            "severity": "error",
            "pos": {
                "line": 204,
                "column": 2
            },
            "endPos": {
                "line": 204,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 207,
                "column": 54
            },
            "endPos": {
                "line": 207,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.284525"
        },
        {
            "severity": "error",
            "pos": {
                "line": 209,
                "column": 12
            },
            "endPos": {
                "line": 209,
                "column": 14
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 213,
                "column": 4
            },
            "endPos": {
                "line": 213,
                "column": 31
            },
            "data": "simp_all made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 214,
                "column": 4
            },
            "endPos": {
                "line": 214,
                "column": 12
            },
            "data": "linarith failed to find a contradiction\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 216,
                "column": 55
            },
            "endPos": {
                "line": 216,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.298617"
        },
        {
            "severity": "error",
            "pos": {
                "line": 217,
                "column": 42
            },
            "endPos": {
                "line": 217,
                "column": 51
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 218,
                "column": 17
            },
            "endPos": {
                "line": 218,
                "column": 34
            },
            "data": "function expected at\n  Icc\nterm has type\n  x\u271d"
        },
        {
            "severity": "error",
            "pos": {
                "line": 216,
                "column": 77
            },
            "endPos": {
                "line": 224,
                "column": 49
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 Set \u2115"
        },
        {
            "severity": "error",
            "pos": {
                "line": 226,
                "column": 54
            },
            "endPos": {
                "line": 226,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.313938"
        },
        {
            "severity": "error",
            "pos": {
                "line": 227,
                "column": 27
            },
            "endPos": {
                "line": 227,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 228,
                "column": 8
            },
            "endPos": {
                "line": 228,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.320188 \u2192 ?m.320189) \u2192 Set ?m.320188 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 229,
                "column": 10
            },
            "endPos": {
                "line": 229,
                "column": 30
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 230,
                "column": 4
            },
            "endPos": {
                "line": 230,
                "column": 24
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 232,
                "column": 2
            },
            "endPos": {
                "line": 234,
                "column": 23
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 239,
                "column": 53
            },
            "endPos": {
                "line": 239,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.322465"
        },
        {
            "severity": "error",
            "pos": {
                "line": 241,
                "column": 2
            },
            "endPos": {
                "line": 241,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 244,
                "column": 55
            },
            "endPos": {
                "line": 244,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.328848"
        },
        {
            "severity": "error",
            "pos": {
                "line": 247,
                "column": 2
            },
            "endPos": {
                "line": 247,
                "column": 97
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\na\u271d : 10 * x ^ 2 - 40 * x + 240 > 10 * y ^ 2 - 40 * y + 240\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 249,
                "column": 55
            },
            "endPos": {
                "line": 249,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.368009"
        },
        {
            "severity": "error",
            "pos": {
                "line": 251,
                "column": 13
            },
            "endPos": {
                "line": 251,
                "column": 20
            },
            "data": "unknown identifier 'mem_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 251,
                "column": 2
            },
            "endPos": {
                "line": 251,
                "column": 30
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 254,
                "column": 53
            },
            "endPos": {
                "line": 254,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.374364"
        },
        {
            "severity": "error",
            "pos": {
                "line": 256,
                "column": 2
            },
            "endPos": {
                "line": 256,
                "column": 57
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 256,
                "column": 18
            },
            "endPos": {
                "line": 256,
                "column": 36
            },
            "data": "unknown identifier 'le_set_biUnion_iff'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 256,
                "column": 38
            },
            "endPos": {
                "line": 256,
                "column": 45
            },
            "data": "unknown identifier 'mem_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 257,
                "column": 2
            },
            "endPos": {
                "line": 257,
                "column": 82
            },
            "data": "simp_all made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 260,
                "column": 51
            },
            "endPos": {
                "line": 260,
                "column": 69
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.381153"
        },
        {
            "severity": "error",
            "pos": {
                "line": 261,
                "column": 27
            },
            "endPos": {
                "line": 261,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Ici_self'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 262,
                "column": 10
            },
            "endPos": {
                "line": 262,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 267,
                "column": 56
            },
            "endPos": {
                "line": 267,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.387769"
        },
        {
            "severity": "error",
            "pos": {
                "line": 268,
                "column": 8
            },
            "endPos": {
                "line": 268,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 269,
                "column": 2
            },
            "endPos": {
                "line": 269,
                "column": 21
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 287,
                "column": 56
            },
            "endPos": {
                "line": 287,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.395013"
        },
        {
            "severity": "error",
            "pos": {
                "line": 289,
                "column": 2
            },
            "endPos": {
                "line": 289,
                "column": 40
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 289,
                "column": 18
            },
            "endPos": {
                "line": 289,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 289,
                "column": 2
            },
            "endPos": {
                "line": 289,
                "column": 40
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 292,
                "column": 54
            },
            "endPos": {
                "line": 292,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.401369"
        },
        {
            "severity": "error",
            "pos": {
                "line": 293,
                "column": 8
            },
            "endPos": {
                "line": 293,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.407274 \u2192 ?m.407275) \u2192 Set ?m.407274 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 294,
                "column": 2
            },
            "endPos": {
                "line": 296,
                "column": 15
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 305,
                "column": 53
            },
            "endPos": {
                "line": 305,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.408570"
        },
        {
            "severity": "error",
            "pos": {
                "line": 307,
                "column": 17
            },
            "endPos": {
                "line": 307,
                "column": 24
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 310,
                "column": 54
            },
            "endPos": {
                "line": 310,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.415888"
        },
        {
            "severity": "error",
            "pos": {
                "line": 311,
                "column": 27
            },
            "endPos": {
                "line": 311,
                "column": 41
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 313,
                "column": 4
            },
            "endPos": {
                "line": 315,
                "column": 87
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.422136 \u2192 ?m.422137) \u2192 Set ?m.422136 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 310,
                "column": 76
            },
            "endPos": {
                "line": 315,
                "column": 87
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 8 * x ^ 2 - 48 * x + 432) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 317,
                "column": 54
            },
            "endPos": {
                "line": 317,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.423278"
        },
        {
            "severity": "error",
            "pos": {
                "line": 318,
                "column": 8
            },
            "endPos": {
                "line": 318,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.429183 \u2192 ?m.429184) \u2192 Set ?m.429183 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 319,
                "column": 2
            },
            "endPos": {
                "line": 319,
                "column": 62
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 322,
                "column": 54
            },
            "endPos": {
                "line": 322,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.430479"
        },
        {
            "severity": "error",
            "pos": {
                "line": 324,
                "column": 2
            },
            "endPos": {
                "line": 324,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 327,
                "column": 54
            },
            "endPos": {
                "line": 327,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.436862"
        },
        {
            "severity": "error",
            "pos": {
                "line": 328,
                "column": 8
            },
            "endPos": {
                "line": 328,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 329,
                "column": 2
            },
            "endPos": {
                "line": 329,
                "column": 22
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 333,
                "column": 56
            },
            "endPos": {
                "line": 333,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.444106"
        },
        {
            "severity": "error",
            "pos": {
                "line": 334,
                "column": 26
            },
            "endPos": {
                "line": 334,
                "column": 45
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 335,
                "column": 10
            },
            "endPos": {
                "line": 335,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 339,
                "column": 56
            },
            "endPos": {
                "line": 339,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.450722"
        },
        {
            "severity": "error",
            "pos": {
                "line": 340,
                "column": 8
            },
            "endPos": {
                "line": 340,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.456627 \u2192 ?m.456628) \u2192 Set ?m.456627 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 341,
                "column": 2
            },
            "endPos": {
                "line": 341,
                "column": 28
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 358,
                "column": 54
            },
            "endPos": {
                "line": 358,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.457923"
        },
        {
            "severity": "error",
            "pos": {
                "line": 360,
                "column": 13
            },
            "endPos": {
                "line": 360,
                "column": 20
            },
            "data": "unknown identifier 'mem_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 360,
                "column": 2
            },
            "endPos": {
                "line": 360,
                "column": 30
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 364,
                "column": 54
            },
            "endPos": {
                "line": 364,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.464278"
        },
        {
            "severity": "error",
            "pos": {
                "line": 366,
                "column": 2
            },
            "endPos": {
                "line": 366,
                "column": 40
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 366,
                "column": 18
            },
            "endPos": {
                "line": 366,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 366,
                "column": 2
            },
            "endPos": {
                "line": 366,
                "column": 40
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 371,
                "column": 54
            },
            "endPos": {
                "line": 371,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.470634"
        },
        {
            "severity": "error",
            "pos": {
                "line": 373,
                "column": 2
            },
            "endPos": {
                "line": 373,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 376,
                "column": 54
            },
            "endPos": {
                "line": 376,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.477017"
        },
        {
            "severity": "error",
            "pos": {
                "line": 377,
                "column": 8
            },
            "endPos": {
                "line": 377,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.482922 \u2192 ?m.482923) \u2192 Set ?m.482922 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 378,
                "column": 2
            },
            "endPos": {
                "line": 378,
                "column": 73
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 381,
                "column": 54
            },
            "endPos": {
                "line": 381,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.484218"
        },
        {
            "severity": "error",
            "pos": {
                "line": 382,
                "column": 26
            },
            "endPos": {
                "line": 382,
                "column": 45
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 384,
                "column": 15
            },
            "endPos": {
                "line": 384,
                "column": 22
            },
            "data": "unknown identifier 'mem_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 384,
                "column": 4
            },
            "endPos": {
                "line": 384,
                "column": 32
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 383,
                "column": 2
            },
            "endPos": {
                "line": 385,
                "column": 33
            },
            "data": "type mismatch\n  fun x hx y hy hxy => ?m.490481\nhas type\n  (x : \u2115) \u2192\n    (hx : ?m.490482 x) \u2192\n      (y : ?m.490483 x hx) \u2192\n        (hy : ?m.490484 x hx y) \u2192\n          (hxy : ?m.490485 x hx y hy) \u2192\n            ?m.490486 x hx y hy hxy : Sort (imax 1 ?u.490467 ?u.490470 ?u.490473 ?u.490476 ?u.490479)\nbut is expected to have type\n  Set \u2115 : Type"
        },
        {
            "severity": "error",
            "pos": {
                "line": 387,
                "column": 54
            },
            "endPos": {
                "line": 387,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.490893"
        },
        {
            "severity": "error",
            "pos": {
                "line": 389,
                "column": 17
            },
            "endPos": {
                "line": 389,
                "column": 24
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 394,
                "column": 2
            },
            "endPos": {
                "line": 394,
                "column": 50
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\nh : \u2200 (x : \u2115), True\na\u271d : 5 * x ^ 2 - 40 * x + 320 > 5 * y ^ 2 - 40 * y + 320\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 396,
                "column": 57
            },
            "endPos": {
                "line": 396,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.526077"
        },
        {
            "severity": "error",
            "pos": {
                "line": 397,
                "column": 8
            },
            "endPos": {
                "line": 397,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.531982 \u2192 ?m.531983) \u2192 Set ?m.531982 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 398,
                "column": 2
            },
            "endPos": {
                "line": 398,
                "column": 12
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 412,
                "column": 53
            },
            "endPos": {
                "line": 412,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.533278"
        },
        {
            "severity": "error",
            "pos": {
                "line": 413,
                "column": 27
            },
            "endPos": {
                "line": 413,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Ici_self'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 415,
                "column": 4
            },
            "endPos": {
                "line": 418,
                "column": 42
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.539526 \u2192 ?m.539527) \u2192 Set ?m.539526 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 412,
                "column": 76
            },
            "endPos": {
                "line": 418,
                "column": 42
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 24 * x + 48) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 420,
                "column": 53
            },
            "endPos": {
                "line": 420,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.540668"
        },
        {
            "severity": "error",
            "pos": {
                "line": 421,
                "column": 27
            },
            "endPos": {
                "line": 421,
                "column": 47
            },
            "data": "unknown identifier 'Icc_subset_Icc_right'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 422,
                "column": 10
            },
            "endPos": {
                "line": 422,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 430,
                "column": 56
            },
            "endPos": {
                "line": 430,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.547284"
        },
        {
            "severity": "error",
            "pos": {
                "line": 438,
                "column": 53
            },
            "endPos": {
                "line": 438,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.554206"
        },
        {
            "severity": "error",
            "pos": {
                "line": 439,
                "column": 26
            },
            "endPos": {
                "line": 439,
                "column": 45
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 440,
                "column": 10
            },
            "endPos": {
                "line": 440,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 445,
                "column": 54
            },
            "endPos": {
                "line": 445,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.560822"
        },
        {
            "severity": "error",
            "pos": {
                "line": 446,
                "column": 27
            },
            "endPos": {
                "line": 446,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 447,
                "column": 8
            },
            "endPos": {
                "line": 447,
                "column": 66
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 445,
                "column": 77
            },
            "endPos": {
                "line": 453,
                "column": 30
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 6 * x ^ 2 - 36 * x + 108) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 455,
                "column": 54
            },
            "endPos": {
                "line": 455,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.568255"
        },
        {
            "severity": "error",
            "pos": {
                "line": 456,
                "column": 8
            },
            "endPos": {
                "line": 456,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.574160 \u2192 ?m.574161) \u2192 Set ?m.574160 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 457,
                "column": 2
            },
            "endPos": {
                "line": 461,
                "column": 52
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 468,
                "column": 55
            },
            "endPos": {
                "line": 468,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.575456"
        },
        {
            "severity": "error",
            "pos": {
                "line": 469,
                "column": 27
            },
            "endPos": {
                "line": 469,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Icc_left'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 471,
                "column": 4
            },
            "endPos": {
                "line": 471,
                "column": 33
            },
            "data": "linarith failed to find a contradiction\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.581720 x\ny : \u2115\nhy : ?m.581722 x hx y\nh : ?m.581723 x hx y hy\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 470,
                "column": 2
            },
            "endPos": {
                "line": 471,
                "column": 33
            },
            "data": "type mismatch\n  fun x hx y hy h => ?m.581719\nhas type\n  (x : \u2115) \u2192\n    (hx : ?m.581720 x) \u2192\n      (y : \u2115) \u2192\n        (hy : ?m.581722 x hx y) \u2192\n          (h : ?m.581723 x hx y hy) \u2192 ?m.581724 x hx y hy h : Sort (imax 1 ?u.581705 1 ?u.581711 ?u.581714 ?u.581717)\nbut is expected to have type\n  Set \u2115 : Type"
        },
        {
            "severity": "error",
            "pos": {
                "line": 473,
                "column": 54
            },
            "endPos": {
                "line": 473,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.588655"
        },
        {
            "severity": "error",
            "pos": {
                "line": 475,
                "column": 2
            },
            "endPos": {
                "line": 475,
                "column": 47
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 475,
                "column": 18
            },
            "endPos": {
                "line": 475,
                "column": 27
            },
            "data": "unknown identifier 'mem_setOf'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 475,
                "column": 2
            },
            "endPos": {
                "line": 475,
                "column": 47
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 478,
                "column": 55
            },
            "endPos": {
                "line": 478,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.595033"
        },
        {
            "severity": "error",
            "pos": {
                "line": 480,
                "column": 2
            },
            "endPos": {
                "line": 480,
                "column": 39
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 480,
                "column": 2
            },
            "endPos": {
                "line": 480,
                "column": 39
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 485,
                "column": 54
            },
            "endPos": {
                "line": 485,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.601401"
        },
        {
            "severity": "error",
            "pos": {
                "line": 488,
                "column": 2
            },
            "endPos": {
                "line": 488,
                "column": 55
            },
            "data": "linarith failed to find a contradiction\ncase h.a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?s\ny : \u2115\nhy : y \u2208 ?s\nhxy : x \u2264 y\na\u271d : (fun x => 9 * x ^ 2 - 54 * x + 162) x > (fun x => 9 * x ^ 2 - 54 * x + 162) y\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 491,
                "column": 55
            },
            "endPos": {
                "line": 491,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.630103"
        },
        {
            "severity": "error",
            "pos": {
                "line": 493,
                "column": 13
            },
            "endPos": {
                "line": 493,
                "column": 20
            },
            "data": "unknown identifier 'mem_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 493,
                "column": 2
            },
            "endPos": {
                "line": 493,
                "column": 30
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 497,
                "column": 52
            },
            "endPos": {
                "line": 497,
                "column": 69
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.636458"
        },
        {
            "severity": "error",
            "pos": {
                "line": 499,
                "column": 15
            },
            "endPos": {
                "line": 499,
                "column": 16
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\n\u22a2 x \u2208 ?m.642363"
        },
        {
            "severity": "error",
            "pos": {
                "line": 505,
                "column": 4
            },
            "endPos": {
                "line": 505,
                "column": 8
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 497,
                "column": 74
            },
            "endPos": {
                "line": 505,
                "column": 18
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 2 * x ^ 2 - 4 * x + 12) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 507,
                "column": 53
            },
            "endPos": {
                "line": 507,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.643085"
        },
        {
            "severity": "error",
            "pos": {
                "line": 508,
                "column": 8
            },
            "endPos": {
                "line": 508,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 509,
                "column": 2
            },
            "endPos": {
                "line": 509,
                "column": 22
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 522,
                "column": 53
            },
            "endPos": {
                "line": 522,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.650324"
        },
        {
            "severity": "error",
            "pos": {
                "line": 524,
                "column": 2
            },
            "endPos": {
                "line": 524,
                "column": 83
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 524,
                "column": 2
            },
            "endPos": {
                "line": 524,
                "column": 83
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 527,
                "column": 54
            },
            "endPos": {
                "line": 527,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.656793"
        },
        {
            "severity": "error",
            "pos": {
                "line": 528,
                "column": 29
            },
            "endPos": {
                "line": 528,
                "column": 43
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 529,
                "column": 10
            },
            "endPos": {
                "line": 529,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\ncase refine'_1\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 533,
                "column": 53
            },
            "endPos": {
                "line": 533,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.663250"
        },
        {
            "severity": "error",
            "pos": {
                "line": 534,
                "column": 37
            },
            "endPos": {
                "line": 534,
                "column": 48
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 ?m.669155\n\u22a2 \u2200 \u2983b : \u2115\u2984, b \u2208 ?m.669155 \u2192 x \u2264 b \u2192 6 * x ^ 2 \u2264 6 * b ^ 2 - 12 * b + 12 * x"
        },
        {
            "severity": "error",
            "pos": {
                "line": 535,
                "column": 13
            },
            "endPos": {
                "line": 535,
                "column": 14
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\n\u22a2 x \u2208 ?m.669155"
        },
        {
            "severity": "error",
            "pos": {
                "line": 539,
                "column": 54
            },
            "endPos": {
                "line": 539,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.743095"
        },
        {
            "severity": "error",
            "pos": {
                "line": 541,
                "column": 13
            },
            "endPos": {
                "line": 541,
                "column": 20
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 541,
                "column": 22
            },
            "endPos": {
                "line": 541,
                "column": 34
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 541,
                "column": 2
            },
            "endPos": {
                "line": 541,
                "column": 44
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 544,
                "column": 56
            },
            "endPos": {
                "line": 544,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.749454"
        },
        {
            "severity": "error",
            "pos": {
                "line": 546,
                "column": 2
            },
            "endPos": {
                "line": 547,
                "column": 14
            },
            "data": "simp_all made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 550,
                "column": 57
            },
            "endPos": {
                "line": 550,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.756273"
        },
        {
            "severity": "error",
            "pos": {
                "line": 551,
                "column": 29
            },
            "endPos": {
                "line": 551,
                "column": 43
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 553,
                "column": 4
            },
            "endPos": {
                "line": 556,
                "column": 52
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.762521 \u2192 ?m.762522) \u2192 Set ?m.762521 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 550,
                "column": 80
            },
            "endPos": {
                "line": 556,
                "column": 52
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 10 * x ^ 2 - 100 * x + 2000) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 558,
                "column": 57
            },
            "endPos": {
                "line": 558,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.763663"
        },
        {
            "severity": "error",
            "pos": {
                "line": 560,
                "column": 2
            },
            "endPos": {
                "line": 560,
                "column": 40
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 560,
                "column": 18
            },
            "endPos": {
                "line": 560,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 560,
                "column": 2
            },
            "endPos": {
                "line": 560,
                "column": 40
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 564,
                "column": 55
            },
            "endPos": {
                "line": 564,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.770019"
        },
        {
            "severity": "error",
            "pos": {
                "line": 566,
                "column": 12
            },
            "endPos": {
                "line": 566,
                "column": 14
            },
            "data": "tactic 'introN' failed, insufficient number of binders\ncase refine'_1\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 571,
                "column": 2
            },
            "endPos": {
                "line": 571,
                "column": 12
            },
            "data": "unsolved goals\ncase refine'_2\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 5 * x ^ 2 - 90 * x + 4050) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 564,
                "column": 78
            },
            "endPos": {
                "line": 571,
                "column": 12
            },
            "data": "unsolved goals\ncase refine'_3\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 sorry \u2286 sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 573,
                "column": 57
            },
            "endPos": {
                "line": 573,
                "column": 75
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.784142"
        },
        {
            "severity": "error",
            "pos": {
                "line": 574,
                "column": 27
            },
            "endPos": {
                "line": 574,
                "column": 41
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 575,
                "column": 10
            },
            "endPos": {
                "line": 575,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 579,
                "column": 54
            },
            "endPos": {
                "line": 579,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.790758"
        },
        {
            "severity": "error",
            "pos": {
                "line": 580,
                "column": 8
            },
            "endPos": {
                "line": 580,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.796663 \u2192 ?m.796664) \u2192 Set ?m.796663 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 581,
                "column": 2
            },
            "endPos": {
                "line": 581,
                "column": 54
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 587,
                "column": 54
            },
            "endPos": {
                "line": 587,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.797959"
        },
        {
            "severity": "error",
            "pos": {
                "line": 589,
                "column": 17
            },
            "endPos": {
                "line": 589,
                "column": 24
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 589,
                "column": 26
            },
            "endPos": {
                "line": 589,
                "column": 38
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 590,
                "column": 2
            },
            "endPos": {
                "line": 590,
                "column": 31
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\na\u271d : 10 * x ^ 2 - 20 * x + 70 > 10 * y ^ 2 - 20 * y + 70\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 592,
                "column": 53
            },
            "endPos": {
                "line": 592,
                "column": 70
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.822924"
        },
        {
            "severity": "error",
            "pos": {
                "line": 594,
                "column": 2
            },
            "endPos": {
                "line": 594,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 597,
                "column": 54
            },
            "endPos": {
                "line": 597,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.829307"
        },
        {
            "severity": "error",
            "pos": {
                "line": 599,
                "column": 2
            },
            "endPos": {
                "line": 599,
                "column": 44
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 599,
                "column": 2
            },
            "endPos": {
                "line": 599,
                "column": 44
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 603,
                "column": 54
            },
            "endPos": {
                "line": 603,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.835677"
        },
        {
            "severity": "error",
            "pos": {
                "line": 605,
                "column": 2
            },
            "endPos": {
                "line": 605,
                "column": 40
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 605,
                "column": 18
            },
            "endPos": {
                "line": 605,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 605,
                "column": 2
            },
            "endPos": {
                "line": 605,
                "column": 40
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 608,
                "column": 55
            },
            "endPos": {
                "line": 608,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.842033"
        },
        {
            "severity": "error",
            "pos": {
                "line": 612,
                "column": 2
            },
            "endPos": {
                "line": 612,
                "column": 88
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nhxy : x \u2264 y\na\u271d : 1050 + (x ^ 2 * 7 - x * 70) > 1050 + (y ^ 2 * 7 - y * 70)\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 614,
                "column": 55
            },
            "endPos": {
                "line": 614,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.879251"
        },
        {
            "severity": "error",
            "pos": {
                "line": 615,
                "column": 8
            },
            "endPos": {
                "line": 615,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.885156 \u2192 ?m.885157) \u2192 Set ?m.885156 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 616,
                "column": 2
            },
            "endPos": {
                "line": 619,
                "column": 35
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 625,
                "column": 56
            },
            "endPos": {
                "line": 625,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.886452"
        },
        {
            "severity": "error",
            "pos": {
                "line": 627,
                "column": 13
            },
            "endPos": {
                "line": 627,
                "column": 20
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 627,
                "column": 2
            },
            "endPos": {
                "line": 627,
                "column": 48
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 630,
                "column": 54
            },
            "endPos": {
                "line": 630,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.892825"
        },
        {
            "severity": "error",
            "pos": {
                "line": 631,
                "column": 8
            },
            "endPos": {
                "line": 631,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 632,
                "column": 2
            },
            "endPos": {
                "line": 632,
                "column": 12
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 639,
                "column": 56
            },
            "endPos": {
                "line": 639,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.900069"
        },
        {
            "severity": "error",
            "pos": {
                "line": 641,
                "column": 4
            },
            "endPos": {
                "line": 641,
                "column": 36
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 644,
                "column": 55
            },
            "endPos": {
                "line": 644,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.906439"
        },
        {
            "severity": "error",
            "pos": {
                "line": 645,
                "column": 8
            },
            "endPos": {
                "line": 645,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.912344 \u2192 ?m.912345) \u2192 Set ?m.912344 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 646,
                "column": 2
            },
            "endPos": {
                "line": 646,
                "column": 113
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 652,
                "column": 54
            },
            "endPos": {
                "line": 652,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.913640"
        },
        {
            "severity": "error",
            "pos": {
                "line": 659,
                "column": 55
            },
            "endPos": {
                "line": 659,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.920706"
        },
        {
            "severity": "error",
            "pos": {
                "line": 661,
                "column": 17
            },
            "endPos": {
                "line": 661,
                "column": 24
            },
            "data": "unknown identifier 'Icc_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 663,
                "column": 2
            },
            "endPos": {
                "line": 663,
                "column": 31
            },
            "data": "linarith failed to find a contradiction\ncase a\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\ny : \u2115\nhy : y \u2208 sorry\nh : x \u2264 y\na\u271d : 100 + (x ^ 2 * 10 - x * 20) > 100 + (y ^ 2 * 10 - y * 20)\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 665,
                "column": 55
            },
            "endPos": {
                "line": 665,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.947174"
        },
        {
            "severity": "error",
            "pos": {
                "line": 667,
                "column": 2
            },
            "endPos": {
                "line": 667,
                "column": 40
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 667,
                "column": 18
            },
            "endPos": {
                "line": 667,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 667,
                "column": 2
            },
            "endPos": {
                "line": 667,
                "column": 40
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 671,
                "column": 54
            },
            "endPos": {
                "line": 671,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.953530"
        },
        {
            "severity": "error",
            "pos": {
                "line": 673,
                "column": 16
            },
            "endPos": {
                "line": 673,
                "column": 17
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : x \u2208 sorry\n\u22a2 x \u2208 ?m.959435"
        },
        {
            "severity": "error",
            "pos": {
                "line": 675,
                "column": 11
            },
            "endPos": {
                "line": 675,
                "column": 13
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 678,
                "column": 54
            },
            "endPos": {
                "line": 678,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.960160"
        },
        {
            "severity": "error",
            "pos": {
                "line": 680,
                "column": 2
            },
            "endPos": {
                "line": 680,
                "column": 34
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 680,
                "column": 18
            },
            "endPos": {
                "line": 680,
                "column": 24
            },
            "data": "unknown identifier 'le_def'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 680,
                "column": 2
            },
            "endPos": {
                "line": 680,
                "column": 34
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 691,
                "column": 51
            },
            "endPos": {
                "line": 691,
                "column": 69
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.966516"
        },
        {
            "severity": "error",
            "pos": {
                "line": 692,
                "column": 27
            },
            "endPos": {
                "line": 692,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Ici_self'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 693,
                "column": 10
            },
            "endPos": {
                "line": 693,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 697,
                "column": 55
            },
            "endPos": {
                "line": 697,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.973132"
        },
        {
            "severity": "error",
            "pos": {
                "line": 698,
                "column": 27
            },
            "endPos": {
                "line": 698,
                "column": 46
            },
            "data": "unknown identifier 'Icc_subset_Ici_self'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 699,
                "column": 8
            },
            "endPos": {
                "line": 699,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 700,
                "column": 8
            },
            "endPos": {
                "line": 700,
                "column": 21
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.980362 \u2192 ?m.980363) \u2192 Set ?m.980362 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 701,
                "column": 2
            },
            "endPos": {
                "line": 701,
                "column": 27
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 703,
                "column": 55
            },
            "endPos": {
                "line": 703,
                "column": 73
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.981658"
        },
        {
            "severity": "error",
            "pos": {
                "line": 704,
                "column": 8
            },
            "endPos": {
                "line": 704,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.987563 \u2192 ?m.987564) \u2192 Set ?m.987563 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 705,
                "column": 2
            },
            "endPos": {
                "line": 706,
                "column": 35
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 710,
                "column": 54
            },
            "endPos": {
                "line": 710,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.988859"
        },
        {
            "severity": "error",
            "pos": {
                "line": 712,
                "column": 4
            },
            "endPos": {
                "line": 712,
                "column": 46
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 712,
                "column": 4
            },
            "endPos": {
                "line": 712,
                "column": 46
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 717,
                "column": 54
            },
            "endPos": {
                "line": 717,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.995216"
        },
        {
            "severity": "error",
            "pos": {
                "line": 719,
                "column": 8
            },
            "endPos": {
                "line": 719,
                "column": 28
            },
            "data": "invalid field notation, function 'Function.const_mul' does not have argument with type (Function ...) that can be used, it must be explicit or implicit with a unique name"
        },
        {
            "severity": "error",
            "pos": {
                "line": 720,
                "column": 10
            },
            "endPos": {
                "line": 720,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\ncase s\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 737,
                "column": 54
            },
            "endPos": {
                "line": 737,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1002511"
        },
        {
            "severity": "error",
            "pos": {
                "line": 738,
                "column": 27
            },
            "endPos": {
                "line": 738,
                "column": 47
            },
            "data": "unknown identifier 'Icc_subset_Icc_right'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 739,
                "column": 10
            },
            "endPos": {
                "line": 739,
                "column": 12
            },
            "data": "tactic 'introN' failed, insufficient number of binders\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\n\u22a2 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 743,
                "column": 52
            },
            "endPos": {
                "line": 743,
                "column": 69
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1009127"
        },
        {
            "severity": "error",
            "pos": {
                "line": 744,
                "column": 8
            },
            "endPos": {
                "line": 744,
                "column": 22
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.1015032 \u2192 ?m.1015033) \u2192 Set ?m.1015032 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 745,
                "column": 2
            },
            "endPos": {
                "line": 747,
                "column": 12
            },
            "data": "no goals to be solved"
        },
        {
            "severity": "error",
            "pos": {
                "line": 752,
                "column": 56
            },
            "endPos": {
                "line": 752,
                "column": 74
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1016328"
        },
        {
            "severity": "error",
            "pos": {
                "line": 754,
                "column": 13
            },
            "endPos": {
                "line": 754,
                "column": 20
            },
            "data": "unknown identifier 'mem_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 754,
                "column": 2
            },
            "endPos": {
                "line": 754,
                "column": 30
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 758,
                "column": 55
            },
            "endPos": {
                "line": 758,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1022683"
        },
        {
            "severity": "error",
            "pos": {
                "line": 760,
                "column": 2
            },
            "endPos": {
                "line": 760,
                "column": 61
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 760,
                "column": 18
            },
            "endPos": {
                "line": 760,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 760,
                "column": 2
            },
            "endPos": {
                "line": 760,
                "column": 61
            },
            "data": "simp made no progress"
        },
        {
            "severity": "error",
            "pos": {
                "line": 763,
                "column": 54
            },
            "endPos": {
                "line": 763,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1029076"
        },
        {
            "severity": "error",
            "pos": {
                "line": 764,
                "column": 29
            },
            "endPos": {
                "line": 764,
                "column": 49
            },
            "data": "unknown identifier 'Icc_subset_Icc_right'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 766,
                "column": 4
            },
            "endPos": {
                "line": 768,
                "column": 44
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  MonotoneOn\nhas type\n  (?m.1035324 \u2192 ?m.1035325) \u2192 Set ?m.1035324 \u2192 Prop"
        },
        {
            "severity": "error",
            "pos": {
                "line": 763,
                "column": 76
            },
            "endPos": {
                "line": 768,
                "column": 44
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 4 * x ^ 2 - 40 * x + 300) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 770,
                "column": 54
            },
            "endPos": {
                "line": 770,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1036466"
        },
        {
            "severity": "error",
            "pos": {
                "line": 771,
                "column": 27
            },
            "endPos": {
                "line": 771,
                "column": 41
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 773,
                "column": 4
            },
            "endPos": {
                "line": 775,
                "column": 40
            },
            "data": "invalid field 'monotoneOn_of_deriv_nonneg', the environment does not contain 'Convex.monotoneOn_of_deriv_nonneg'\n  convex_Icc ?m.1042723 ?m.1042724\nhas type\n  Convex ?m.1042714 (Set.Icc ?m.1042723 ?m.1042724)"
        },
        {
            "severity": "error",
            "pos": {
                "line": 773,
                "column": 4
            },
            "endPos": {
                "line": 775,
                "column": 40
            },
            "data": "invalid field notation, type is not of the form (C ...) where C is a constant\n  convex_Icc ?m.1042723 ?m.1042724\nhas type\n  ?m.1044228 \u2208 Set.Icc ?m.1042723 ?m.1042724 \u2192 StarConvex ?m.1042714 ?m.1044228 (Set.Icc ?m.1042723 ?m.1042724)"
        },
        {
            "severity": "error",
            "pos": {
                "line": 770,
                "column": 77
            },
            "endPos": {
                "line": 795,
                "column": 38
            },
            "data": "unsolved goals\nx\u271d : Sort u_1\nIcc : x\u271d\n\u22a2 MonotoneOn (fun x => 3 * x ^ 2 - 48 * x + 576) sorry"
        },
        {
            "severity": "error",
            "pos": {
                "line": 797,
                "column": 54
            },
            "endPos": {
                "line": 797,
                "column": 72
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1050535"
        },
        {
            "severity": "error",
            "pos": {
                "line": 798,
                "column": 29
            },
            "endPos": {
                "line": 798,
                "column": 43
            },
            "data": "unknown identifier 'Icc_subset_Icc'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 800,
                "column": 8
            },
            "endPos": {
                "line": 800,
                "column": 61
            },
            "data": "linarith failed to find a contradiction\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.1057148 x\ny : \u2115\nhy : ?m.1057150 x hx y\nhxy : ?m.1057151 x hx y hy\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 801,
                "column": 8
            },
            "endPos": {
                "line": 801,
                "column": 61
            },
            "data": "linarith failed to find a contradiction\nx\u271d : Sort u_1\nIcc : x\u271d\nx : \u2115\nhx : ?m.1057148 x\ny : \u2115\nhy : ?m.1057150 x hx y\nhxy : ?m.1057151 x hx y hy\n\u22a2 False failed"
        },
        {
            "severity": "error",
            "pos": {
                "line": 799,
                "column": 2
            },
            "endPos": {
                "line": 801,
                "column": 62
            },
            "data": "type mismatch\n  fun x hx y hy hxy => sub_le_sub ?m.1056646 ?m.1056647\nhas type\n  \u2200 (x : \u2115) (hx : ?m.1057148 x) (y : \u2115) (hy : ?m.1057150 x hx y) (hxy : ?m.1057151 x hx y hy),\n    ?m.1057156 x hx y hy hxy - ?m.1057159 x hx y hy hxy \u2264 ?m.1057157 x hx y hy hxy - ?m.1057158 x hx y hy hxy : Prop\nbut is expected to have type\n  Set \u2115 : Type"
        },
        {
            "severity": "error",
            "pos": {
                "line": 803,
                "column": 54
            },
            "endPos": {
                "line": 803,
                "column": 71
            },
            "data": "function expected at\n  Icc\nterm has type\n  ?m.1081538"
        },
        {
            "severity": "error",
            "pos": {
                "line": 805,
                "column": 2
            },
            "endPos": {
                "line": 805,
                "column": 50
            },
            "data": "invalid argument, variable is not a proposition or let-declaration"
        },
        {
            "severity": "error",
            "pos": {
                "line": 805,
                "column": 18
            },
            "endPos": {
                "line": 805,
                "column": 30
            },
            "data": "unknown identifier 'mem_setOf_eq'"
        },
        {
            "severity": "error",
            "pos": {
                "line": 805,
                "column": 2
            },
            "endPos": {
                "line": 805,
                "column": 50
            },
            "data": "simp made no progress"
        }
    ],
    "env": 0
}