import Mathlib
open Real

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) / (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x)) := by
  -- turn `deriv (λ x => …)` into a composition
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- deriv of log
  nth_rewrite 1 [Real.deriv_log]
  -- now differentiate the inner `Real.exp x * (x^2+3) + Real.cos (Real.log x)`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now the second summand `Real.cos (Real.log x)`
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- tidy up the algebra
  ring
  -- now discharge the differentiability side‐conditions
  exact Real.differentiableAt_log.mpr h_log_ne_zero_1
  exact DifferentiableAt.add
    (DifferentiableAt.mul
      (Real.differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- first copy of (exp x * (x^2+3))
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- the cos (log x) summand
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- second copy of (exp x * (x^2+3))
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  ring

  -- now the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.mul
    (Real.differentiableAt_exp)
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_15
  -- rebuild the two copies of exp*(x^2+3) + cos(log x) in DifferentiableAt.add
  exact DifferentiableAt.add
    (DifferentiableAt.mul
      (Real.differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_15))
  exact DifferentiableAt.add
    (DifferentiableAt.add
      (DifferentiableAt.mul
        (Real.differentiableAt_exp)
        (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
      (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_15)))
    (DifferentiableAt.mul
      (Real.differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.exp x) + (Real.cos (Real.log x) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- simplify via the standard derivation rules
  simp [ deriv_add
       , deriv_mul
       , deriv_comp
       , Real.deriv_exp
       , deriv_pow     -- for `x ^ 2`
       , deriv_id
       , deriv_const
       , Real.deriv_cos
       , Real.deriv_log
       , h_log_ne_zero_15 ]
  -- clean up the resulting algebraic sum
  ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.cos (Real.log x)) + (Real.cos (Real.log x) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- deriv applies the chain‐rule, product‐rule, etc.
  deriv
  -- now the goal is a true algebraic equality
  ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  simp [h_log_ne_zero_15]

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- The `simp` call below uses
  -- · deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const
  -- · deriv_cos, deriv_comp, deriv_log, deriv_div (all from Mathlib.Analysis.Calculus.Deriv.Basic)
  -- and the hypotheses `h₁ : x ≠ 0` and `h₂ : Real.log 5 ≠ 0`.
  simp [deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const,
        deriv_cos, deriv_comp, deriv_log, deriv_div, h₁, h₂]

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- un-eta the definition of `deriv` as a composition
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]

  -- derivative of (A + B)
  nth_rewrite 1 [deriv_add]

  -- --- derivative of A = exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]

  -- --- derivative of B = cos (log x) * (x^3) * (log x / log 5)
  -- we view B   = (cos (log x)) * (x^3 * (log x / log 5))
  -- so first derivative of the outer product
  nth_rewrite 2 [deriv_mul]

  -- derivative of cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- now derivative of   (x^3 * (log x / log 5))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]

  -- derivative of   log x / log 5 
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]

  -- clean up the algebra
  ring

  -- now discharge all the differentiability-at-lemmas
  exact Real.differentiableAt_exp
  exact (differentiableAt_pow (x:=x) (n:=2)).add differentiableAt_const
  exact (Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_x))
  exact (differentiableAt_pow (x:=x) (n:=3)).mul 
        (differentiableAt_log.div h_div_ne_zero_log5 (differentiableAt_const _)).add
        (Real.differentiableAt_log h_log_ne_zero_x).mul (differentiableAt_pow _)
  exact (Real.differentiableAt_log h_log_ne_zero_x)
  exact differentiableAt_const

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  deriv                  -- runs through all the compositional and product‐rules
  ring                   -- tidies up the final algebraic combination

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  simp only [              -- the only lemmas we need to expand derivs
    deriv_sin, deriv_comp,
    deriv_sub, deriv_mul, deriv_add,    -- for subtraction, multiplication, addition
    deriv_const, deriv_id, deriv_pow,    -- constant, id, power
    Real.deriv_exp, Real.deriv_cos, Real.deriv_log
  ]
  ring                                      -- finish the arithmetic rearrangement

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- expand definitions of `deriv (g ∘ f) x`
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  -- derivative of cos
  nth_rewrite 1 [Real.deriv_cos]
  -- derivative of subtraction
  nth_rewrite 1 [deriv_sub]
  -- derivative of multiplication
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  -- derivative of addition
  nth_rewrite 1 [deriv_add]
  -- derivative of `x^2`
  nth_rewrite 1 [deriv_pow'']
  -- derivative of `id`
  nth_rewrite 1 [deriv_id'']
  -- derivative of constant
  nth_rewrite 1 [deriv_const]
  -- now the inner `- Real.cos (Real.log x)` is another composition
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- finish the algebra
  ring
  -- and discharge all `differentiableAt` side-conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_sub
    (Real.differentiableAt_mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero))
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero)
  exact Real.differentiableAt_log h_log_ne_zero

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) := by
  deriv; ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x ↦ cos (exp x * (x ^ 2 + 3) + cos (log x))) x =
    - sin (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv; ring

example (x : ℝ) (hc : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0) (h : x ≠ 0) :
  deriv (fun x ↦ tan (exp x * (x ^ 2 + 3) + cos (log x))) x =
    (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / (cos (exp x * (x ^ 2 + 3) + cos (log x))) ^ 2 := by
  deriv; ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x ↦ exp (exp x * (x ^ 2 + 3) + cos (log x))) x =
    exp (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv; ring

example (x : ℝ) (h1 : exp x * (x ^ 2 + 3) - cos (log x) ≠ 0) (h2 : x ≠ 0) :
  deriv (fun x ↦ log (exp x * (x ^ 2 + 3) - cos (log x))) x =
    (exp x * (x ^ 2 + 3) + exp x * (2 * x) +
      (-1) * sin (log x) * (1 / x))
    / (exp x * (x ^ 2 + 3) - cos (log x)) := by
  deriv; ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- unfold composition
  nth_rewrite 1 [← comp_def]
  -- deriv of (f - g)
  nth_rewrite 1 [deriv_sub]
  -- deriv of ((f - g) + f)
  nth_rewrite 1 [deriv_add]
  -- now two times deriv of `exp x * (x^2 + 3)`
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 2 [Real.deriv_exp]
  nth_rewrite 2 [deriv_add]
  nth_rewrite 2 [deriv_pow'']
  nth_rewrite 2 [deriv_id'']
  nth_rewrite 2 [deriv_const]
  -- now the `- Real.cos (Real.log x)` part
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- finish the algebra
  ring
  -- now discharge all differentiability side‐conditions
  all_goals
    try exact Real.differentiableAt_exp
    try exact differentiableAt_pow _
    try exact differentiableAt_id
    try exact differentiableAt_const _
    try exact Real.differentiableAt_cos
    try exact Real.differentiableAt_log h_log_ne_zero_15
    try apply DifferentiableAt.add
    try apply DifferentiableAt.sub
    try apply DifferentiableAt.mul

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.exp x) + (Real.cos (Real.log x) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x))) := by
  -- turn subtraction into `deriv_sub`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_sub]
  -- first summand: deriv (exp x * (x^2+3))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 2 [deriv_const]
  -- second summand: deriv (cos (log x) * exp x * (x^2+3))
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]              -- split off *(x^2+3)
  nth_rewrite 1 [deriv_mul]              -- split off *exp x
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- tidy up arithmetics
  ring
  -- now provide all the differentiability witnesses in exactly the same order
  -- that we invoked the deriv rules above.
  -- For the first product exp x * (x^2+3):
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  -- For the nested product cos(log x) * exp x * (x^2+3):
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero)
  exact Real.differentiableAt_exp
  exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero))
    Real.differentiableAt_exp
  exact DifferentiableAt.mul
    (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero))
      Real.differentiableAt_exp)
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- step 1: expose the comp/deriv machinery
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- step 2: break the big sum into three pieces
  nth_rewrite 1 [deriv_add]    -- (exp x * …) + ((-1)*cos(log x))
  nth_rewrite 1 [deriv_add]    -- … + cos(log x)
  -- step 3: handle the first term exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]    -- x^2 + 3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- step 4: handle the two cos(log x)–terms
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- step 5: tidy up the algebra
  ring
  -- final step: discharge all `differentiableAt` obligations
  all_goals
    try
      ( first
        | exact differentiableAt_id
        | exact differentiableAt_const _
        | exact differentiableAt_pow _
        | exact Real.differentiableAt_exp
        | exact Real.differentiableAt_cos
        | exact Real.differentiableAt_log h_log_ne_zero_15
        | exact DifferentiableAt.add _ _ 
        | exact DifferentiableAt.mul _ _ )

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.cos (Real.log x)) + (Real.cos (Real.log x) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  deriv

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x
  =  - sin (exp x * (x ^ 2 + 3) + cos (log x))
    * (exp x * (x ^ 2 + 3)
     + exp x * (2 * x)
     - sin (log x) / x) := by
  deriv

example (x : ℝ) (h_tan_ne_zero : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
                   (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x
  =   (exp x * (x ^ 2 + 3)
     + exp x * (2 * x)
     - sin (log x) / x)
    / cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  deriv

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x
  =   exp (exp x * (x ^ 2 + 3) + cos (log x))
    * (exp x * (x ^ 2 + 3)
     + exp x * (2 * x)
     - sin (log x) / x) := by
  deriv

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp x * (x ^ 2 + 3)
                 - cos (log x)
                 + (sin (2 * x - 1)) ^ 2
         ) x
  =   exp x * (x ^ 2 + 3)
    + exp x * (2 * x)
    - ( - sin (log x) * (1 / x) )
    + 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) := by
  deriv

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  dsimp [Function.comp]  -- unfold the λ and comp
  simp [h_log_ne_zero_15, h_div_ne_zero_23, h_log_ne_zero_26]
  ring

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
by simp [h]

-- 2) cos
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x
  = - sin ((exp x) * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
by simp [h]

-- 3) tan
example (x : ℝ)
  (h₁ : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2 := by
by simp [h₁, h₂]

-- 4) exp
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x
  = exp ((exp x) * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
by simp [h]

-- 5) a more involved example
example (x : ℝ)
  (h_log :       x ≠ 0)
  (h_div : log 5 ≠ 0) :
    deriv (fun x =>
      exp x * (x ^ 2 + 3)
      - cos (log x) * x ^ 3 * (log x / log 5)) x
  =  exp x * (x ^ 2 + 3)
    + exp x * (2 * x)
    - ( ((- sin (log x) * (1 / x)) * x ^ 3 + cos (log x) * (3 * x ^ 2))
        * (log x / log 5)
      + (cos (log x) * x ^ 3)
        * (((1 / x) * log 5) / log 5 ^ 2) ) := by
by simp [h_log, h_div]

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _)

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
by
  simp [h]

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) ^ 2 := by
 `ring`.
-- We also need `Function.comp_def` so that `deriv (fun x => sin (g x))`
-- lemmas fire.

local notation "deriv?" => deriv

example (x : ℝ) (h : x ≠ 0) :
  deriv? (fun x => sin ((exp x) * (x^2 + 3) + cos (log x))) x
    = cos ((exp x) * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp only [ deriv
            , Function.comp_def
            , Real.deriv_sin
            , deriv_add
            , deriv_mul
            , Real.deriv_exp
            , deriv_pow
            , deriv_id
            , deriv_const
            , Real.deriv_cos
            , Real.deriv_log
            ] at *
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv? (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x
    = - sin ((exp x) * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp only [ deriv
            , Function.comp_def
            , Real.deriv_cos
            , deriv_add
            , deriv_mul
            , Real.deriv_exp
            , deriv_pow
            , deriv_id
            , deriv_const
            , Real.deriv_cos
            , Real.deriv_log
            ] at *
  ring

example (x : ℝ)
  (h₁ : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv? (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / (cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2) := by
  simp only [ deriv
            , Function.comp_def
            , Real.deriv_tan
            , deriv_add
            , deriv_mul
            , Real.deriv_exp
            , deriv_pow
            , deriv_id
            , deriv_const
            , Real.deriv_cos
            , Real.deriv_log
            ] at *
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv? (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x
    = exp ((exp x) * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp only [ deriv
            , Function.comp_def
            , Real.deriv_exp
            , deriv_add
            , deriv_mul
            , Real.deriv_exp
            , deriv_pow
            , deriv_id
            , deriv_const
            , Real.deriv_cos
            , Real.deriv_log
            ] at *
  ring

-- one more, the product‐inside‐tan version
example (x : ℝ)
  (h₁ : cos ((exp x) * (x^2 + 3) * cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv? (fun x => tan ((exp x) * (x^2 + 3) * cos (log x))) x
    = (((exp x * (x^2 + 3) + exp x * (2 * x)) * cos (log x) +
        (exp x * (x^2 + 3)) * (- sin (log x) * (1 / x))) 
       : ℝ)
      / (cos ((exp x) * (x^2 + 3) * cos (log x)) ^ 2) := by
  simp only [ deriv
            , Function.comp_def
            , Real.deriv_tan
            , deriv_mul
            , deriv_add
            , Real.deriv_exp
            , deriv_pow
            , deriv_id
            , deriv_const
            , Real.deriv_cos
            , Real.deriv_log
            ] at *
  ring

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
  -- the `deriv` tactic will automatically apply all the chain‐rules,
  -- product‐rules, etc.  and fill in the differentiability side‐conditions
  deriv; ring

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) / (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  deriv

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
    * (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x) := by
  deriv

example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
                   (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x)
    / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
    * (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x) := by
  deriv

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => (exp x * (x^2 + 3) * cos (log x)
                    + exp x * (x^2 + 3))) x
  = ((exp x * (x^2 + 3) + exp x * 2 * x) * cos (log x))
    + (exp x * (x^2 + 3)) * ( - sin (log x) / x)
    + (exp x * (x^2 + 3))
    + exp x * 2 * x := by
  deriv

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x)) := by
  -- rewrite into a big `deriv_mul` of five factors
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_mul]
  -- now we have deriv (f * g) where f = exp x * (x^2+3) * cos (log x)
  -- and g = exp x * (x^2+3), so rewrite again
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_mul]
  -- f itself is a triple product, so repeat
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- now unfold all the inner derivs
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add];  nth_rewrite 1 [deriv_pow''];  nth_rewrite 1 [deriv_id''];  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_comp]; nth_rewrite 1 [Real.deriv_cos]; nth_rewrite 1 [deriv_comp]; nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add];  nth_rewrite 1 [deriv_pow''];  nth_rewrite 1 [deriv_id''];  nth_rewrite 1 [deriv_const]
  -- finish the algebra
  ring
  -- now discharge all `DifferentiableAt` obligations
  let hA := Real.differentiableAt_exp
  let hB := DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  let hC := DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16)
  exact DifferentiableAt.mul hA (DifferentiableAt.mul hB (DifferentiableAt.mul hC (DifferentiableAt.mul hA hB)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
f x = Real.exp x * (x^2 + 3) * Real.cos (Real.log x) ^ 2

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
derivative; ring

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x ↦ cos (exp x * (x ^ 2 + 3) + cos (log x))) x
  = - sin (exp x * (x ^ 2 + 3) + cos (log x)) *
    (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
derivative; ring

example (x : ℝ) (h₁ : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
                (h₂ : x ≠ 0) :
    deriv (fun x ↦ tan (exp x * (x ^ 2 + 3) + cos (log x))) x
  = (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) /
    cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
derivative; ring

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x ↦ exp (exp x * (x ^ 2 + 3) + cos (log x))) x
  = exp (exp x * (x ^ 2 + 3) + cos (log x)) *
    (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
derivative; ring

example (x : ℝ) (h₁ : x ≠ 0) (h₂ : log 5 ≠ 0) :
    deriv (fun x ↦ exp x * (x ^ 2 + 3) * cos (log x)
                 + x ^ 3 * (log x / log 5)) x
  = ((exp x * (x ^ 2 + 3) + exp x * (2 * x)) * cos (log x)
     + (exp x * (x ^ 2 + 3)) * (- sin (log x) / x)
     + (3 * x ^ 2) * (log x / log 5)
     + x ^ 3 * ((1 / x * log 5) / log 5 ^ 2)) := by
derivative; ring

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- we have one big 5‐fold product, so apply `deriv_mul` four times
  nth_rewrite 1 [←Function.comp_def]   -- make it look like deriv (f.comp id) for the first product
  nth_rewrite 1 [deriv_mul]           -- d(exp x * rest)
  nth_rewrite 1 [deriv_mul]           -- d((exp x * (x^2+3)) * rest)
  nth_rewrite 1 [deriv_mul]           -- d((exp x*(x^2+3)*cos(log x)) * rest)
  nth_rewrite 1 [deriv_mul]           -- d(... * (log x / log 5))

  -- now fill in each individual derivative
  -- d(exp x) = exp x
  nth_rewrite 1 [Real.deriv_exp]

  -- d(x^2 + 3) = 2*x
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- d(cos (log x)) = - sin(log x) * (1/x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]

  -- d(x^3) = 3*x^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']

  -- d(log x / log 5) = d(log x * (1 / log 5))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]

  -- now the resulting algebraic expression is exactly the target,
  -- so we can finish with `ring`
  ring

  -- finally discharge all the differentiability‐at‐x side‐conditions
  -- in the exact reverse order they were needed by the `deriv_*` lemmas above:
  exact Real.differentiableAt_const (1 / log (5 : ℝ))
  exact Real.differentiableAt_log   (h_div_ne_zero_23)
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact Real.differentiableAt_cos   (Real.differentiableAt_log h_log_ne_zero_16)
  exact Real.differentiableAt_log   (h_log_ne_zero_16)
  exact differentiableAt_const _
  exact differentiableAt_pow _
  exact differentiableAt_id
  exact Real.differentiableAt_exp

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by

open Real

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- peel off the multiplications
  simp [ deriv_mul, deriv_mul, deriv_mul,
         deriv_pow (log (5*x+2)) _ h2 ]
  -- now expand each elementary deriv
  simp [ deriv_exp, deriv_id, deriv_const,
         deriv_cos, deriv_log, deriv_pow ]
  -- and finish the algebra
  ring

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) := by
  deriv

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) := by
  -- reduce to the chain‐rule / quotient‐rule / product‐rule / etc
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- clean up the algebra
  ring
  -- now discharge all the differentiability side‐conditions
  -- outer cos
  exact Real.differentiableAt_cos
  -- the inside is a quotient, cos(log x) ≠ 0
  exact DifferentiableAt.div
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))
    h_div_ne_zero_3
  -- the pieces of the numerator
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact differentiableAt_pow _
  exact differentiableAt_const _
  -- the denominator cos(log x)
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16)
  -- log x itself
  exact Real.differentiableAt_log h_log_ne_zero_16
  -- the identity map for the x inside the x^2
  exact differentiableAt_id

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / Real.cos ((Real.log (x)))) ≠ 0) (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) ^ 2 := by

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact h_div_ne_zero_3
exact Real.differentiableAt_exp
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (h_div_ne_zero_3)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / Real.cos ((Real.log (x)))) ≠ 0) (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) / (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) := by
  -- turn `deriv (fun x => log (…))` into `deriv log ∘ fun x => …`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]      -- deriv log (u x) = deriv u x / u x

  -- now do the quotient rule on u x = (exp x * (x^2+3)) / cos (log x)
  nth_rewrite 1 [deriv_div]
  -- then the product rule on exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- and the chain rule on cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]

  ring

  -- now discharge all the differentiability‐at goals in the same order

  -- 1) differentiableAt_log at the outer layer
  exact Real.differentiableAt_log.mpr h_log_ne_zero_1

  -- 2) differentiableAt_cos (log x) for the denominator in the / rule
  exact Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_16)

  -- 3) differentiableAt_id for the x ↦ x in x^2
  exact differentiableAt_id

  -- 4) differentiableAt_pow for x^2
  exact differentiableAt_pow _

  -- 5) differentiableAt_const for the +3
  exact differentiableAt_const _

  -- 6) differentiableAt_exp for exp x
  exact Real.differentiableAt_exp

  -- 7) differentiableAt_add for x^2 + 3
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

  -- 8) differentiableAt_mul for exp x * (x^2+3)
  exact DifferentiableAt.mul
    Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

  -- 9) differentiableAt_cos (log x) again for the denominator
  exact Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_16)

  -- 10) differentiableAt_log at the inner log x
  exact Real.differentiableAt_log h_log_ne_zero_16

  -- 11) finally the quotient rule's differentiabilityAt_div
  exact DifferentiableAt.div
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_16))
    h_div_ne_zero_3

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x)) := by
  -- simp knows all the deriv lemmas for sin, cos, exp, log, plus comp/add/mul
  simp [deriv, deriv_comp, deriv_add, deriv_mul, deriv_exp, deriv_cos, deriv_log]

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
      - sin (exp x * (x^2 + 3) + cos (log x))
        * ((exp x * (x^2 + 3)) + exp x * 2 * x - sin (log x) / x) := by
  simp [deriv, deriv_comp, deriv_add, deriv_mul, deriv_exp, deriv_cos, deriv_log]

example (x : ℝ)
    (h_tan_ne_zero : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
    (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
      ((exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x) /
        cos (exp x * (x^2 + 3) + cos (log x))^2) := by
  simp [deriv, deriv_comp, deriv_add, deriv_mul, deriv_exp, deriv_cos, deriv_log, deriv_div]

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
      exp (exp x * (x^2 + 3) + cos (log x))
        * ((exp x * (x^2 + 3)) + exp x * 2 * x - sin (log x) / x) := by
  simp [deriv, deriv_comp, deriv_add, deriv_mul, deriv_exp, deriv_cos, deriv_log]

example (x : ℝ)
    (h_div_ne_zero : cos (log x) ≠ 0)
    (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => (exp x * (x^2 + 3) / cos (log x)) * (exp x * (x^2 + 3))) x =
      (((exp x * (x^2 + 3) + exp x * 2 * x) * cos (log x)
         - (exp x * (x^2 + 3)) * ((-1) * sin (log x) * (1 / x))) /
       cos (log x)^2) * exp x * (x^2 + 3)
      + (exp x * (x^2 + 3) / cos (log x)) * (exp x * 2 * x) := by
  simp [deriv, deriv_comp, deriv_add, deriv_mul, deriv_div, deriv_exp, deriv_cos, deriv_log]
  ring

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15, h_div_ne_zero_23, h_log_ne_zero_15, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_15)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_15)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- expand the derivative using `deriv_mul`, `deriv_div`, etc.
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 3 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  ring
  -- now discharge the differentiability side-conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact Real.differentiableAt_log h_log_ne_zero_16
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16)
  exact DifferentiableAt.div
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))
    h_div_ne_zero_3
  exact differentiableAt_pow _
  exact DifferentiableAt.div
    (Real.differentiableAt_log h_log_ne_zero_16)
    (differentiableAt_const _)
    h_div_ne_zero_23
  -- final two multiplications
  exact DifferentiableAt.mul
    (DifferentiableAt.mul
      (DifferentiableAt.div
        (DifferentiableAt.mul Real.differentiableAt_exp
          (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
        (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))
        h_div_ne_zero_3)
      (differentiableAt_pow _))
    (DifferentiableAt.div
      (Real.differentiableAt_log h_log_ne_zero_16)
      (differentiableAt_const _)
      h_div_ne_zero_23)

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  derivative!; ring

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
      - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  derivative!; ring

example (x : ℝ)
  (h_tan_ne_zero : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative!; ring

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
      exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  derivative!; ring

example (x : ℝ)
  (h1 : cos (log x) ≠ 0) (h2 : x ≠ 0) (h3 : 5 * x + 2 ≠ 0) :
    deriv (fun x => exp x * (x^2 + 3) / cos (log x) + (log (5 * x + 2))^3) x =
      ((exp x * (x^2 + 3) + exp x * (2 * x)) * cos (log x)
       - exp x * (x^2 + 3) * (- sin (log x) / x))
      / cos (log x) ^ 2
      + 3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2)) := by
  derivative!; ring

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ) : deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
  derivation!

example (x: ℝ) : deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) / (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
f x = exp x * (x^2 + 3) + (sin (2*x - 1))^2 + exp x * (x^2 + 3)

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
  -- expand all the `deriv` definitions and the one `pow_two` 
  simp [deriv, pow_two]
  -- what remains is just an equality of polynomials / products → `ring` handles it
  ring

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- unfold λ‐abstractions and apply the chain‐rule,
  -- sum‐rule, product‐rule, etc., in the same order as the target
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  ring
  -- now discharge the differentiability‐at‐a‐point side‐conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_sin
  exact DifferentiableAt.sub
    (DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id)
    (DifferentiableAt.const _)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_25

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- Turn the whole thing into a `deriv (f ∘ id)` and apply `deriv_comp`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- Split the outer sum
  nth_rewrite 1 [deriv_add]
  -- First term: deriv of `exp x * (x^2 + 3)`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- Second term: deriv of `(sin (2x - 1))^2 * cos (log x)`
  nth_rewrite 1 [deriv_mul]
  -- A = (sin (2x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  -- inside is `sin (2x - 1)`
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- derivative of `2x - 1`
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- B = cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- finish off by cleaning up with `ring`
  ring
  -- now discharge all the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.mul
    (Real.differentiableAt_exp)
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id
  exact differentiableAt_const _
  exact DifferentiableAt.sub
    (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
    (differentiableAt_const _)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_25
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.mul
    (DifferentiableAt.pow 2
      (DifferentiableAt.comp Real.differentiableAt_sin
        (DifferentiableAt.sub
          (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
          (differentiableAt_const _))))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_25))
  exact DifferentiableAt.add
    (DifferentiableAt.mul
      (Real.differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.mul
      (DifferentiableAt.pow 2
        (DifferentiableAt.comp Real.differentiableAt_sin
          (DifferentiableAt.sub
            (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
            (differentiableAt_const _))))
      (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_25)))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
(Real.sin (2*x - 1))^2 * (Real.sin (2*x - 1))^2

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- rewrite f' + g' + h' as deriv f + deriv g + deriv h
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- first term: deriv (exp x * (x^2+3))
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- second term: deriv (sin (2*x-1) ^ 2)
  nth_rewrite 2 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [Real.deriv_id]
  -- third term: deriv (x^3 * (log x / log 5))
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [Real.deriv_pow'']
  nth_rewrite 1 [deriv_add]   -- derivative of numerator: deriv (log x) = 1/x, deriv (log 5)=0
  nth_rewrite 2 [deriv_const]
  nth_rewrite 1 [Real.deriv_log]
  -- now everything is expanded, just clean up the algebra
  ring
  -- finally the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact (DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
  exact Real.differentiableAt_sin
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_id
  exact Real.differentiableAt_log h_log_ne_zero_30
  exact Real.differentiableAt_log h_div_ne_zero_29
  exact (DifferentiableAt.pow (differentiableAt_id) 3)
  exact (DifferentiableAt.div (Real.differentiableAt_log h_log_ne_zero_30)
    (DifferentiableAt.const _))
  exact (DifferentiableAt.mul (differentiableAt_pow _)
    (DifferentiableAt.div (Real.differentiableAt_log h_log_ne_zero_30)
      (DifferentiableAt.const _)))

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- split the outer sum into three summands
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]

  -- 1) deriv of exp y * (y^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- 2) deriv of (sin (2*y-1))^2
  nth_rewrite 3 [← comp_def]    -- we have two nested comps: pow (…, 2) and sin
  nth_rewrite 2 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- 3) deriv of (log (5*y+2))^3
  nth_rewrite 3 [← comp_def]
  nth_rewrite 2 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- tidy up the algebra
  ring

  -- now discharge all the differentiability‐at‐points obligations
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add
          (DifferentiableAt.mul
            Real.differentiableAt_exp
            (DifferentiableAt.add (differentiableAt_pow 2) differentiableAt_const))
          (DifferentiableAt.pow
            (DifferentiableAt.sin
              (DifferentiableAt.add
                (DifferentiableAt.mul (differentiableAt_id) differentiableAt_const)
                differentiableAt_const))
            2)
  exact DifferentiableAt.sin
        (DifferentiableAt.add
          (DifferentiableAt.mul differentiableAt_const differentiableAt_id)
          differentiableAt_const)
  exact (DifferentiableAt.add
          (DifferentiableAt.mul differentiableAt_const differentiableAt_id)
          differentiableAt_const)
  exact DifferentiableAt.mul differentiableAt_const differentiableAt_id
  exact differentiableAt_const
  exact differentiableAt_id
  exact DifferentiableAt.pow
        (Real.differentiableAt_log
          (DifferentiableAt.add
            (DifferentiableAt.mul differentiableAt_const differentiableAt_id)
            differentiableAt_const)
          h_log_ne_zero_25)
        3
  exact Real.differentiableAt_log
        (DifferentiableAt.add
          (DifferentiableAt.mul differentiableAt_const differentiableAt_id)
          differentiableAt_const)
  exact (DifferentiableAt.add
          (DifferentiableAt.mul differentiableAt_const differentiableAt_id)
          differentiableAt_const)
  exact DifferentiableAt.mul differentiableAt_const differentiableAt_id
  exact differentiableAt_const
  exact differentiableAt_id

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- rewrite all the `deriv_*` lemmas, plus the `Function.comp_def`
  simp [Function.comp_def,
        deriv_add, deriv_mul, deriv_exp, deriv_const,
        deriv_sin, deriv_sub, deriv_pow'', deriv_log, deriv_id,
        h_log_ne_zero]
  -- clean up the linear algebra
  ring
  -- discharge the differentiability at x hypotheses
  all_goals
    try apply differentiableAt_exp
    <|> try apply differentiableAt_const
    <|> try apply differentiableAt_id
    <|> try apply differentiableAt_pow
    <|> try apply differentiableAt_sin
    <|> try apply differentiableAt_log (h_log_ne_zero)
    <|> try apply DifferentiableAt.add
    <|> try apply DifferentiableAt.mul

example (x: ℝ) : deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x))) := by
  -- All the `deriv_…` lemmas and `HasDerivAt` instances are in Mathlib,
// so a single call to `simp` will expand the left‐hand side, apply
// `deriv_sub, deriv_mul, deriv_pow, deriv_sin, deriv_cos, deriv_exp,…` etc,
// and then clear denominators / regroup with `ring`.
  simp

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- `deriv` will automatically apply the sum‐, product‐ and chain‐rules
  -- together with all of the `Real.deriv_*` and `DifferentiableAt.*` lemmas
  deriv
  -- the only non‐trivial field‐step is inverting `x`, we close it by
  field_simp [h_log_ne_zero_25]
  -- the remaining numerical rearrangements are handled by `ring`
  ring

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
  -- `simp` knows all the derivation rules, and `h_log_ne_zero_25` discharges
  -- the side-condition for `deriv log`.
  simp [h_log_ne_zero_25]
  -- finally clean up the numerals and groupings
  ring

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  derivative
  ring

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- expand all the deriv’s
  simp [deriv]
  ring

  -- now discharge all the differentiability side‐conditions
  all_goals
    try exact Real.differentiableAt_exp
    try exact (differentiableAt_pow (n := 2))
    try exact (differentiableAt_pow (n := 3))
    try exact Real.differentiableAt_sin
    try exact Real.differentiableAt_cos
    try exact Real.differentiableAt_log h_log_ne_zero₂
    try exact Real.differentiableAt_log h_five_ne_zero
    try exact differentiableAt_id
    try exact differentiableAt_const
    try apply DifferentiableAt.add
    try apply DifferentiableAt.sub
    try apply DifferentiableAt.mul
    try apply DifferentiableAt.div
#align my_example my_example

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  simp [ deriv_mul
       , deriv_exp
       , deriv_add
       , deriv_neg
       , deriv_pow
       , deriv_id
       , deriv_sub
       , deriv_sin
       , deriv_div
       , deriv_log h5
       , hx
       ] 
  ring

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- this will fire all the chain‐rule / power‐rule / etc.
  derivative
  -- clear the `5*x+2 ≠ 0` from the denominator
  field_simp [h_log_ne_zero_25]
  -- clean up the remaining numerals, multiplications, additions
  ring

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- We rewrite the whole thing as a subtraction of two derivs
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_sub]
  -- ────────────────────────────────────────────────────────────────
  -- First term: deriv (λ x, exp x * (x^2+3))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- ────────────────────────────────────────────────────────────────
  -- Second term: deriv (λ x, (sin (2*x-1))^2 * (log (5*x+2))^3)
  nth_rewrite 1 [deriv_mul]
  --  sin^2 part
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  --  log^3 part
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- ────────────────────────────────────────────────────────────────
  ring
  -- now establish all the differentiability hypotheses
  exact differentiableAt_exp
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact differentiableAt_sin
  exact differentiableAt_cos
  exact (Real.differentiableAt_log h_log_ne_zero_25)

example (x: ℝ) : deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
deriv f x = f' x        ←→    DifferentiableAt ℝ f x

example (x: ℝ) : deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
  -- all of the individual deriv_-lemmas for `tan`, `exp`, `sin`, `cos`, `pow`,
  -- `mul`, `add`, `id` etc. will fire and then `ring` finishes the algebra.
  simp [h]

example (x: ℝ) : deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- outer exp ∘ g
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- g = h * k
  nth_rewrite 1 [deriv_mul]
  -- h = Real.exp x * (x^2 + 3), k = (sin(2x-1))^2
  nth_rewrite 1 [deriv_mul]
  -- deriv h
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- deriv k = deriv (u^2) where u = sin(2x-1)
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- clean up the algebra
  ring
  -- discharge all differentiability side-goals
  all_goals
    try apply Real.differentiableAt_exp
    try apply differentiableAt_id
    try apply differentiableAt_const _
    try apply differentiableAt_pow _
    try apply Real.differentiableAt_sin
    try apply DifferentiableAt.add
    try apply DifferentiableAt.mul
    try apply DifferentiableAt.comp

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) / (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- all the deriv_*.mk lemmas are tagged @[simp], so this does the
  -- two applications of deriv_add, two of deriv_mul, one of deriv_pow,
  -- one of deriv_sin, one of deriv_cos, one of deriv_exp, one of deriv_id, …
  simp [deriv] 
  ring

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
  -- Mathlib.Analysis.Calculus.Deriv.Basic (they live under `Real.deriv_…`, `deriv_mul`, etc.),
  -- we can just let `simp` do them all at once:
  simp [deriv_mul, deriv_pow'', deriv_comp, Real.deriv_exp, Real.deriv_sin,
        deriv_sub, deriv_add, deriv_const, deriv_id'']
  -- and then the raw polynomial/algebraic rearrangement is a job for `ring`
  ring

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  simp [h_log_ne_zero]

-- 2) derivative of cos
example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
  deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x =
    - sin ((exp x) * (x^2 + 3) + cos (log x))
      * ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h_log_ne_zero]

-- 3) derivative of tan
example (x : ℝ)
  (h_tan_ne_zero : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
  (h_log_ne_zero : x ≠ 0) :
  deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x =
    ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h_tan_ne_zero, h_log_ne_zero]

-- 4) derivative of exp
example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
  deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x =
    exp ((exp x) * (x^2 + 3) + cos (log x))
      * ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h_log_ne_zero]

-- 5) a slightly bigger product + power
example (x : ℝ) :
  deriv (fun x => (exp x) * (x^2 + 3) * sin (2 * x - 1) ^ 2 + sin (2 * x - 1) ^ 2) x =
    ((exp x * (x^2 + 3)) + exp x * (2 * x)) * sin (2 * x - 1) ^ 2
    + (exp x * (x^2 + 3)) * (2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2))
    + 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) := by
  simp

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by

open Real (sin cos exp)

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 4 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_29, h_log_ne_zero_30, h_log_ne_zero_32]
ring
exact Real.differentiableAt_log (h_log_ne_zero_32)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_30)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)
exact h_div_ne_zero_29
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29)

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- derivative of a sum
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- deriv of exp x * (x^2+3) * (sin(2*x-1))^2
  nth_rewrite 1 [deriv_mul]
  -- now inside that: deriv of exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']   -- deriv (x^2)
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- deriv of (sin(2*x-1))^2
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- now deriv of (log(5*x+2))^3
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- clean up the algebra
  ring
  -- discharge the differentiability obligations
  all_goals
    try exact Real.differentiableAt_exp
    <|> try exact Real.differentiableAt_sin
    <|> try exact Real.differentiableAt_cos
    <|> try exact Real.differentiableAt_log h_log_ne_zero_25
    <|> try exact differentiableAt_id
    <|> try exact differentiableAt_const _
    <|> try exact differentiableAt_pow _
    <|> try apply DifferentiableAt.mul
    <|> try apply DifferentiableAt.add

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_25]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_sin
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_cos
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
  simp [h₁]

/-- d/dx cos(exp x * (x^2 + 3) + cos(log x)) -/
example (h₁ : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  simp [h₁]

/-- d/dx tan(exp x * (x^2 + 3) + cos(log x)) -/
example (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h₁, h₂]

/-- d/dx exp(exp x * (x^2 + 3) + cos(log x)) -/
example (h₁ : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  simp [h₁]

/-- d/dx exp((exp x *(x^2 + 3)) / sin(2*x - 1)^2) -/
example (h : (sin (2 * x - 1)) ^ 2 ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) / (sin (2 * x - 1) ^ 2))) x =
    exp (exp x * (x^2 + 3) / sin (2 * x - 1) ^ 2)
      * ( ((exp x * (x^2 + 3) + 2 * x * exp x) * sin (2 * x - 1) ^ 2
           - exp x * (x^2 + 3) * (2 * sin (2 * x - 1) * cos (2 * x - 1) * 2))
          / sin (2 * x - 1) ^ 4 ) := by
  simp [h]

end DerivativeExamples

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) / (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
  -- unfold the various deriv lemmas for log, div, mul, sin, exp, etc.
  simp [deriv, h₁, h₂]
  -- finish the algebra
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- expand all the little `deriv_…` facts
  simp [ deriv_add
       , deriv_mul
       , deriv_div
       , deriv_pow''  -- for `(_)^2`
       , deriv_exp
       , deriv_sin
       , deriv_cos
       , h_div_ne_zero_2
       , pow_two        -- to turn `(...)^2` into `(…)^2`
       ]
  -- finish by pure algebraic rearrangement
  ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
  -- turn our `λ x ↦ …` into a composition so that `deriv_comp` will fire
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]

  -- the whole thing is a product of three factors
  nth_rewrite 1 [deriv_mul]   -- differentiate `(exp x * (x^2+3) / sin^2) * (exp x * (x^2+3))`
  nth_rewrite 1 [deriv_mul]   -- now differentiate `F * (exp x * (x^2+3))`

  -- first factor `exp x * (x^2+3) / sin^2`
  nth_rewrite 1 [Real.deriv_exp]   -- deriv of the first `exp x`
  nth_rewrite 1 [deriv_mul]        -- then smear it into `exp x * (x^2+3)`
  nth_rewrite 1 [deriv_add]        -- deriv of `x^2 + 3`
  nth_rewrite 1 [deriv_pow'']      -- deriv of `x^2`
  nth_rewrite 1 [deriv_id'']       -- deriv of `x`
  nth_rewrite 1 [deriv_const]      -- deriv of `3`

  -- now the division by `sin^2`
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']      -- deriv of `u^2` where `u = sin (...)`
  nth_rewrite 1 [deriv_id'']       -- deriv of the inside of that `λ x ↦ (sin((2*x-1)))`
  nth_rewrite 1 [Real.deriv_sin]   -- deriv of `sin`
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_add]        -- deriv of `(2*x - 1)`
  nth_rewrite 1 [deriv_mul]        -- deriv of `2*x`
  nth_rewrite 1 [deriv_const]      -- deriv of `1`

  -- back to the outer product
  nth_rewrite 1 [Real.deriv_exp]   -- deriv of the second `exp x`
  nth_rewrite 1 [deriv_mul]        -- then `exp x * (x^2 + 3)`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- now everything is unfolded; finish by collecting like terms
  ring

  -- now discharge all the differentiability‐at‐x proofs
  -- note how they mirror exactly what we used above:
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_sin
  exact differentiableAt_const _
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- all of the usual derivation rules are tagged `@[simp]`,
  -- so this one line does the whole job:
  simp [h_div_ne_zero, h_log_ne_zero]

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- everything unfolds directly
  simp [h_div_ne_zero, h_log_ne_zero]

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 4 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_div_ne_zero_29, h_log_ne_zero_30, h_log_ne_zero_32]
ring
exact Real.differentiableAt_log (h_log_ne_zero_32)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_30)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)
exact h_div_ne_zero_29
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29))

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  norm_deriv

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x =
      - sin (exp x * (x ^ 2 + 3) + cos (log x)) *
        (exp x * (x ^ 2 + 3) + exp x * 2 * x - sin (log x) / x) := by
  norm_deriv

example (x : ℝ)
    (h_tan_ne_zero : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
    (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x =
      (exp x * (x ^ 2 + 3) + exp x * 2 * x - sin (log x) / x) /
        cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  norm_deriv

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x =
      exp (exp x * (x ^ 2 + 3) + cos (log x)) *
        (exp x * (x ^ 2 + 3) + exp x * 2 * x - sin (log x) / x) := by
  norm_deriv

example {x : ℝ}
    (h_div_ne_zero₁ : sin (2 * x - 1) ^ 2 ≠ 0)
    (h_log5_ne_zero  : log 5 ≠ 0)
    (h_logx_ne_zero : x ≠ 0)
    (h₅ : 5 ≠ 0) :
    deriv (fun x =>
      (exp x * (x ^ 2 + 3)) / sin (2 * x - 1) ^ 2 * x ^ 3 * (log x / log 5)) x =
    (((((exp x * (x ^ 2 + 3)) + exp x * 2 * x) * sin (2 * x - 1) ^ 2
      - (exp x * (x ^ 2 + 3)) * (2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)))
      / (sin (2 * x - 1) ^ 2) ^ 2) * (x ^ 3)
      + ((exp x * (x ^ 2 + 3) / sin (2 * x - 1) ^ 2) * (3 * x ^ 2)))
     * (log x / log 5)
   + ((exp x * (x ^ 2 + 3) / sin (2 * x - 1) ^ 2 * x ^ 3)
     * (((1 / x) * log 5) / log 5 ^ 2)) :=
by norm_deriv

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- first expand all the `deriv (...) _` using the chain‐, product‐, quotient‐, power‐, sum‐,
  -- constant‐, identity‐ and basic trigonometric/log/exponential rules
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 2 [deriv_add]
  nth_rewrite 2 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_neg]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  ring

  -- now discharge all the differentiability‐at‐x side‐conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  -- sin (2x-1)
  exact Real.differentiableAt_sin
  -- inside of sin: 2 * x - 1
  exact DifferentiableAt.sub
    (DifferentiableAt.mul differentiableAt_id differentiableAt_const)
    differentiableAt_const
  -- log (5*x+2)
  exact Real.differentiableAt_log h_log_ne_zero_25

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- expand sin ∘ (…)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- now we have deriv of an add
  nth_rewrite 1 [deriv_add]
  -- first summand: exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- second summand: x^3 * (log x / log 5)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- clean up algebra
  ring
  -- now discharge differentiability side‐conditions
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.mul (differentiableAt_pow _)
      (DifferentiableAt.div (Real.differentiableAt_log h_log_ne_zero_21)
                             (differentiableAt_const _)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- turn deriv (λ x, log (…)) into deriv_log ∘ (…)
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log h_fn_ne_zero]
  -- now we differentiate the “+” and “*” inside the log
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- and now the second summand x^3 * (log x / log 5)
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- finish with ring
  ring
  -- finally discharge the differentiability side–conditions
  -- deriv_log
  exact Real.differentiableAt_log h_fn_ne_zero
  -- deriv_mul  (exp x • (x^2+3))
  exact Real.differentiableAt_mul (Real.differentiableAt_exp) 
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  -- deriv_mul  (x^3 • (log x / log 5))
  exact Real.differentiableAt_mul (differentiableAt_pow _) 
    (Real.differentiableAt_div (Real.differentiableAt_log h_log_ne_zero) (differentiableAt_const _)
      h_div_ne_zero)
  -- the rest
  exact differentiableAt_const _
  exact differentiableAt_id
  exact differentiableAt_pow _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
  -- `simp` will expand all `deriv_*` lemmas and
  -- discharge the side‐conditions on `log` and `x ≠ 0`.
  simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
  -- then everything is just a `ring`‐style arithmetic check
  ring

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- unfold `deriv f x = (f' x)` as a composition
  nth_rewrite 1 [← Function.comp_def]
  -- f = f₁ + f₂ + f₃
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]
  -- f₁ = exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- f₂ = x^3 * (log x / log 5) = x^3 * (log x * (1 / log 5))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- f₃ = (sin (2 x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- finish the algebra
  ring
  -- now discharge all the differentiability side‐goals
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.mul
      (DifferentiableAt.pow (3 : ℕ) differentiableAt_id)
      (DifferentiableAt.mul
        (Real.differentiableAt_log h_log_ne_zero_20)
        (differentiableAt_const _)))
  exact DifferentiableAt.pow _ (DifferentiableAt.comp Real.differentiableAt_sin
    (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id))
  all_goals try exact differentiableAt_const _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- `simp` will fire all the `deriv_add`, `deriv_mul`, `deriv_exp`, `deriv_log`, `deriv_sin`, `deriv_cos`, ...
  -- and then `ring` under the hood to rearrange the sum into the exact RHS.
  simpa [h_div, h_x] using by simp

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) := by
  -- expand deriv (sin ∘ (···))
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- now differentiate the inner sum
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now the cosine‐of‐log part
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  ring
  -- discharge differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_16
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul (Real.differentiableAt_exp)
                            (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16)
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add
    (DifferentiableAt.mul (Real.differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) := by
  simp [h]; ring

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x)) ^ 2 := by
  dsimp only [div_eq_mul_inv]
  simp [deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_cos, deriv_log,
        deriv_id, deriv_const, h]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => sin (exp x * (x^2 + 3) + cos (log x))) x =
      cos (exp x * (x^2 + 3) + cos (log x))
        * (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x) := by
  simp [deriv_sin, deriv_comp, deriv_g x h]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
      -sin (exp x * (x^2 + 3) + cos (log x))
        * (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x) := by
  simp [deriv_cos, deriv_comp, deriv_g x h]

example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
                (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
      (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x)
        / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [deriv_tan, deriv_comp, deriv_g x h₂, h₁]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
      exp (exp x * (x^2 + 3) + cos (log x))
        * (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x) := by
  simp [deriv_exp, deriv_comp, deriv_g x h]

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) := by
  deriv
  ring

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) / (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x)) := by
  -- turn `deriv (fun x => log (…)) x` into a composition
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- now differentiate the inner sum `exp x * (x^2 + 3) + cos (log x)`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- and finally the `cos (log x)` part
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- clean up the algebra
  ring
  -- now discharge all the differentiability side–conditions
  exact Real.differentiableAt_log h₁
  exact DifferentiableAt.add
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h₂))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- expand every deriv, then simplify the algebra
  simp [deriv, deriv_add, deriv_mul, deriv_comp,
        Real.deriv_exp, deriv_pow, deriv_id, deriv_const,
        Real.deriv_log, Real.deriv_cos]
  ring

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.exp x) + (Real.cos (Real.log x) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x)) := by
  -- `deriv` will automatically
  --   • expand compositions
  --   • apply `deriv_exp`, `deriv_cos`, `deriv_log` etc.
  --   • check all differentiability side‐conditions
  --   • then simplify the result to exactly the RHS above
  deriv

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
by simp only
    [ deriv, deriv_add, deriv_mul
    , real.deriv_exp, deriv_add, deriv_pow', deriv_id', deriv_const
    , real.deriv_cos, real.deriv_log, h ]
; ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.cos (Real.log x)) + (Real.cos (Real.log x) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_div_ne_zero_23, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_15)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_15)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- expand the definitions
  nth_rewrite 1 [← Function.comp_def]
  -- split the outer sum
  nth_rewrite 1 [deriv_add]
  -- ===== deriv (exp x * (x^2+3)) =====
  -- apply deriv_mul twice to see exp and (x^2+3)
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- ===== deriv (cos(log x) * x^3 * (log x / log 5)) =====
  -- treat it as (cos(log x)) * (x^3) * ((log x)/(log 5))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- first factor cos(log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]   -- log 5 is a constant
  -- second factor x^3
  nth_rewrite 1 [deriv_pow'']
  -- third factor (log x)/(log 5) = log x * (log 5)⁻¹
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now tidy up the algebra
  ring
  -- and finally discharge all the differentiability‐at‐x assumptions
  -- for the sum of two functions
  exact DifferentiableAt.add
    -- first summand: exp x * (x^2 + 3)
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    -- second summand: cos(log x) * x^3 * (log x / log 5)
    (DifferentiableAt.mul
      (DifferentiableAt.mul
        (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))
        (differentiableAt_pow _))
      (DifferentiableAt.mul
        (Real.differentiableAt_log h_log_ne_zero_16)
        (differentiableAt_const _)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- The following `simp` will apply all the `deriv_*` lemmas
  -- and expand compositions.  Then `ring` cleans up the algebra.
  simp [deriv_add, deriv_mul, deriv_exp, deriv_cos, deriv_log, deriv_pow,
        deriv_id', deriv_const, deriv_comp]; ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- `deriv` will expand `deriv (fun x => …)`, apply `deriv_comp`, `Real.deriv_cos`, …,
  -- discharge all differentiability‐at obligations, and close the ring‐proof.
  deriv

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- chain‐rule for exp
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- derivative of (exp x * (x^2+3) - cos (log x))
  nth_rewrite 1 [deriv_sub]
  -- derivative of exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- derivative of cos (log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  ring
  -- now the differentiability side‐goals
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero
  exact differentiableAt_id
  exact differentiableAt_pow (2:ℕ)
  exact differentiableAt_const (3:ℝ)
  exact Real.differentiableAt_exp
  -- building up differentiability of exp x * (x^2+3)
  exact DifferentiableAt.add (differentiableAt_pow (2:ℕ)) (differentiableAt_const (3:ℝ))
  exact DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow (2:ℕ)) (differentiableAt_const (3:ℝ)))
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero)
  -- now the inner subtraction is differentiable
  exact Real.differentiableAt_exp
  exact DifferentiableAt.sub
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow (2:ℕ)) (differentiableAt_const (3:ℝ))))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero))

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x)) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- expand derivatives
  nth_rewrite 1 [←Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 2 [deriv_add]
  -- first exp·(x^2+3)
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 2 [Real.deriv_exp]
  nth_rewrite 2 [deriv_pow'']
  nth_rewrite 2 [deriv_id'']
  nth_rewrite 2 [deriv_const]
  -- the cos ∘ log part
  nth_rewrite 1 [←Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- second exp·(x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- tidy up numerals
  ring
  -- now discharge the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_15)
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.exp x) + (Real.cos (Real.log x) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- expand `deriv (λ x, …)` into sums, products, compositions, etc.
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- tidy up the algebra
  ring
  -- discharge all the differentiability side–goals
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_15
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_15

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * Real.cos (Real.log x)) + (Real.cos (Real.log x) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- The `derivative` tactic will apply all the usual rules
  derivative
  -- Now clean up the algebraic mess
  ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- expand all the `deriv` instances
  simp [ deriv_const
       , deriv_id
       , deriv_add
       , deriv_sub
       , deriv_mul
       , deriv_pow
       , deriv_exp
       , deriv_log
       , deriv_cos
       , deriv_sin ] 
  -- now the goal is just a field‐ring equality
  ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  dsimp only [deriv, Function.comp]
  simp [deriv_sin, deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const, deriv_cos, deriv_log]
  ring

-- 2) d/dx cos (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = (-1) * sin ((exp x) * (x ^ 2 + 3) + cos (log x))
      * ((exp x * (x ^ 2 + 3)) + (exp x * (2 * x))
         + (-1) * sin (log x) * ((1 : ℝ) / x)) :=
by
  dsimp only [deriv, Function.comp]
  simp [deriv_cos, deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const, deriv_cos, deriv_log]
  ring

-- 3) d/dx tan (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h₁ : cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = ((exp x * (x ^ 2 + 3)) + (exp x * (2 * x))
         + (-1) * sin (log x) * ((1 : ℝ) / x))
      / cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ^ 2 :=
by
  dsimp only [deriv, Function.comp]
  simp [deriv_tan h₁, deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const, deriv_cos, deriv_log]
  ring

-- 4) d/dx exp (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = exp ((exp x) * (x ^ 2 + 3) + cos (log x))
      * ((exp x * (x ^ 2 + 3)) + (exp x * (2 * x))
         + (-1) * sin (log x) * ((1 : ℝ) / x)) :=
by
  dsimp only [deriv, Function.comp]
  simp [deriv_exp, deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const, deriv_cos, deriv_log]
  ring

-- 5) d/dx [exp x * (x^2+3) - cos (log x) + x^3 * (log x / log 5)]
example (x : ℝ)
  (h₁ : x ≠ 0)
  (h₂ : log (5 : ℝ) ≠ 0)
  (h₃ : (5 : ℝ) ≠ 0) :
  deriv (fun x => (exp x) * (x ^ 2 + 3) - cos (log x) + x ^ 3 * (log x / log 5)) x
    = (exp x * (x ^ 2 + 3)) + (exp x * (2 * x))
      - ((-1) * sin (log x) * ((1 : ℝ) / x))
      + ((3 : ℝ) * x ^ 2) * (log x / log 5)
      + (x ^ 3) * (((1 / x) * log 5) / log 5 ^ 2) :=
by
  dsimp only [deriv, Function.comp]
  simp [ deriv_mul, deriv_pow, deriv_id, deriv_const
       , deriv_exp, deriv_cos, deriv_log, deriv_add
       ]
  ring

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- this will perform all the `deriv_add`, `deriv_mul`, `Real.deriv_*` etc.
  deriv
  -- now just clean up the ring–arithmetics
  ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
f(x) = Real.exp x * (x² + 3) − Real.cos (Real.log x) * (Real.log (5*x + 2) ^ 3).

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
example (x : ℝ) (h_log_ne_zero_16 : x ≠ 0) :
  deriv (λ x => Real.cos ((Real.exp x * (x ^ 2 + (3:ℝ))) * Real.cos (Real.log x))) x
    = (-1 : ℝ)
      * Real.sin ((Real.exp x * (x ^ 2 + (3:ℝ))) * Real.cos (Real.log x))
      * ( ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * (2:ℝ * x))) * Real.cos (Real.log x)
          + (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1 : ℝ) * Real.sin (Real.log x) * (1:ℝ / x)) )

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) ^ 2 := by
  -- expand definitions and apply the chain‐rule / product‐rule
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_tan]
  -- now differentiate (u * v) where u = (exp x * (x^2+3)), v = cos (log x)
  nth_rewrite 1 [deriv_mul]
  -- inside u we have another multiplication
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now rebuild the cos(log x) part
  nth_rewrite 3 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  ring
  -- discharge all the differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_16
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16)
  exact Real.differentiableAt_tan.mpr h_tan_ne_zero_1
  exact DifferentiableAt.mul
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16))

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
  -- expose deriv (exp ∘ …)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- expose deriv ((Real.exp x * (x^2+3)) * Real.cos (Real.log x))
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_mul]  -- first mul
  nth_rewrite 1 [Real.deriv_mul]  -- second mul
  -- deriv of Real.exp x
  nth_rewrite 1 [Real.deriv_exp]
  -- deriv of (x^2 + 3)
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- deriv of Real.cos (Real.log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  ring
  -- now discharge differentiability
  exact Real.differentiableAt_log h_log_ne_zero
  exact differentiableAt_const _
  exact differentiableAt_pow _
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact Real.differentiableAt_exp
  exact Real.differentiableAt_cos
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero)
  exact DifferentiableAt.mul
    (DifferentiableAt.mul Real.differentiableAt_exp (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero))
  exact Real.differentiableAt_exp

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * Real.cos ((Real.log (x)))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) / (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- `simp` knows deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_id, deriv_const, deriv_cos
  -- the only one it doesn’t know automatically is `Real.deriv_log h_log_ne_zero`
  simp [Real.deriv_log h_log_ne_zero]
  ring

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16)))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  deriv

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- apply the product‐rule three times, the chain‐rule, etc.
  simp [deriv_mul, deriv_pow'',
        deriv_add, deriv_sub, deriv_comp,
        Real.deriv_exp, Real.deriv_cos, Real.deriv_sin, Real.deriv_log]
  -- clean up the resulting expression
  ring

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  simp [h_log_ne_zero_15, h_div_ne_zero_23, h_log_ne_zero_26]

example (x: ℝ)  (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
 `ring`
      (((((exp x * (x^2 + 3) + exp x * (2 * x))
         * cos (log x))
        + exp x * (x^2 + 3) * (- sin (log x) * (1 / x)))
       * x^3
       + exp x * (x^2 + 3) * cos (log x) * (3 * x^2))
      * (log x / log (5 : ℝ)))
      + exp x * (x^2 + 3) * cos (log x) * x^3 * (((1 / x) * log (5 : ℝ)) / (log (5 : ℝ))^2) := by
  -- 1) expand all occurrences of `deriv (fun x => …)` by the chain‐ and product‐rules
  simp only [← Function.comp_def]
  simp only [ deriv_mul
            , deriv_exp
            , deriv_mul
            , deriv_pow'
            , deriv_add
            , deriv_mul
            , deriv_cos
            , deriv_log
            , deriv_pow'
            , deriv_id
            , deriv_const
            , deriv_div
            ]
  -- 2) collect and simplify the resulting algebraic expression
  ring

  -- 3) discharge all the differentiability‐at‐x side‐goals in one go
  have h₁ : differentiableAt (fun x => exp x) x      := differentiableAt_exp
  have h₂ : differentiableAt (fun x => x^2 + 3) x    := (differentiableAt_pow 2).add differentiableAt_const
  have h₃ : differentiableAt (fun x => cos (log x)) x := differentiableAt_cos (differentiableAt_log h_log)
  have h₄ : differentiableAt (fun x => x^3) x         := differentiableAt_pow 3
  have h₅ : differentiableAt (fun x => log x / log 5) x
           := differentiableAt_div differentiableAt_log h_div
  exact (h₁.mul h₂).mul h₃ .mul h₄ .mul h₅

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.cos (Real.log x)) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) := by
  derivative!

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact h_div_ne_zero_3
exact Real.differentiableAt_cos
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (h_div_ne_zero_3)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / Real.cos ((Real.log (x)))) ≠ 0) (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) ^ 2 := by
  -- unfold the outer tan ∘ (…) 
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_tan]

  -- now the inner division
  nth_rewrite 1 [deriv_div]

  -- the numerator is exp x * (x^2 + 3), so a product
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- the denominator is cos (log x), another composition
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]

  -- finish the algebra
  ring

  -- now discharge all differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_16
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_16)
  exact DifferentiableAt.div
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_16))
    h_div_ne_zero_3
  exact Real.differentiableAt_tan.mpr h_tan_ne_zero_1

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact h_div_ne_zero_3
exact Real.differentiableAt_exp
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (h_div_ne_zero_3)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / Real.cos ((Real.log (x)))) ≠ 0) (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x))) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) / (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
field_simp [h_log_ne_zero_1, h_div_ne_zero_3, h_log_ne_zero_16]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))
exact h_div_ne_zero_3
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_16))) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- step 1: expand `deriv (λ x => f x + g x) = deriv f + deriv g`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- step 2: f₁ x = (exp x * (x^2+3)) / cos (log x)
  nth_rewrite 1 [deriv_div]
  -- deriv of numerator exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- deriv of denominator cos (log x)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- step 3: f₂ x = exp x * (x^2+3)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- final tidy
  ring
  -- now supply all the differentiability proofs in the order
  -- that `nth_rewrite` demanded them:
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_15
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul (Real.differentiableAt_exp)
                           (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_15
  exact DifferentiableAt.div
    (DifferentiableAt.mul (Real.differentiableAt_exp)
                           (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_15))
    h_div_ne_zero_2
  exact Real.differentiableAt_exp
  exact DifferentiableAt.mul (Real.differentiableAt_exp)
                            (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * Real.exp x) * ((2:ℝ) * x)) := by
  -- `simp` knows all the `deriv_mul`, `deriv_div`, `deriv_exp`, …
  -- lemmas and will also close the side‐conditions coming from
  -- `DifferentiableAt` automatically.
  simp [h_div_ne_zero_3, h_log_ne_zero_16]

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- `simp` will use all the `@[simp]`‐lemmas
  -- such as `deriv_mul`, `deriv_div`, `deriv_exp`, `deriv_pow`,
  -- `deriv_cos`, `deriv_log`, together with the side‐conditions
  -- `h_div_ne_zero` and `h_log_ne_zero`.
  simp [h_div_ne_zero, h_log_ne_zero]
  -- Now clean up the ugly rational‐trigonometric polynomial
  ring

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15, h_div_ne_zero_23, h_log_ne_zero_15, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_15)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_15)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_div_ne_zero_3: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_16: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- unfold definitions so `simp` can see them
  dsimp only [Function.comp, id]
  -- simp knows all the `deriv_add`, `deriv_mul`, `deriv_div`, `deriv_pow`,
  -- `Real.deriv_exp`, `Real.deriv_log`, `Real.deriv_cos` etc. as `@[simp]` lemmas
  simp [h_cos_ne, h_x_ne, h_log5_ne]
  -- the only remaining goal is a polynomial/ring‐style identity
  ring

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2 + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_15))) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_div_ne_zero_2: Real.cos ((Real.log (x))) ≠ 0) (h_log_ne_zero_15: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * Real.cos (Real.log x) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) / Real.cos (Real.log x) ^ 2) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.cos (Real.log x)) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  deriv
  ring

-- 2) derivative of cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) + - sin (log x) * (1 / x)) := by
  deriv
  ring

-- 3) derivative of tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) + - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv
  ring

-- 4) derivative of exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) + - sin (log x) * (1 / x)) := by
  deriv
  ring

-- 5) the big quotient/product example
example (x : ℝ)
  (h₁ : cos (log x) ≠ 0)
  (h₂ : x ≠ 0)
  (h₃ : (5 * x + 2) ≠ 0) :
  deriv (fun x => exp x * (x^2 + 3) / cos (log x) * (log (5 * x + 2)) ^ 3) x
    = (((exp x * (x^2 + 3) + exp x * (2 * x)) * cos (log x)
        - exp x * (x^2 + 3) * (- sin (log x) * (1 / x))) / cos (log x) ^ 2)
      * (log (5 * x + 2) ^ 3)
      + (exp x * (x^2 + 3) / cos (log x)) * (3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2))) := by
  deriv
  ring

example (x: ℝ) : deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
  simp [ Function.comp
       , deriv_comp
       , deriv_add, deriv_mul
       , Real.deriv_sin, Real.deriv_cos, Real.deriv_exp, Real.deriv_log
       , deriv_pow, deriv_id, deriv_const
       ]
  ring

-- 2) deriv of cos(exp x·(x^2+3)+cos(log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x =
      (-1) * sin ((exp x) * (x^2 + 3) + cos (log x))
      * ((exp x * (x^2 + 3)) + (exp x * (2 * x)) + (-1) * sin (log x) * (1 / x)) := by
  simp [ Function.comp
       , deriv_comp
       , deriv_add, deriv_mul
       , Real.deriv_cos, Real.deriv_exp, Real.deriv_log
       , deriv_pow, deriv_id, deriv_const
       ]
  ring

-- 3) deriv of tan(exp x·(x^2+3)+cos(log x))
example (x : ℝ)
  (h₁ : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x =
      ((exp x * (x^2 + 3)) + (exp x * (2 * x)) + (-1) * sin (log x) * (1 / x))
      / cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [ Function.comp
       , deriv_comp
       , deriv_add, deriv_mul
       , Real.deriv_tan, Real.deriv_exp, Real.deriv_log
       , deriv_pow, deriv_id, deriv_const
       ]
  ring

-- 4) deriv of exp(exp x·(x^2+3)+cos(log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x =
      exp ((exp x) * (x^2 + 3) + cos (log x))
      * ((exp x * (x^2 + 3)) + (exp x * (2 * x)) + (-1) * sin (log x) * (1 / x)) := by
  simp [ Function.comp
       , deriv_comp
       , deriv_add, deriv_mul
       , Real.deriv_exp, Real.deriv_log
       , deriv_pow, deriv_id, deriv_const
       ]
  ring

-- 5) deriv of sin(exp x·(x^2+3) + (sin(2x–1))^2)
example (x : ℝ) :
    deriv (fun x => sin ((exp x) * (x^2 + 3) + (sin (2 * x - 1))^2)) x =
      cos ((exp x) * (x^2 + 3) + (sin (2 * x - 1))^2)
      * (  (exp x * (x^2 + 3))
         + (exp x * (2 * x))
         + (2 : ℝ) * sin (2 * x - 1) * (cos (2 * x - 1) * 2) ) := by
  -- `simp` will use all the deriv_*. lemmas plus `Function.comp`
  simp [ Function.comp
       , deriv_comp
       , deriv_add, deriv_mul, deriv_pow
       , deriv_id, deriv_const
       , Real.deriv_sin, Real.deriv_cos, Real.deriv_exp
       ]
  ring

example (x: ℝ) : deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
  -- computational part
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_cos]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']     -- the “^2” on sin
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  ring

  -- differentiability part
  exact differentiableAt_cos
  exact differentiableAt_exp
  exact differentiableAt_pow (by decide)   -- sin (…) ^ 2
  exact differentiableAt_const 3
  exact DifferentiableAt.add (differentiableAt_pow (by decide)) (differentiableAt_const 3)
  exact DifferentiableAt.mul (differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow (by decide)) (differentiableAt_const 3))
  exact differentiableAt_sin
  exact differentiableAt_const (2 : ℝ)
  exact differentiableAt_id
  exact DifferentiableAt.mul (differentiableAt_const (2 : ℝ)) differentiableAt_id
  exact differentiableAt_const (1 : ℝ)
  exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const (2 : ℝ)) differentiableAt_id) (differentiableAt_const (1 : ℝ))
  exact differentiableAt_sin
  exact differentiableAt_pow (by decide)   -- again for the outer sin ^ 2
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow (by decide)) (differentiableAt_const 3)))
    (DifferentiableAt.pow
      (differentiableAt_sin
        (DifferentiableAt.sub
          (DifferentiableAt.mul (differentiableAt_const (2 : ℝ)) differentiableAt_id)
          (differentiableAt_const (1 : ℝ))))
      (by decide))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) / (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
  -- the `deriv` tactic applies the chain‐, product‐, sum‐, and power‐rules
  deriv
  -- `ring` finishes the algebraic simplification of the numerator
  ring

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
field_simp [h_log_ne_zero_25]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25)))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  simp [ deriv, deriv_add, deriv_mul, deriv_comp, deriv_pow'', deriv_sub,
         Real.deriv_exp, Real.deriv_sin ]
  ring

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- unfold the definition of `(f ∘ g) x = f (g x)` so that `simp` can see all the `deriv_comp` lemmas
  simp [← Function.comp_def]
  -- now `simp` uses `deriv_add`, `deriv_mul`, `Real.deriv_exp`, `Real.deriv_sin`, `Real.deriv_cos`, `deriv_pow''` …
  -- and `ring` finishes the arithmetic.
  ring

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- A: deriv (exp x * (x^2 + 3))
  have A : deriv (fun x => exp x * (x ^ 2 + 3)) x
        = exp x * (x ^ 2 + 3) + exp x * (2 * x) := by
    dsimp; simp [deriv_mul, deriv_exp, deriv_pow, deriv_const, deriv_id]
  -- B: deriv (sin (2*x - 1) ^ 2)
  have B : deriv (fun x => sin (2 * x - 1) ^ 2) x
        = 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) := by
    dsimp; simp [deriv_pow, deriv_sin, deriv_cos, deriv_id, deriv_const]
  -- C: deriv (x^3 * (log x / log 5))
  have C : deriv (fun x => x ^ 3 * (log x / log (5 : ℝ))) x
        = (3 * x ^ 2) * (log x / log 5) 
        + x ^ 3 * (((1 / x) * log 5) / log 5 ^ 2) := by
    dsimp; simp [deriv_mul, deriv_pow, deriv_log, deriv_const, deriv_id]
  -- now put it all together
  dsimp [deriv]; simp [A, B, C]; ring

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  simp [deriv, deriv_sin, deriv_cos, deriv_exp, deriv_log, deriv_pow, deriv_mul, deriv_add]

-- 2) deriv (x ↦ cos (exp x * (x^2 + 3) + cos (log x))) x
example {x : ℝ} (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x =
    - sin (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [deriv, deriv_sin, deriv_cos, deriv_exp, deriv_log, deriv_pow, deriv_mul, deriv_add]

-- 3) deriv (x ↦ tan (exp x * (x^2 + 3) + cos (log x))) x
example {x : ℝ}
  (h₁ : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x =
    (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  simp [deriv, deriv_tan, deriv_sin, deriv_cos, deriv_exp, deriv_log, deriv_pow, deriv_mul,
        deriv_add]

-- 4) deriv (x ↦ exp (exp x * (x^2 + 3) + cos (log x))) x
example {x : ℝ} (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x =
    exp (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [deriv, deriv_sin, deriv_cos, deriv_exp, deriv_log, deriv_pow, deriv_mul, deriv_add]

-- 5) one big bundle: deriv of
--    exp x * (x^2 + 3) + (sin(2x-1)^2 * x^3) * (log x / log 5)
example {x : ℝ}
  (h₁ : log 5 ≠ 0) (h₂ : x ≠ 0) (h₃ : (5 : ℝ) ≠ 0) :
  deriv (fun x => exp x * (x ^ 2 + 3)
      + (sin (2 * x - 1) ^ 2 * x ^ 3) * (log x / log 5)) x =
    exp x * (x ^ 2 + 3) + exp x * (2 * x)
      + (((2 * sin (2 * x - 1) * cos (2 * x - 1) * 2) * x ^ 3
          + sin (2 * x - 1) ^ 2 * (3 * x ^ 2)) * (log x / log 5))
      + (sin (2 * x - 1) ^ 2 * x ^ 3) * ((1 / x * log 5) / (log 5) ^ 2) := by
  simp [deriv,
        deriv_sin, deriv_cos, deriv_exp, deriv_log, deriv_pow,
        deriv_mul, deriv_add]

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- expand `deriv (fun ...) x` as `deriv (λ x ↦ …) x`
  nth_rewrite 1 [← Function.comp_def]

  -- split the big sum  A + B + C
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]

  -- 1st summand: deriv (exp x * (x^2+3))
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]

  -- 2nd summand: deriv ((sin (2*x-1))^2)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- 3rd summand: deriv ((log (5*x+2))^3)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- clean up the algebra
  ring

  -- now discharge all the differentiability side‐conditions
  -- (exp, pow, const, sin, sub, mul, id, log, add, pow)
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact Real.differentiableAt_sin
  exact DifferentiableAt.sub
      (DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id)
      (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_sin
      (DifferentiableAt.sub
        (DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id)
        (differentiableAt_const _))
  exact DifferentiableAt.pow _
  exact Real.differentiableAt_log (by simpa [ne_comm] using h)
  exact DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id
  exact DifferentiableAt.add
      (DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id)
      (differentiableAt_const _)
  exact DifferentiableAt.pow _

-- ==== a much shorter proof using the `derivative!` tactic ====
example (x : ℝ) (h : (5 * x + 2) ≠ 0) :
    deriv (fun x => exp x * (x ^ 2 + 3)
                  + (sin (2 * x - 1)) ^ 2
                  + (log (5 * x + 2)) ^ 3) x
    = exp x * (x ^ 2 + 3)
      + exp x * (2 * x)
      + 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)
      + 3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2)) := by
  derivative!                    -- does all the rewriting
  field_simp [h]                -- clears the 5 / (5*x+2) and so on

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_25]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _)

example (x: ℝ) : deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
  -- turn tan ∘ u into tan (u x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_tan]

  -- now u = (exp x) * (x^2 + 3) - sin (2x-1)^2
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']   -- derivative of (x^2+3)

  -- and the sin‐piece
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]

  -- finish the cos piece inside the denominator
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_const]

  ring

  -- now discharge differentiability side‐conditions
  exact Real.differentiableAt_tan.mpr h_tan_ne_zero
  exact DifferentiableAt.sub
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.pow
      (DifferentiableAt.comp Real.differentiableAt_sin
        (DifferentiableAt.sub
          (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
          (differentiableAt_const _)))
      2)
  exact Real.differentiableAt_exp
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_sin
  exact DifferentiableAt.sub
    (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
    (differentiableAt_const _)
  exact Real.differentiableAt_cos
  exact differentiableAt_const _

example (x: ℝ) : deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  simp [deriv]  -- unfolds all derivs: exp, sin, pow, add, sub, mul, … 
  ring          -- cleans up the ring‐y equality

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x))) := by
  -- `derivative` will fire all the usual exp/sin/cos/pow/…‐derivation
  derivative
  -- then one big `ring` call tidies up the algebra
  ring

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
  -- turn off the λ in order to apply the subtraction rule
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_sub]

  -- first term: derivative of exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- second term: derivative of (sin (2x-1))^2 * cos(log x)
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_mul]

  -- f^2 where f = sin (2x-1)
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- g = cos (log x)
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]

  ring

  -- now discharge differentiability proofs
  -- exp
  exact Real.differentiableAt_exp
  -- x^2 + 3
  exact DifferentiableAt.add (differentiableAt_pow ℝ 2) (differentiableAt_const _)
  -- exp x * (x^2 +3)
  exact DifferentiableAt.mul Real.differentiableAt_exp
        (DifferentiableAt.add (differentiableAt_pow ℝ 2) (differentiableAt_const _))

  -- sin (2x - 1)
  exact Real.differentiableAt_sin.mpr (by
    refine DifferentiableAt.comp (@Real.differentiableAt_sin) ?_
    refine DifferentiableAt.sub
      (DifferentiableAt.mul (differentiableAt_const (2:ℝ)) differentiableAt_id)
      (differentiableAt_const (1:ℝ))
  )

  -- (sin (2x-1))^2
  exact DifferentiableAt.pow (@Real.differentiableAt_sin.mpr _ _ _) 2

  -- cos (log x)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_25

  -- finally combine for the whole subtraction
  exact DifferentiableAt.sub
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow ℝ 2) (differentiableAt_const _)))
    (DifferentiableAt.mul
      (DifferentiableAt.pow (@Real.differentiableAt_sin.mpr _ _ _) 2)
      (DifferentiableAt.comp Real.differentiableAt_cos
        (Real.differentiableAt_log h_log_ne_zero_25)))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  simp [ deriv_sub
       , deriv_add
       , deriv_mul
       , deriv_pow
       , deriv_const
       , deriv_id
       , deriv_comp
       , Real.deriv_exp
       , Real.deriv_sin ]
  ring

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- unfold the outer lambda so that we can apply `deriv_sub` etc.
  nth_rewrite 1 [← Function.comp_def]

  -- (f - g)' = f' - g'
  nth_rewrite 1 [deriv_sub]

  -- now tackle the first term: (Real.exp x * (x^2 + 3))'
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- now the second term: ((Real.sin (2*x-1))^2 * (Real.sin (2*x-1))^2)'
  -- first, unwrap one more comp
  nth_rewrite 2 [← Function.comp_def]

  -- product rule
  nth_rewrite 1 [deriv_mul]
  -- derivative of (sin (2*x-1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- the other factor (sin (2*x-1))^2 has the same derivative
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]

  -- clean up all the casts and collect like terms
  ring

  -- now discharge all the differentiability‐at‐x goals by typeclasses
  all_goals infer_instance

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by

open Real

theorem deriv_complicated
  (x : ℝ) (h₁ : x ≠ 0) (h₂ : log (5 : ℝ) ≠ 0) :
  deriv (fun x => exp x * (x^2 + 3)
                   - (sin (2 * x - 1))^2
                   + x^3 * (log x / log 5)) x =
    exp x * (x^2 + 3)
  + exp x * (2 * x)
  - 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)
  + 3 * x^2 * (log x / log 5)
  + x^3 * (((1 / x) * log 5) / log 5 ^ 2) :=
by
  -- unfold `deriv` into a sum of derivs
  dsimp only [Function.comp]
  simp [ deriv, deriv_exp, deriv_mul, deriv_sub, deriv_pow
       , deriv_sin, deriv_cos, deriv_log, deriv_div
       , deriv_const, deriv_id ]
  ring

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- unfold the definition of `deriv`
  dsimp [deriv]
  -- apply all the one‐step derivative rules
  simp [ h1, h2
       , deriv_sub, deriv_mul
       , deriv_exp, Real.deriv_exp
       , deriv_pow'', deriv_mul
       , deriv_sin, Real.deriv_sin
       , deriv_log, Real.deriv_log h1 ]
  -- clean up the remaining algebra
  ring

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_25]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_25]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _)

example (x: ℝ) : deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ) : deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
  derivative!; ring

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x)) *
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  derivative!; ring

example (x : ℝ) 
    (htan : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) 
    (hlog : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) /
    cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative!; ring

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x)) *
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  derivative!; ring

example (x : ℝ) 
    (h : cos (exp x * (x^2 + 3) * sin (2 * x - 1) ^ 2) ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) * sin (2 * x - 1) ^ 2)) x
  = ((exp x * (x^2 + 3) + 2 * x * exp x) * sin (2 * x - 1) ^ 2
     + exp x * (x^2 + 3) * (2 * sin (2 * x - 1) * cos (2 * x - 1) * 2))
    / cos (exp x * (x^2 + 3) * sin (2 * x - 1) ^ 2) ^ 2 := by
  derivative!; ring

example (x: ℝ) : deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  deriv
  ring

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) / (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
example (x : ℝ) (h : Real.exp x * (x ^ 2 + 3) * Real.sin (2 * x - 1) ^ 2 ≠ 0) :
  deriv (fun x => Real.log (Real.exp x * (x ^ 2 + 3) * Real.sin (2 * x - 1) ^ 2)) x =
    (((Real.exp x * (x ^ 2 + 3)) + Real.exp x * (2 * x)) * Real.sin (2 * x - 1) ^ 2 +
      Real.exp x * (x ^ 2 + 3) * (2 * Real.sin (2 * x - 1) * (Real.cos (2 * x - 1) * 2))) /
    (Real.exp x * (x ^ 2 + 3) * Real.sin (2 * x - 1) ^ 2)

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- step into the definition of deriv
  nth_rewrite 1 [← Function.comp_def]
  -- derivative of a sum
  nth_rewrite 1 [deriv_add]
  -- derivative of the first big product
  nth_rewrite 2 [deriv_mul]
  -- deriv exp
  nth_rewrite 1 [Real.deriv_exp]
  -- derivative of (x^2 + 3)
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- peel off the definition of comp for the sin‐term
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- derivative of (2*x - 1)
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- finish the algebraic simplification
  ring
  -- discharge all the side‐goals about differentiability
  all_goals
    try exact Real.differentiableAt_exp
    <|> try exact differentiableAt_id
    <|> try exact differentiableAt_pow _
    <|> try exact differentiableAt_const _
    <|> try exact Real.differentiableAt_sin
    <|> apply DifferentiableAt.mul
    <|> apply DifferentiableAt.add
    <|> apply DifferentiableAt.sub

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
  -- expand the chain‐rule
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- we have 5 factors, so 4 uses of deriv_mul to reach the inner-most one
  repeat (nth_rewrite 1 [deriv_mul])
  -- now each factor in turn
  -- 1) deriv (exp x)
  nth_rewrite 1 [Real.deriv_exp]
  -- 2) deriv (x^2 + 3)
  nth_rewrite 1 [deriv_add]; nth_rewrite 1 [deriv_pow'']; nth_rewrite 1 [deriv_id'']; nth_rewrite 1 [deriv_const]
  -- 3) deriv (sin (2*x-1))^2
  nth_rewrite 1 [deriv_mul]; nth_rewrite 1 [Real.deriv_sin]; nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]; nth_rewrite 1 [Real.deriv_const]; nth_rewrite 1 [deriv_id'']; nth_rewrite 1 [deriv_const]
  -- 4) deriv (exp x) again
  nth_rewrite 1 [Real.deriv_exp]
  -- 5) deriv (x^2 + 3) again
  nth_rewrite 1 [deriv_add]; nth_rewrite 1 [deriv_pow'']; nth_rewrite 1 [deriv_id'']; nth_rewrite 1 [deriv_const]
  -- collect everything
  ring
  -- now discharge all the differentiability‐at‐point obligations
  all_goals
    try exact Real.differentiableAt_exp
    try exact Real.differentiableAt_sin
    try exact differentiableAt_const _
    try exact differentiableAt_id
    try exact differentiableAt_pow _
    try exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
    try exact DifferentiableAt.mul (Real.differentiableAt_exp) (differentiableAt_pow _)
    try exact DifferentiableAt.mul (Real.differentiableAt_exp)
                      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by

example (x: ℝ) : deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- peel off each “*” one at a time
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 3 [deriv_mul]
  -- peel off the power‐part (x^2 + 3)
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- now the two copies of (Real.sin (2*x-1))^2
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- finish off the algebra
  ring
  -- differentiability witnesses
  exact Real.differentiableAt_exp
  exact differentiableAt_pow (2 : ℕ) (Real.differentiableAt_id)
  exact differentiableAt_const 3
  exact Real.differentiableAt_sin
  exact Real.differentiableAt_sin
  -- now all the products
  all_goals
    apply DifferentiableAt.mul <;>
    try assumption

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 4 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_29, h_log_ne_zero_30, h_log_ne_zero_32]
ring
exact Real.differentiableAt_log (h_log_ne_zero_32)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_30)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)
exact h_div_ne_zero_29
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29))

example (x: ℝ)  (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 4 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_29, h_log_ne_zero_30, h_log_ne_zero_32]
ring
exact Real.differentiableAt_log (h_log_ne_zero_32)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_30)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)
exact h_div_ne_zero_29
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29)

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  simp [h]
  ring

example (x: ℝ)  (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- turn deriv (λ x => _) into deriv (_ ∘ id)
  nth_rewrite 1 [← Function.comp_def]
  -- outermost multiplication: f * (log …)^3
  nth_rewrite 1 [deriv_mul]
  -- first factor is (exp x * (x^2+3) * sin(…)^2), second is (log …)^3
  -- handle deriv of the first factor
  nth_rewrite 1 [deriv_mul]
  -- now deriv of exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 2 [Real.deriv_exp]
  -- deriv of x^2 + 3
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- back to exp x * (x^2+3) * sin(…)^2
  nth_rewrite 1 [deriv_mul]
  -- deriv (sin (2*x-1))^2
  nth_rewrite 1 [deriv_pow'']
  -- deriv of sin(2*x-1)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- deriv of 2*x - 1
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- now deal with deriv of (log (5*x+2))^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- clean up all the 2’s, 3’s, etc.
  ring
  -- now supply all the basic differentiability proofs
  exact Real.differentiableAt_exp
  exact (differentiableAt.pow (differentiableAt_id) (by norm_num : 2 = 2))
  exact differentiableAt_const
  exact differentiableAt_id
  exact (DifferentiableAt.mul
    (differentiableAt_exp)
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
  exact Real.differentiableAt_sin
  exact (DifferentiableAt.comp
    (differentiableAt_add (differentiableAt_mul (by infer_instance) differentiableAt_const)
                            differentiableAt_const)
    (by norm_num : 2 = 2))
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_25
  exact (DifferentiableAt.pow (differentiableAt_log h_log_ne_zero_25) (by norm_num : 3 = 3))
  exact differentiableAt_const
  exact differentiableAt_id

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_sin
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_cos
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
  -- turn `deriv (λ x, …)` into a composition
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- derivative of tan
  nth_rewrite 1 [Real.deriv_tan]
  -- now apply the quotient rule to the inner fraction
  nth_rewrite 1 [deriv_div]
  -- derivative of exp * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- derivative of (sin (2*x-1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- tidy up
  ring
  -- now the differentiability side–conditions
  -- tan is differentiable at points where cos ≠ 0
  exact Real.differentiableAt_tan.mpr h_tan_ne_zero
  -- the inside is a quotient of two differentiable functions
  exact DifferentiableAt.div
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.pow
      (Real.differentiableAt_sin
        (DifferentiableAt.sub
          (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
          differentiableAt_const))
      2)
    h_sin_ne_zero

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_exp
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) / (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
  -- 1) peel off the outer log
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- 2) peel off the division
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_div]    -- (f / g)' = (f' * g - f * g') / g^2

  -- 3) expand f = exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]

  -- 4) expand g = (sin (2*x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- 5) the nasty algebra
  ring

  -- 6) differentiability side–goals
  · exact Real.differentiableAt_log (h_log_ne_zero_1)
  ·
    apply DifferentiableAt.div
    · -- denom ≠ 0
      exact h_log_ne_zero_1
    · -- numerator: exp x * (x^2 + 3)
      apply DifferentiableAt.mul
      · exact Real.differentiableAt_exp
      · apply DifferentiableAt.add
        · exact differentiableAt_pow (differentiableAt_id) _
        · exact differentiableAt_const _

    · -- denominator: (sin (2*x - 1))^2
      apply differentiableAt_pow
      apply Real.differentiableAt_sin
      apply DifferentiableAt.add
      · apply DifferentiableAt.mul
        · exact DifferentiableAt.const _  -- 2 : ℝ
        · exact differentiableAt_id
      · exact differentiableAt_const _

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- turn `deriv (λ x ↦ … + …)` into a sum of two derivs
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- the first summand is a quotient ⇒ deriv_div
  nth_rewrite 1 [deriv_div]
  -- now break down the numerator (exp x * (x^2+3))
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- break down the denominator ((sin(2x-1))^2)
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now the second summand: cos (log x)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- tidy up the algebra
  ring
  -- now discharge all the differentiability side-goals
  -- we need `differentiableAt` for exp, pow, const, sin, cos, log, id, etc.
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact DifferentiableAt.pow (Real.differentiableAt_sin) 2
  exact DifferentiableAt.sin (DifferentiableAt.mul (DifferentiableAt.const _) (differentiableAt_id))
  exact DifferentiableAt.sub (DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id)
    differentiableAt_const
  exact Real.differentiableAt_sin
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero)
  exact Real.differentiableAt_log h_log_ne_zero
  exact differentiableAt_id
  exact differentiableAt_const

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- expand `deriv (...) x` into sums, quotients, products, comps …
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [Real.deriv_cos]
  ring
  -- now discharge all the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact differentiableAt_pow (Real.differentiableAt_sin (DifferentiableAt.mul (DifferentiableAt.const _) DifferentiableAt.id)) 2
  exact differentiableAt_const (3 : ℝ)
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul (DifferentiableAt.const (2 : ℝ)) DifferentiableAt.id
  exact differentiableAt_const (1 : ℝ)
  exact Real.differentiableAt_cos
  exact DifferentiableAt.mul
    Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _ _) (differentiableAt_const _))
  exact DifferentiableAt.div
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _ _) (differentiableAt_const _)))
    (DifferentiableAt.pow
      (Real.differentiableAt_sin (DifferentiableAt.mul (DifferentiableAt.const _) DifferentiableAt.id)) 2)
    h_div_ne_zero_2
  exact DifferentiableAt.add
    (DifferentiableAt.div
      (DifferentiableAt.mul
        Real.differentiableAt_exp
        (DifferentiableAt.add (differentiableAt_pow _ _) (differentiableAt_const _)))
      (DifferentiableAt.pow
        (Real.differentiableAt_sin (DifferentiableAt.mul (DifferentiableAt.const _) DifferentiableAt.id)) 2)
      h_div_ne_zero_2)
    (DifferentiableAt.pow
      (Real.differentiableAt_sin (DifferentiableAt.mul (DifferentiableAt.const _) DifferentiableAt.id)) 2)

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
by simp [h₁, h₂,…]

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 4 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_div_ne_zero_29, h_log_ne_zero_30, h_log_ne_zero_32]
ring
exact Real.differentiableAt_log (h_log_ne_zero_32)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_30)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)
exact h_div_ne_zero_29
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29))

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- this one line does all the differentiation for us
  deriv
  -- and then we just normalize the algebra
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_25]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_25: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_25]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_25)) _

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_sin
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.exp x * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- `deriv!` applies all the standard derivative rules
  deriv!
  -- the remaining combinatorial sum is then solved by ring
  ring

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- expand `deriv` and use the usual differentiation rules
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  ring
  -- now discharge all the `differentiableAt` side‐goals
  exact Real.differentiableAt_exp
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact differentiableAt_pow _
  exact Real.differentiableAt_log (h_log_ne_zero_20)
  exact differentiableAt_const _
  exact differentiableAt_div (differentiableAt_pow _) (differentiableAt_const _).mpr h_div_ne_zero_19
  exact Real.differentiableAt_sin
  exact DifferentiableAt.sub
      (DifferentiableAt.mul (DifferentiableAt.const (2:ℝ)) differentiableAt_id)
      differentiableAt_const
  exact DifferentiableAt.mul (DifferentiableAt.const (2:ℝ)) differentiableAt_id

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- unfold all the deriv_*
  simp [ deriv_add, deriv_mul,
         Real.deriv_exp, deriv_pow, deriv_id, deriv_const,
         deriv_div, Real.deriv_log,
         deriv_sin, deriv_cos,
         h_x_ne_zero, h_log5_ne_zero ]
  ring
  -- now discharge the differentiability side-goals:
  all_goals
    try exact Real.differentiableAt_exp
    try exact differentiableAt_pow _
    try exact differentiableAt_id
    try exact differentiableAt_const _
    try exact (Real.differentiableAt_log h_x_ne_zero)
    try exact Real.differentiableAt_sin
    try exact Real.differentiableAt_cos
    try exact differentiableAt_mul
    try exact differentiableAt_add
    try exact differentiableAt_div

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22, h_log_ne_zero_26]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  deriv

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
  -- step 1: the outer cos‐composition
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  -- step 2: the argument is a subtraction of two pieces
  nth_rewrite 1 [deriv_sub]
  -- step 3: first piece (exp x * (x^2 + 3))
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- step 4: second piece (x^3 * (log x / log 5))
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- log‐over‐constant; we use deriv_div
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- now clean up with algebra
  ring
  -- now discharge all the differentiability proofs
  exact Real.differentiableAt_cos
  exact DifferentiableAt.sub
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add
        (DifferentiableAt.pow (by decide))
        (DifferentiableAt.const _)))
    (DifferentiableAt.mul
      (DifferentiableAt.pow (by decide))
      (DifferentiableAt.div
        (Real.differentiableAt_log h_log_ne_zero_21)
        (DifferentiableAt.const _)))
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add
    (DifferentiableAt.pow (by decide))
    (DifferentiableAt.const _)
  exact DifferentiableAt.pow (by decide)
  exact DifferentiableAt.const _
  exact Real.differentiableAt_log h_log_ne_zero_21
  exact DifferentiableAt.const _

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
  simp [ deriv_sin, deriv_comp, deriv_add, deriv_mul
       , deriv_exp, deriv_pow, deriv_id, deriv_const
       , deriv_cos, deriv_log ]

-- 2) d/dx cos( E x * (x^2+3) + cos(log x) )
example (x : ℝ) (hx : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [ deriv_cos, deriv_comp, deriv_add, deriv_mul
       , deriv_exp, deriv_pow, deriv_id, deriv_const
       , deriv_log ]

-- 3) d/dx tan( E x * (x^2+3) + cos(log x) )
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (hx : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [ deriv_tan, deriv_comp, deriv_add, deriv_mul
       , deriv_exp, deriv_pow, deriv_id, deriv_const
       , deriv_cos, deriv_log ]

-- 4) d/dx exp( E x * (x^2+3) + cos(log x) )
example (x : ℝ) (hx : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
    * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [ deriv_exp, deriv_comp, deriv_add, deriv_mul
       , deriv_const, deriv_pow, deriv_id
       , deriv_cos, deriv_log ]

-- 5) d/dx exp( E x * (x^2+3) - x^3 * (log x / log 5) )
example (x : ℝ)
  (h₁ : log 5 ≠ 0) (hx : x ≠ 0) (h₃ : (5 : ℝ) ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) - x^3 * (log x / log 5))) x
  = exp (exp x * (x^2 + 3) - x^3 * (log x / log 5))
    * (exp x * (x^2 + 3)
      + exp x * (2 * x)
      - ((3 * x^2) * (log x / log 5)
        + x^3 * (((1 / x) * log 5) / log 5 ^ 2))) := by
  simp [ deriv_exp, deriv_comp, deriv_add, deriv_mul, deriv_sub
       , deriv_const, deriv_pow, deriv_id
       , deriv_log, deriv_div ]

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) / (Real.exp x * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- unfold deriv, apply all the usual differentiation rules, then finish by ring
  simp [hlog5, hx] 
  ring

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x))) := by
  -- expand definition of `deriv` and apply sub, mul, add, pow, id, const, exp, log, …
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv.sub]
  nth_rewrite 2 [deriv.mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv.add]
  nth_rewrite 1 [deriv.pow']
  nth_rewrite 1 [deriv.id']
  nth_rewrite 1 [deriv.const]
  -- now the big product‐quotient piece
  nth_rewrite 3 [← Function.comp_def]
  nth_rewrite 1 [deriv.mul]
  nth_rewrite 1 [deriv.div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [Real.deriv_const]  -- deriv (λ x => 5) = 0
  -- continue expanding the rest
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv.add]
  nth_rewrite 1 [deriv.mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv.add]
  nth_rewrite 1 [deriv.pow']
  nth_rewrite 1 [deriv.id']
  nth_rewrite 1 [deriv.const]
  -- collect everything
  ring
  -- now discharge all the differentiability side‐conditions
  -- we need each subterm to be differentiableAt x
  exact Real.differentiableAt_exp
  exact differentiableAt_const _
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact Real.differentiableAt_log h_log_ne_zero
  exact Real.differentiableAt_const _
  exact Real.differentiableAt_exp
  -- combine by sub,mul,add
  apply DifferentiableAt.sub
  · apply DifferentiableAt.mul
    · exact Real.differentiableAt_exp
    · apply DifferentiableAt.add
      · exact DifferentiableAt.pow
      · exact differentiableAt_const _
  · apply DifferentiableAt.mul
    · apply DifferentiableAt.mul
      · apply DifferentiableAt.pow
      · apply DifferentiableAt.div
        · exact Real.differentiableAt_log h_log_ne_zero
        · exact differentiableAt_const _
    · apply DifferentiableAt.mul
      · exact Real.differentiableAt_exp
      · apply DifferentiableAt.add
        · exact DifferentiableAt.pow
        · exact differentiableAt_const _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  derivative!; ring

/-- 2. d/dx cos (exp x * (x^2 + 3) + cos (log x)) -/
example (h0 : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x) := by
  derivative!; ring

/-- 3. d/dx tan (exp x * (x^2 + 3) + cos (log x)) -/
example (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) (h0 : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative!; ring

/-- 4. d/dx exp (exp x * (x^2 + 3) + cos (log x)) -/
example (h0 : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) / x) := by
  derivative!; ring

/-- 5. One big example combining products, quotients, and powers. -/
example (h1 : log (5 : ℝ) ≠ 0) (h0 : x ≠ 0) (h5 : (5 : ℝ) ≠ 0) :
  deriv (fun x => exp x * (x^2 + 3) 
                - x^3 * (log x / log (5 : ℝ))
                + sin (2 * x - 1) ^ 2) x
  = exp x * (x^2 + 3)
    + exp x * (2 * x)
    - (3 * x^2) * (log x / log 5)
    - x^3 * ((1 / x * log 5) / log 5 ^ 2)
    + 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) := by
  derivative!; ring

end Derivatives

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- expand the definition of deriv, then apply the usual sub/mul/chain‐rules
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 2 [deriv_const]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 2 [deriv_const]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  ring
  -- now discharge all the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact Real.differentiableAt_pow
  exact Real.differentiableAt_log (h_log_ne_zero_20)
  exact differentiableAt_const _
  exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20))
                         (differentiableAt_const _)
  exact Real.differentiableAt_pow
  exact Real.differentiableAt_sin
  exact DifferentiableAt.comp Real.differentiableAt_sin
    (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
                           (differentiableAt_const _))
  exact DifferentiableAt.pow (DifferentiableAt.comp Real.differentiableAt_sin
    (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
                           (differentiableAt_const _)))
                            (by simp)
  exact differentiableAt_const _
  exact differentiableAt_id

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- this single line invokes all the usual deriv lemmas:
  derivative
  -- clean up the resulting rational powers, signs etc.
  ring

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- `derivative!` puts in all the `deriv_mul`, `deriv_pow`, `deriv_log`, etc.,
  -- and discharges the differentiability side‐conditions.
  derivative!
  -- now simplify the exponential‐polynomial part
  ring_exp
  -- and clear denominators / logs
  field_simp [h_log5_ne0, h_x_ne0, h_5_ne0, h_5x2_ne0]

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
Function.comp_def, deriv_comp, Real.deriv_sin, deriv_add, deriv_mul, Real.deriv_exp,
    deriv_pow'', deriv_id'', deriv_const, Real.deriv_cos, Real.deriv_log, Real.deriv_tan,
    …

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- step 1: peel off the outer cos ∘ ·
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]                             -- derivative of f * g
  nth_rewrite 1 [deriv_mul]                             -- now first factor is (exp x)
  nth_rewrite 1 [Real.deriv_exp]                        -- deriv (exp x)
  nth_rewrite 1 [deriv_add]                             -- inside (x^2 + 3)
  nth_rewrite 1 [deriv_mul]                             -- inside x^2
  nth_rewrite 1 [deriv_pow'']                           -- deriv (x ^ 2)
  nth_rewrite 1 [deriv_id'']                            -- deriv id
  nth_rewrite 1 [deriv_const]                           -- deriv (3 : ℝ)
  nth_rewrite 1 [deriv_mul]                             -- back to * x^3
  nth_rewrite 1 [deriv_pow'']                           -- deriv (x ^ 3)
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now peel off the last factor (log x / log 5)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_div]                             -- deriv (f/g)
  nth_rewrite 1 [deriv_log]                             -- deriv (log x)
  nth_rewrite 1 [deriv_const]                           -- deriv (log 5)
  -- now collect everything
  ring
  -- finally discharge all the differentiability hypotheses
  -- we need: differentiableAt cos, sin, exp, log, pow, const, id, mul, add, div
  exact differentiableAt_cos
  exact differentiableAt_sin
  exact differentiableAt_exp
  exact differentiableAt_log (h_log_ne_zero_21)
  exact differentiableAt_pow (by decide)
  exact differentiableAt_const (3:ℝ)
  exact differentiableAt_const (5:ℝ)
  exact differentiableAt_id
  exact (differentiableAt_mul (differentiableAt_exp) (DifferentiableAt.add 
          (differentiableAt_mul (differentiableAt_id) (differentiableAt_id)) 
          (differentiableAt_const _)))
  exact (differentiableAt_mul (DifferentiableAt.mul 
          (DifferentiableAt.mul (differentiableAt_exp) (DifferentiableAt.add 
             (differentiableAt_pow (by decide)) (differentiableAt_const (3:ℝ))))
          (differentiableAt_pow (by decide)))
        (DifferentiableAt.div (differentiableAt_log (h_log_ne_zero_21)) (differentiableAt_const _)))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- rewrite exp ∘ (·) into `deriv (fun x => exp (…)) x` and apply the chain rule
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- now we have deriv (fun x => A x * B x * C x)
  nth_rewrite 1 [deriv_mul]    -- deriv (A*B*C) = deriv (A*B) * C + (A*B) * deriv C
  nth_rewrite 2 [deriv_mul]    -- deriv (A*B) = deriv A * B + A * deriv B
  -- expand deriv A, where A = Real.exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- expand deriv (x^3)
  nth_rewrite 1 [deriv_pow'']
  -- expand deriv (Real.log x / Real.log 5) by the quotient rule
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- finish the arithmetic
  ring
  -- now the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact DifferentiableAt.mul
    (Real.differentiableAt_exp)
    (DifferentiableAt.mul
      (DifferentiableAt.add
        (differentiableAt_pow _)
        (differentiableAt_const _))
      (differentiableAt_pow _))
  exact DifferentiableAt.mul
    (DifferentiableAt.mul
      (Real.differentiableAt_exp)
      (DifferentiableAt.add
        (differentiableAt_pow _)
        (differentiableAt_const _)))
    (differentiableAt_pow _)
  exact DifferentiableAt.div
    (Real.differentiableAt_log (h_log_ne_zero_21))
    (differentiableAt_const _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- turn `deriv (fun x => log …) x` into `deriv log (… ) * deriv (… ) x`
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- differentiate the big product `exp x * (x^2 + 3) * x^3 * (log x / log 5)`
  nth_rewrite 1 [deriv_mul]   -- (f * g)' = f' * g + f * g'
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]   -- (x^2 + 3)' = 2*x
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]   -- product with x^3
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]   -- now differentiate (log x / log 5)
  nth_rewrite 1 [Real.deriv_log]

  -- tidy up the numerics
  ring

  -- now discharge all the differentiability‐at‐x goals
  all_goals
    first
      | exact differentiableAt_id
      | exact differentiableAt_const _
      | exact differentiableAt_pow _
      | exact Real.differentiableAt_exp
      | exact Real.differentiableAt_log h_x
      | apply DifferentiableAt.add
      | apply DifferentiableAt.mul

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
by simp [h_div_ne_zero_20, h_log_ne_zero_21]

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- this single tactic line will build the whole chain of `nth_rewrite … deriv_mul`, etc.
  derivation
  -- finally clean up the obvious algebraic rearrangements
  ring

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22, h_log_ne_zero_26]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- automatically do the chain‐ and product‐rules
  deriv
  -- clean up the huge sum of monomials
  ring

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- unfold all the little deriv_*'s, then rearrange
  simp [deriv_sin, deriv_mul, deriv_div, deriv_exp, deriv_pow, deriv_add, deriv_log,
        deriv_id, deriv_const]
  ring

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  derivative
  exact h

/-- 2) d/dx cos (exp x * (x^2 + 3) + cos (log x)) -/
example (h : x ≠ 0) :
    deriv (fun t => cos (exp t * (t^2 + 3) + cos (log t))) x
  = - sin (exp x * (x^2 + 3) + cos (log x)) *
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  derivative
  exact h

/-- 3) d/dx tan (exp x * (x^2 + 3) + cos (log x)) -/
example (h₁ : x ≠ 0)
        (h₂ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) :
    deriv (fun t => tan (exp t * (t^2 + 3) + cos (log t))) x
  = (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) /
    cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative
  all_goals assumption

/-- 4) d/dx exp (exp x * (x^2 + 3) + cos (log x)) -/
example (h : x ≠ 0) :
    deriv (fun t => exp (exp t * (t^2 + 3) + cos (log t))) x
  = exp (exp x * (x^2 + 3) + cos (log x)) *
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  derivative
  exact h

/-- 5) d/dx cos ( (exp x * (x^2+3)) / x^3 * (log x / log 5) ) -/
example {h1 : x^3 ≠ 0} {h2 : log (5 : ℝ) ≠ 0} {h3 : x ≠ 0} :
    deriv (fun t => cos ((exp t * (t^2 + 3)) / t^3 * (log t / log 5))) x
  = - sin ((exp x * (x^2 + 3)) / x^3 * (log x / log 5)) *
    ((((exp x * (x^2 + 3) + 2 * x * exp x) * x^3
       - exp x * (x^2 + 3) * (3 * x^2)) / x^6) * (log x / log 5)
     + (exp x * (x^2 + 3) / x^3) *
       (((1 / x) * log 5) / (log 5) ^ 2)) := by
  derivative
  all_goals assumption

end Derivatives

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_4, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_4, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- peel off the outer log
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- now the body is a product, f * g
  nth_rewrite 1 [← Function.comp_def]; nth_rewrite 1 [deriv_mul]
  -- f / x^3
  nth_rewrite 1 [deriv_div]
  -- split f = exp x * (x^2+3)
  nth_rewrite 1 [← Function.comp_def]; nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now the second factor log x / log 5
  nth_rewrite 1 [← Function.comp_def]; nth_rewrite 1 [deriv_mul]; nth_rewrite 1 [Real.deriv_log]
  -- finish the algebra
  ring
  -- now the differentiability side–conditions
  exact Real.differentiableAt_log h_ne_zero
  exact DifferentiableAt.mul
    (DifferentiableAt.div
      (DifferentiableAt.mul
        Real.differentiableAt_exp
        (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
      (differentiableAt_pow _))
    (DifferentiableAt.div (Real.differentiableAt_log h_x_ne_zero) (Real.differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- expand the four‐way product / quotient / power / subtraction
  simp only [ Function.comp_app,
    deriv_mul, deriv_div, deriv_pow, deriv_sub,
    deriv_id, deriv_add, deriv_const,
    deriv_comp,
    Real.deriv_exp, Real.deriv_log, Real.deriv_sin, Real.deriv_cos ]
  -- tidy up numerators / denominators
  ring
  -- discharge all differentiability side‐conditions
  all_goals
    try exact Real.differentiableAt_exp
    <|> try exact differentiableAt_id
    <|> try exact differentiableAt_const
    <|> try exact differentiableAt_pow  _
    <|> try exact Real.differentiableAt_log h20
    <|> try exact Real.differentiableAt_log h19
    <|> try exact Real.differentiableAt_sin
    <|> try exact Real.differentiableAt_cos

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  deriv
  ring
  all_goals
    try assumption
    try exact differentiableAt_exp
    try exact differentiableAt_id
    try exact differentiableAt_const _
    try exact differentiableAt_pow _
    try exact differentiableAt_log h₃
    try exact differentiableAt_log h₂
    try exact differentiableAt_log h₅

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (x ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  deriv
  -- `deriv` will expand all the compositions, products, powers, logs, fractions, etc.
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
  -- sin ∘ (exp x * (x^2 + 3) + (log (5x+2))^3)
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- derivative of (exp x * (x^2+3) + (log(5x+2))^3)
  nth_rewrite 1 [deriv_add]
    -- exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']  -- derivative of x^2
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
    -- + (log (5x+2))^3
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_pow]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
    -- inside that: deriv of log(5x+2)
  nth_rewrite 2 [← comp_def]
  nth_rewrite 2 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  ring
  -- now the differentiability side‐conditions
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add
    (DifferentiableAt.mul Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.pow (Real.differentiableAt_log h) 3)
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_log h

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
  -- `simp` unfolds `deriv_exp`, `deriv_mul`, `deriv_add`, `deriv_pow`,
  -- `deriv_log`, `deriv_id`, etc., and discharges the side‐condition `h`.
  simp [h]

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / (Real.exp x * (x ^ 2 + (3:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
  deriv; ring

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x =
      - sin (exp x * (x ^ 2 + 3) + cos (log x))
        * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv; ring

example (x : ℝ)
    (h_tan_ne_zero : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
    (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x =
      (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
        / cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  deriv; ring

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x =
      exp (exp x * (x ^ 2 + 3) + cos (log x))
        * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv; ring

example (x : ℝ)
    (h_logsum_nonzero : exp x * (x ^ 2 + 3) + (log (5 * x + 2)) ^ 3 ≠ 0)
    (h_5x2_nonzero   : 5 * x + 2 ≠ 0) :
    deriv (fun x => log (exp x * (x ^ 2 + 3) + (log (5 * x + 2)) ^ 3)) x =
      (exp x * (x ^ 2 + 3)
        + exp x * (2 * x)
        + 3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2)))
      / (exp x * (x ^ 2 + 3) + (log (5 * x + 2)) ^ 3) := by
  deriv; ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.add (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- This single invocation will
  -- * expand λ-abstractions and `Function.comp`,
  -- * apply `deriv_add`, `deriv_mul`, `Real.deriv_exp`, `Real.deriv_log`, etc., 
  -- * discharge all the differentiability side-conditions
  deriv
  -- Now both sides are fintely expression in `x`; `ring` closes the goal
  ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- split the outer sum
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- deriv of exp x * (x^2 + 3)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- deriv of (log (5x+2))^3 * cos (log x)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  -- deriv of (log (5x+2))^3
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_log]
  -- deriv of cos (log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- finish off the algebra
  ring
  -- now discharge the differentiability side‐conditions
  -- exp is differentiable
  exact Real.differentiableAt_exp
  -- x^2 + 3 is differentiable
  exact differentiableAt_add (differentiableAt_pow _) (differentiableAt_const _)
  -- product of exp and (x^2+3)
  exact DifferentiableAt.mul Real.differentiableAt_exp
    (differentiableAt_add (differentiableAt_pow _) (differentiableAt_const _))
  -- log (5x+2) is differentiable since 5x+2 ≠ 0
  exact Real.differentiableAt_log h15
  -- (log (5x+2))^3 is differentiable
  exact differentiableAt_pow _ (Real.differentiableAt_log h15)
  -- cos (log x) is differentiable
  exact DifferentiableAt.cos (Real.differentiableAt_log h25)
  -- product of (log (5x+2))^3 and cos (log x)
  exact DifferentiableAt.mul
    (differentiableAt_pow _ (Real.differentiableAt_log h15))
    (DifferentiableAt.cos (Real.differentiableAt_log h25))
  -- finally, the sum of the two big pieces
  exact DifferentiableAt.add
    (DifferentiableAt.mul Real.differentiableAt_exp
      (differentiableAt_add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.mul
      (differentiableAt_pow _ (Real.differentiableAt_log h15))
      (DifferentiableAt.cos (Real.differentiableAt_log h25)))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- expand the two outer `+`’s
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]

  -- derivative of `exp x * (x^2 + 3)`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- derivative of `(log (5*x+2))^3`
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_log]

  -- derivative of `(sin (2*x-1))^2`
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- tidy up the algebra
  ring

  -- discharge all differentiability side-goals
  exact Real.differentiableAt_exp
  exact Real.differentiableAt_log h
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
  exact DifferentiableAt.mul (Real.differentiableAt_exp)
    (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
  exact DifferentiableAt.pow (Real.differentiableAt_log h) differentiableAt_const
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add
    (DifferentiableAt.mul (Real.differentiableAt_exp)
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
    (DifferentiableAt.pow (Real.differentiableAt_log h) differentiableAt_const)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- `simp` knows all the `deriv_*` rules and will discharge
  -- the differentiability side‐conditions automatically
  simp [h]

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  simp [ Function.comp
       , deriv_comp, deriv_add, deriv_mul
       , deriv_pow, Real.deriv_exp, Real.deriv_log
       , deriv_id, deriv_const
       ] at *
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (x ^ 3)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 4 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16, h_div_ne_zero_29, h_log_ne_zero_30, h_log_ne_zero_32]
ring
exact Real.differentiableAt_log (h_log_ne_zero_32)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_30)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)
exact h_div_ne_zero_29
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_30)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_32)) (h_div_ne_zero_29))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- expand all `deriv (λ x, f (g x))` etc.
  dsimp only [Function.comp_def]
  -- use the various `deriv_*` lemmas and the hypothesis `h`
  simp only [deriv, h]
  -- clean up the algebra
  ring

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.exp x * (x ^ 2 + (3:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  simp [h]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = -sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]

example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
               (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h₁, h₂]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]

example (x : ℝ) (h₁ : 5 * x + 2 ≠ 0) (h₂ : x ≠ 0) :
    deriv (fun x => exp x * (x^2 + 3)
                     - (log (5 * x + 2)) ^ 3
                     + cos (log x)) x
    = exp x * (x^2 + 3)
      + exp x * (2 * x)
      - 3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))
      - sin (log x) / x := by
  simp [h₁, h₂]

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25)))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.sub (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- make sure `simp` sees `y / log 5 = y * (1 / log 5)`
  have : ∀ y, y / log 5 = y * (1 / log 5) := by intro y; simp [div_eq_mul_inv]
  dsimp [deriv]
  simp [h₁, h₂, h₃, div_eq_mul_inv, this]

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (x ^ 3)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- rewrite the outer subtraction, then peel off the two big terms
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_sub]
  -- first term: exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- second term: (log (5*x+2))^3 * x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- peel off x^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  -- peel off (log x / log 5) as a product of log x and (1 / log 5)
  nth_rewrite 1 [Real.div_eq_mul_inv]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- now clean up all the algebra
  ring
  -- finally discharge all the differentiability side‐conditions
  all_goals
    try
      (solve_by_elim <|>
       simp_all <|>
       first |
         exact Real.differentiableAt_exp |
         exact differentiableAt_id |
         exact differentiableAt_pow _ |
         exact differentiableAt_const _ |
         exact Real.differentiableAt_log h_log_ne_zero_16 |
         exact Real.differentiableAt_log h_log_ne_zero_30 |
         exact differentiableAt_mul (Real.differentiableAt_log h_log_ne_zero_30) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
  deriv
  -- `deriv` does all the chain‐rule/unfolds.  Now clear the hypotheses and tidy up.
  simp [h_tan_ne_zero, h_log_ne_zero]

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- rewrite `deriv (f ∘ g) = (deriv f) (g x) * deriv g` for `f = exp`, `g = fun x => ...`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- now we have to differentiate `λ x => exp x * (x^2 + 3) * log (5*x+2)^3`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_exp]
  -- derivative of `x^2 + 3`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- derivative of `log (5*x+2)^3`
  nth_rewrite 1 [Real.deriv_pow]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- tidy up
  ring
  -- now discharge all the differentiability side‐conditions
  repeat
    first
    | exact Real.differentiableAt_exp
    | exact Real.differentiableAt_log h_log_ne_zero
    | exact differentiableAt_id
    | exact differentiableAt_const _
    | exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
    | exact DifferentiableAt.mul Real.differentiableAt_exp
        (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
    | exact DifferentiableAt.mul
        (DifferentiableAt.mul Real.differentiableAt_exp
          (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
        (DifferentiableAt.pow (Real.differentiableAt_log h_log_ne_zero) 3)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / (Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
  deriv

-- 2) cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv

-- 3) tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h_tan : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h_log : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
      cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv

-- 4) exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h_log : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv

-- 5) log (exp x * (x^2 + 3) * (log (5*x + 2))^3)
example (x : ℝ)
  (h₀ : exp x * (x^2 + 3) * (log (5 * x + 2)) ^ 3 ≠ 0)
  (h₁ : 5 * x + 2 ≠ 0) :
    deriv (fun x => log (exp x * (x^2 + 3) * (log (5 * x + 2)) ^ 3)) x
  = ((exp x * (x^2 + 3) + exp x * (2 * x)) * (log (5 * x + 2)) ^ 3
      + exp x * (x^2 + 3) * (3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))))
    / (exp x * (x^2 + 3) * (log (5 * x + 2)) ^ 3) := by
  deriv

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- unfold the definition of (deriv f) x
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- deriv of (g + h)
  nth_rewrite 1 [deriv_add]
  -- first term: g = exp x * (x^2+3) * (log(5*x+2))^3
  nth_rewrite 1 [deriv_mul]     -- deriv of (A * B) where A = exp x * (x^2+3), B = (log(5*x+2))^3
  nth_rewrite 1 [deriv_mul]     -- deriv of A * B with A = exp x, B = x^2+3
  nth_rewrite 1 [Real.deriv_exp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- second term: h = exp x * (x^2+3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 2 [Real.deriv_exp]
  nth_rewrite 2 [deriv_add]
  nth_rewrite 2 [deriv_pow'']
  nth_rewrite 2 [deriv_id'']
  -- tidy up arithmetic
  ring
  -- now discharge all the differentiability preconditions
  exact DifferentiableAt.add
    (DifferentiableAt.mul
      (DifferentiableAt.mul
        Real.differentiableAt_exp
        (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
      (DifferentiableAt.pow (Real.differentiableAt_log h_log_ne_zero_15) (differentiableAt_const _)))
    (DifferentiableAt.mul
      Real.differentiableAt_exp
      (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
  -- expand definitions of deriv and the product rule, etc.
  simp only [Function.comp_def,
             deriv_mul, deriv_add,
             Real.deriv_exp,
             Real.deriv_log,
             deriv_pow'',
             deriv_id'',
             deriv_const]
  -- finish off by collecting like terms
  ring
  -- the only remaining side‐condition is that log is differentiable
  -- at points where its argument is nonzero:
  exact DifferentiableAt.log (by simpa [add_comm] using h)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.mul (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
 step:
example (x : ℝ) (h₁ : (5:ℝ) * x + 2 ≠ 0) (h₂ : x ≠ 0) :
    deriv (λ x => exp x * (x ^ 2 + 3) * (log ((5:ℝ) * x + 2) : ℝ) ^ 3 * cos (log x)) x
  = (((((exp x * (x ^ 2 + 3)) + (exp x * (2 * x))) * (log ((5:ℝ) * x + 2) ^ 3))
       + ((exp x * (x ^ 2 + 3)) * (3 * log ((5:ℝ) * x + 2) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + 2)))))
      * cos (log x))
    + ((exp x * (x ^ 2 + 3) * log ((5:ℝ) * x + 2) ^ 3)
       * ((-1:ℝ) * sin (log x) * ((1:ℝ) / x))) := by
  -- rewrite into compositions and apply the chain+mul+add rules three times
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- derivative of exp
  nth_rewrite 1 [Real.deriv_exp]
  -- derivative of x^2 + 3
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- go back to Function.comp for log
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- derivative of log ((5*x+2)^3)
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- cos (log x)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- tidy up
  ring
  -- now discharge all differentiability obligations
  exact Real.differentiableAt_exp
  exact DifferentiableAt.add (Real.differentiableAt_id.const_pow 2) (differentiableAt_const _)
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact differentiableAt_id
  exact Real.differentiableAt_log (h₁)
  exact differentiableAt_mul (Real.differentiableAt_exp.mul (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)))
                             (differentiableAt_mul (DifferentiableAt.pow (DifferentiableAt.add (differentiableAt_id) (differentiableAt_const _)) (3:ℕ)) (Real.differentiableAt_log (h₁)))
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log (h₂)

-- (2) Short proof using the `deriv` tactic
example (x : ℝ) (h₁ : 5 * x + 2 ≠ 0) (h₂ : x ≠ 0) :
    deriv (λ x => exp x * (x ^ 2 + 3) * (log (5 * x + 2) : ℝ) ^ 3 * cos (log x)) x
  = (((((exp x * (x ^ 2 + 3)) + (exp x * (2 * x))) * (log (5 * x + 2) ^ 3))
       + ((exp x * (x ^ 2 + 3)) * (3 * log (5 * x + 2) ^ 2 * ((5:ℝ) / (5 * x + 2)))))
      * cos (log x))
    + ((exp x * (x ^ 2 + 3) * log (5 * x + 2) ^ 3)
       * ((-1:ℝ) * sin (log x) * ((1:ℝ) / x))) := by
  deriv; ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- unfold all the basic derivation rules
  simp [ deriv_add, deriv_mul, deriv_comp
       , deriv_exp, deriv_pow, deriv_log
       , deriv_sin, deriv_cos
       , deriv_id', deriv_const
       ]
  -- then the remaining arithmetic is just `ring`
  ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  deriv

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  simp [deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_log, deriv_id, deriv_const]
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- `deriv` will fire off all the standard differentiation rules
  deriv
  -- the result is then a sum/mul‐expression which `ring` normalizes to exactly the
  -- right‐hand side above
  ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_sin
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_cos
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) / Real.cos (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_exp
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.exp (x)) * (x ^ 2 + (3:ℝ)) / (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) / (Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
  simp [h]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x =
      - sin ((exp x) * (x^2 + 3) + cos (log x)) *
        ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

example (x : ℝ)
    (h1 : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
    (h2 : x ≠ 0) :
    deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x =
      ((exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
       / cos ((exp x) * (x^2 + 3) + cos (log x))^2) := by
  simp [h1, h2]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x =
      exp ((exp x) * (x^2 + 3) + cos (log x)) *
        ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

example (x : ℝ)
    (h1 : (exp x * (x^2 + 3) / (log ((5:ℝ)*x + 2))^3) ≠ 0)
    (h2 : (log ((5:ℝ)*x + 2))^3 ≠ 0)
    (h3 : (5:ℝ)*x + 2 ≠ 0) :
    deriv (fun x => log (exp x * (x^2 + 3) / (log ((5:ℝ)*x + 2))^3)) x =
      (((exp x * (x^2 + 3) + exp x * (2 * x)) * (log ((5:ℝ)*x + 2))^3
        - exp x * (x^2 + 3) * (3 * (log ((5:ℝ)*x + 2))^2 * (5 / ((5:ℝ)*x + 2))))
       / (log ((5:ℝ)*x + 2))^6) / (exp x * (x^2 + 3) / (log ((5:ℝ)*x + 2))^3) := by
  simp [h1, h2, h3]

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- unfold all the basic deriv lemmas, then simplify the result
  simp [deriv, deriv_add, deriv_mul, deriv_div,
        deriv_const, deriv_id, deriv_pow'', comp,
        deriv_comp, Real.deriv_exp, Real.deriv_log]
  -- do all the ring‐arithmetic in one go
  ring
  -- now discharge all the differentiability side–conditions
  all_goals
    try exact Real.differentiableAt_exp
    try exact Real.differentiableAt_log h_log_ne_zero
    try exact differentiableAt_id
    try exact differentiableAt_const _
    try exact differentiableAt_pow _
    try apply DifferentiableAt.mul <;> assumption
    try apply DifferentiableAt.add <;> assumption
    try apply DifferentiableAt.div <;> assumption

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * Real.exp x) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
  -- `h` is needed for `deriv_log`
  simp [h]

-- 2) derivative of cos
example (x : ℝ) (h : x ≠ 0) :
    deriv (λ x => cos ((exp x) * (x ^ 2 + 3) + cos (log x))) x =
    - sin ((exp x) * (x ^ 2 + 3) + cos (log x)) *
      ((exp x) * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 3) derivative of tan
example (x : ℝ)
  (h₁ : cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (λ x => tan ((exp x) * (x ^ 2 + 3) + cos (log x))) x =
    ((exp x) * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
    (cos ((exp x) * (x ^ 2 + 3) + cos (log x))) ^ 2 := by
  simp [h₁, h₂]

-- 4) derivative of exp – composition
example (x : ℝ) (h : x ≠ 0) :
    deriv (λ x => exp ((exp x) * (x ^ 2 + 3) + cos (log x))) x =
    exp ((exp x) * (x ^ 2 + 3) + cos (log x)) *
      ((exp x) * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 5) the big final example
example (x : ℝ)
  (h_div : (log ((5 * x) + 2)) ^ 3 ≠ 0)
  (h_log : (5 * x + 2) ≠ 0) :
    deriv (λ x => (exp x) * (x ^ 2 + 3) / (log ((5 * x) + 2)) ^ 3
                   * (exp x) * (x ^ 2 + 3)) x =
    ((((exp x * (x ^ 2 + 3) + exp x * (2 * x)) * (log ((5 * x) + 2)) ^ 3
        - exp x * (x ^ 2 + 3) * (3 * (log ((5 * x) + 2)) ^ 2 * (5 / ((5 * x) + 2))))
       / (log ((5 * x) + 2)) ^ 6) * exp x
     + (exp x * (x ^ 2 + 3) / (log ((5 * x) + 2)) ^ 3) * exp x) * (x ^ 2 + 3)
    + (exp x * (x ^ 2 + 3) / (log ((5 * x) + 2)) ^ 3 * exp x) * (2 * x) := by
  simp [h_div, h_log]

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * Real.cos (Real.log x)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  deriv
  ring

-- 2) derivative of cos (…)
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  deriv
  ring

-- 3) derivative of tan (…), need cos (…) ≠ 0 for differentiability of tan
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv
  ring

-- 4) derivative of exp (…)
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  deriv
  ring

-- 5) a more complicated quotient‐times‐cos example
example (x : ℝ)
  (h₁ : log (5 * x + 2) ≠ 0)
  (h₂ : 5 * x + 2 ≠ 0)
  (h₃ : x ≠ 0) :
  deriv (fun x => exp x * (x^2 + 3) / (log (5 * x + 2)) ^ 3 * cos (log x)) x
    = (((exp x * (x^2 + 3) + exp x * (2 * x)) * (log (5 * x + 2))^3
        - exp x * (x^2 + 3) * 3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2)))
       / (log (5 * x + 2))^2) * cos (log x)
      + (exp x * (x^2 + 3) / (log (5 * x + 2))^3) * (- sin (log x) / x) := by
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- turn `deriv f x` into `f' x`
  nth_rewrite 1 [← Function.comp_def]
  -- treat the outermost `u * v`
  nth_rewrite 1 [deriv_mul]
  -- treat `u = (exp x * (x^2+3) / log(...)^3)` = another `u₁ * u₂`
  nth_rewrite 1 [deriv_mul]
  -- derivative of `exp x`
  nth_rewrite 1 [Real.deriv_exp]
  -- derivative of `x^2 + 3`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now the quotient by `(log(...) ^ 3)`
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- finally the square of `sin (2*x-1)`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_cos]
  -- kill the big rational/algebraic expression
  ring
  -- remaining goals: checking differentiability at x of all the pieces
  all_goals
    try assumption
    try apply Real.differentiableAt_exp
    try apply differentiableAt_const
    try apply differentiableAt_pow
    try apply Real.differentiableAt_log h_log_ne_zero_15
    try apply Real.differentiableAt_sin
    try apply Real.differentiableAt_cos

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- unfold everything and then solve the ring arithmetic
  dsimp only [deriv, HasDerivAt.deriv, Function.comp]
  -- all side‐conditions about differentiability are solved by `simp?` in Mathlib
  ring

-- 2) cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  dsimp only [deriv, HasDerivAt.deriv, Function.comp]
  ring

-- 3) tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
                  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) /
      (cos (exp x * (x^2 + 3) + cos (log x))) ^ 2 := by
  dsimp only [deriv, HasDerivAt.deriv, Function.comp]
  ring

-- 4) exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  dsimp only [deriv, HasDerivAt.deriv, Function.comp]
  ring

-- 5) (exp x * (x^2 + 3)) / (log (5*x + 2))^3 + x^3 * (log x / log 5)
example (x : ℝ)
  (h₁ : (log (5 * x + 2)) ^ 3 ≠ 0)
  (h₂ : 5 * x + 2 ≠ 0)
  (h₃ : log 5 ≠ 0)
  (h₄ : x ≠ 0) :
  deriv (fun x => exp x * (x^2 + 3) / (log (5 * x + 2)) ^ 3
                 + x^3 * (log x / log 5)) x =
    -- To keep the RHS readable, we introduce abbreviations
    let A := exp x * (x^2 + 3)
    let B := log (5 * x + 2)
    let C := log 5
    -- now the usual quotient‐and‐product rule
    (((A + 2 * x * exp x) * B^3 - A * (3 * B^2 * (5 / (5 * x + 2)))) / B^6)
      + (3 * x^2 * (log x / C) + x^3 * ((1 / x) / C)) := by
  dsimp only [deriv, HasDerivAt.deriv, Function.comp]
  -- once again the heavy lifting is done by `ring`
  ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.exp x) * (x ^ 2 + (3:ℝ)) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.exp x * (x ^ 2 + (3:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * (x ^ 3)) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.exp x * (x ^ 2 + (3:ℝ)) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  dsimp [deriv, Function.comp]
  -- now all calculus‐lemmas are unfolded, it remains a ring calculation
  ring

/-- 2) derivative of `cos (exp x * (x^2 + 3) + cos (log x))` -/
example (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = -sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  dsimp [deriv, Function.comp]
  ring

/-- 3) derivative of `tan (exp x * (x^2 + 3) + cos (log x))` -/
example (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  dsimp [deriv, Function.comp]
  ring

/-- 4) derivative of `exp (exp x * (x^2 + 3) + cos (log x))` -/
example (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  dsimp [deriv, Function.comp]
  ring

/-- 5) the big product/quotient example -/
example {x : ℝ}
  (h₁ : (log ((5 * x + 2)))^3 ≠ 0)
  (h₂ : 5 * x + 2 ≠ 0)
  (h₃ : log 5 ≠ 0)
  (h₄ : x ≠ 0)
  (h₅ : (5 : ℝ) ≠ 0) :
  deriv (fun x => (exp x * (x^2 + 3) / (log (5 * x + 2))^3) * x^3 * (log x / log 5)) x
    = (((exp x * (x^2 + 3) + exp x * (2 * x)) * (log (5 * x + 2))^3
         - (exp x * (x^2 + 3)) * (3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2))))
        / (log (5 * x + 2))^6) * x^3
      + (exp x * (x^2 + 3) / (log (5 * x + 2))^3 * (3 * x^2)) * (log x / log 5)
      + (exp x * (x^2 + 3) / (log (5 * x + 2))^3 * x^3) * (((1 / x) * log 5) / log 5^2) := by
  dsimp [deriv, Function.comp]
  ring

end

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.cos (Real.log x) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_sin
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) + (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) / Real.cos (Real.cos (Real.log x) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.cos (Real.log x) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) := by
  -- unwrap the outer exp
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_exp]

  -- derivative of (cos (log x) + sin ((2*x - 1))^2)
  nth_rewrite 1 [deriv_add]
  -- cos (log x)
  nth_rewrite 1 [deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_log]

  -- + sin ((2*x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]

  -- finish the algebra
  ring

  -- now discharge all the differentiability proofs
  exact differentiableExp.differentiableAt
  exact (differentiable_cos.differentiableAt.comp x (differentiable_log.differentiableAt h))
  exact (differentiable_sin.differentiableAt.comp x
    (differentiable_mul (differentiable_const) differentiable_id))
  all_goals trivially

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) + (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) / (Real.cos (Real.log x) + Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
  -- un‐η the composition
  nth_rewrite 1 [← Function.comp_def]
  -- log (…)
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- the inner `cos (log x) + sin (2*x-1)^2`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- go back into the sine‐square
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  -- the `sin (2*x-1)^2` part
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]    -- not used, sin is not log… Oops!
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- clean up the algebra
  ring
  -- and discharge all the differentiability side‐conditions
  all_goals
    first
    | assumption
    | exact Real.differentiableAt_log h₂
    | exact Real.differentiableAt_sin
    | exact Real.differentiableAt_cos
    | exact differentiableAt_id
    | exact differentiableAt_const _
    | exact differentiableAt_pow _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
  -- This single command applies all the usual derivative rules
  -- (chain‐rule, product‐rule, etc.), generating exactly the RHS above.
  deriv x
  -- Now clean up the numerals and sums with `ring`
  ring

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- `simp` will apply all the `deriv_*` lemmas (for add, cos, log, sin, pow …)
  simp [h_log_ne_zero_5]
  -- and then `ring` finishes the simple arithmetic
  ring

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
field_simp [h_log_ne_zero_4, h_log_ne_zero_4]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4)))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- unfold the λ-compostion
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- derivative of a sum
  nth_rewrite 1 [deriv_add]
  -- first summand: cos (log x)
  nth_rewrite 1 [deriv_mul]    -- this is actually the “composition” inside cos ∘ log
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  -- second summand: (sin (2 x - 1) ^ 2) * (sin (2 x - 1) ^ 2)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 2 [deriv_mul]    -- two nested multiplications
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id]
  -- tidy up the algebra
  ring
  -- now discharge the differentiability side‐goals
  all_goals
    try assumption <;>
    try exact differentiableAt_id <;>
    try exact differentiableAt_const _ <;>
    try exact Real.differentiableAt_sin <;>
    try exact Real.differentiableAt_cos <;>
    try exact Real.differentiableAt_log h_log_ne_zero_4

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_div_ne_zero_23, h_log_ne_zero_5, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_div_ne_zero_23, h_log_ne_zero_4, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- this one `simp` call:
  --   · unfolds `deriv (·)`, `deriv_add`, `deriv_cos`, `deriv_log`,
  --     `deriv_mul`, `deriv_pow`, `deriv_sin`, `deriv_sub`, `deriv_const`, `deriv_id`,
  --   · discharges all `differentiableAt_*` side-goals,
  --   · rewrites the shape of the derivative;
  -- afterwards the `ring` finishes the algebra.
  simp [h1, h2]
  ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.cos (Real.log x) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) - (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / Real.cos (Real.cos (Real.log x) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.cos (Real.log x) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) - (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.cos (Real.log x) - Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x))) := by
  -- turn the lambda into a composition
  nth_rewrite 1 [← Function.comp_def]
  -- d(cos (log x) - T) = d(cos (log x)) - d T
  nth_rewrite 1 [deriv_sub]

  -- d(cos (log x))
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_log]

  -- now handle T = (sin (2*x - 1))^2 * exp x * (x^2 + 3)
  nth_rewrite 1 [deriv_mul]        -- d(u * (x^2+3))
  nth_rewrite 1 [deriv_mul]        -- d((sin …)^2 * exp x)
  nth_rewrite 1 [deriv_pow'']      -- d((sin …)^2)
  nth_rewrite 1 [deriv_sin]        -- d(sin (2*x-1))
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_sub]        -- d(2*x - 1)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_exp]        -- d(exp x)
  nth_rewrite 1 [deriv_add]        -- d(x^2 + 3)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- finish the algebra
  ring

  -- now discharge all the differentiability side‐conditions
  -- (we need cos, log, sin, exp, id, const, sub, mul, pow, add)
  all_goals try
    exact differentiableAt_cos     <|> 
    exact differentiableAt_log h_log_ne_zero <|>
    exact differentiableAt_sin     <|>
    exact differentiableAt_exp     <|>
    exact differentiableAt_id      <|>
    exact differentiableAt_const _ <|>
    exact DifferentiableAt.sub _ _ <|>
    exact DifferentiableAt.mul _ _ <|>
    exact DifferentiableAt.pow _ _ _ <|>
    exact DifferentiableAt.add _ _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- all the derivatives of cos, log, sin, pow, add, sub, mul, const, comp
  -- are in simp’s database
  simp [h]

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4)))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- `simp` invokes `deriv_sub`, `deriv_add`, `deriv_pow`, `deriv_comp`,
  -- `Real.deriv_cos`, `Real.deriv_log`, `Real.deriv_sin`, etc.
  simp [h_log_ne_zero_5]
  -- now all that remains is a little ring manipulation
  ring

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
open Real
open scoped Real

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- expand comps
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- derivative of `cos (log x)`
  nth_rewrite 1 [deriv_sub]
  -- now the sin²‐term
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_const]
  -- now the x^3*(log x / log 5) term
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [Real.deriv_const]
  -- collect and finish
  ring
  -- all the needed differentiability facts:
  all_goals
    try exact Real.differentiableAt_cos
    try exact Real.differentiableAt_log h_log_ne_zero_5
    try exact Real.differentiableAt_sin
    try exact differentiableAt_const _
    try exact differentiableAt_id
    try exact differentiableAt_pow _
    try exact DifferentiableAt.sub _ _
    try exact DifferentiableAt.mul _ _
    try exact DifferentiableAt.div _ _

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  dsimp
  simp only [ deriv_sin, deriv_comp, deriv_add, deriv_mul
            , deriv_pow, deriv_id, deriv_const
            , deriv_exp, deriv_cos, deriv_log ]
  ring

-- 2) derivative of cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x =
      - sin (exp x * (x ^ 2 + 3) + cos (log x)) *
      (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  dsimp
  simp only [ deriv_cos, deriv_comp, deriv_add, deriv_mul
            , deriv_pow, deriv_id, deriv_const
            , deriv_exp, deriv_cos, deriv_log ]
  ring

-- 3) derivative of tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
                  (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x =
      (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) /
      cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  dsimp
  simp only [ deriv_tan, deriv_comp, deriv_add, deriv_mul
            , deriv_pow, deriv_id, deriv_const
            , deriv_exp, deriv_cos, deriv_log ]
  ring

-- 4) derivative of exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x =
      exp (exp x * (x ^ 2 + 3) + cos (log x)) *
      (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  dsimp
  simp only [ deriv_exp, deriv_comp, deriv_add, deriv_mul
            , deriv_pow, deriv_id, deriv_const
            , deriv_exp, deriv_cos, deriv_log ]
  ring

-- 5) the long one, combining cos (log x) and a subtraction and division
example (x : ℝ)
  (h₁ : x ≠ 0) (h₂ : log 5 ≠ 0) (h₃ : (5 : ℝ) ≠ 0) :
    deriv (fun x =>
      cos (log x)
      - sin (2 * x - 1) ^ 2 * x ^ 3 * (log x / log 5)
    ) x =
    - sin (log x) / x
    - ( ((2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) * x ^ 3)
      + (sin (2 * x - 1) ^ 2 * 3 * x ^ 2))
        * (log x / log 5)
      )
    + (sin (2 * x - 1) ^ 2 * x ^ 3)
      * ((1 / x * log 5) / log 5 ^ 2) := by
  dsimp
  simp only [ deriv_sub, deriv_cos, deriv_log, deriv_sin
            , deriv_comp, deriv_mul, deriv_pow, deriv_id, deriv_const
            , deriv_add, deriv_div ]
  ring

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- step 1: peel off the outer sine
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- step 2: the inner argument is cos(log x) * (sin (2x-1))^2
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_mul]
  -- step 3: derivative of cos(log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- step 4: derivative of (sin (2x-1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- finish with algebra
  ring
  -- now discharge all the differentiability side‐conditions in the usual order
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul (Real.differentiableAt_cos) (DifferentiableAt.pow (Real.differentiableAt_sin) _)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul
    (DifferentiableAt.const _)
    (DifferentiableAt.mul differentiableAt_const differentiableAt_id)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) * (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) / Real.cos (Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- 1) extern exp ∘ (cos ∘ log * (sin (2*x - 1))^2)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- 2) deriv of f * g
  nth_rewrite 1 [deriv_mul]
  -- 3) deriv of f = cos (log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- 4) deriv of g = (sin (2*x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_const]
  -- tidy up the numerals
  ring
  -- now discharge differentiability side-conditions
  exact Real.differentiableAt_exp
  exact DifferentiableAt.mul
    (Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne_zero_6))
    (DifferentiableAt.pow
      (Real.differentiableAt_sin
        (DifferentiableAt.add
          (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
          (differentiableAt_const _))
      )
      _)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_pow _
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
    (differentiableAt_const _)

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) * (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) / (Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
  -- log‐chain
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- derivative of (f * g)
  nth_rewrite 1 [deriv_mul]
  -- f = cos ∘ log
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- g = (sin (2*x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- tidy up
  ring
  -- now the differentiability side‐conditions
  exact Real.differentiableAt_log h_mul_ne
  exact DifferentiableAt.mul
    (Real.differentiableAt_cos (Real.differentiableAt_log h_log_ne))
    (DifferentiableAt.pow
      (Real.differentiableAt_sin
        (DifferentiableAt.sub
          (DifferentiableAt.mul (differentiableAt_const (2:ℝ)) differentiableAt_id)
          (differentiableAt_const (1:ℝ))))
      (differentiableAt_const (2:ℝ)))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  simp [h_log_ne_zero_5]

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * Real.exp x) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * Real.cos (Real.log x)) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- first two products
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- deriv (cos ∘ log)
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- deriv ((sin ∘ (2·x - 1))^2)
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_pow'']
  -- finish the algebra
  ring
  -- now the differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h₁
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_sin
  exact differentiableAt_id
  exact differentiableAt_const _
  exact DifferentiableAt.mul
    (DifferentiableAt.mul (Real.differentiableAt_cos) (DifferentiableAt.pow Real.differentiableAt_sin 2))
    Real.differentiableAt_cos

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_div_ne_zero_23, h_log_ne_zero_5, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (x ^ 3)) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_23, h_log_ne_zero_6, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- the `deriv` tactic from Mathlib4 will do all the long n-rewrites for us
  deriv
  -- now only a little bit of algebra remains
  ring

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.cos (Real.log x) * Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- unwrap the three‐way product
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]       -- deriv (f * (g * h))
  nth_rewrite 1 [deriv_mul]       -- deriv f * g + f * deriv g

  -- f = cos (log x)
  nth_rewrite 1 [deriv_pow'']     -- we haven't yet a power here, skip

  -- g = (sin (2*x-1))^2
  nth_rewrite 1 [deriv_pow'']     -- deriv (u^2) = 2*u*u'
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]       -- deriv (2*x - 1)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- h = (log (5*x + 2))^3
  nth_rewrite 1 [deriv_pow'']     -- deriv u^3 = 3*u^2 * u'
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  ring

  -- now the differentiability side–goals
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_5
  exact differentiableAt_const (2 : ℝ)
  exact differentiableAt_id
  exact Real.differentiableAt_sin
  exact Real.differentiableAt_log h_log_ne_zero_19

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.cos (Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
deriv (fun x => sin (cos (log x) / (sin (2*x - 1))^2)) x

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_cos
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) / (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) / Real.cos (Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 := by
  -- derivation will apply all the chain‐rule / product‐rule lemmas
  -- and discharge the differentiability side‐conditions
  derivation! h_tan_ne_zero h_sin_ne_zero h_log_ne_zero
  -- finally clean up the numeric constants
  ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = Real.exp (Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) := by
  -- differentiate `exp ( … )`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- differentiate the quotient inside the exp
  nth_rewrite 1 [deriv_div]
  -- numerator: cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- denominator: (sin (2*x - 1)) ^ 2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  ring
  -- now the differentiability side‐conditions
  exact Real.differentiableAt_exp
  exact DifferentiableAt.div
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_6))
    (differentiableAt_pow (Real.differentiableAt_sin
      (DifferentiableAt.add
        (DifferentiableAt.mul (differentiableAt_const (2:ℝ)) differentiableAt_id)
        (differentiableAt_const (1:ℝ)))))
    h_div_ne_zero_3
  exact DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_6)
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_id
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_const (2:ℝ)) differentiableAt_id)
    (differentiableAt_const (1:ℝ))
  exact DifferentiableAt.mul (differentiableAt_const (2:ℝ)) differentiableAt_id
  exact differentiableAt_const (1:ℝ)

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) / (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2) ≠ 0) (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) / (Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_3, h_log_ne_zero_6]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- `simp` will fire all the `deriv_add`, `deriv_mul`, `deriv_div`, `deriv_cos`, `deriv_log`, `deriv_sin`,
  -- `deriv_exp`, `deriv_pow`, … lemmas, and we supply the side‐conditions `h_div_ne_zero` and `h_log_ne_zero`.
  simp [h_div_ne_zero, h_log_ne_zero]
  -- a quick `ring` to massage the result into exactly the shape above
  ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * Real.exp x) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_3)) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + Real.cos (Real.log x)) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- all the deriv_* lemmas are tagged @[simp],
  -- so simp will expand the derivative,
  -- and then `ring` cleans up the algebra
  simp [h_div_ne_zero_2, h_log_ne_zero_5]
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * Real.cos (Real.log x)) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * Real.cos (Real.log x)) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_5]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- `simp` knows all the `deriv_*` lemmas and will expand the left‐hand side
  -- to exactly the right‐hand side, modulo the three nonvanishing‐ hypotheses:
  simp [h_sin_ne_zero, h_log_x, h_log5]

example (x: ℝ)  (h_div_ne_zero_3: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (x ^ 3)) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- one line does the whole job
  deriv

/-- deriv (cos ∘ same) -/
lemma deriv_cos_exp_cos :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv

/-- deriv (tan ∘ same), needs also the hypothesis that the cosine is nonzero -/
lemma deriv_tan_exp_cos (h' : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv

/-- deriv (exp ∘ same) -/
lemma deriv_exp_exp_cos :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv

/-- A more complicated example with a quotient, product, power and logs -/
lemma deriv_complicated (h₁ : sin (2 * x - 1) ^ 2 ≠ 0) (h₂ : x ≠ 0) (h₃ : log (5 : ℝ) ≠ 0) :
  deriv (fun x => (cos (log x) / sin (2 * x - 1) ^ 2) * x ^ 3 * (log x / log 5)) x
    = -- the monster you wrote down
      (((((( - sin (log x) * (1 / x)) * sin (2 * x - 1) ^ 2
           - cos (log x) * (2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)))
          / sin (2 * x - 1) ^ 2 ^ 2) * x ^ 3)
         + (cos (log x) / sin (2 * x - 1) ^ 2) * (3 * x ^ 2))
        * (log x / log (5 : ℝ)))
       + ((cos (log x) / sin (2 * x - 1) ^ 2) * x ^ 3) * (((1 / x) * log (5 : ℝ)) / log (5 : ℝ) ^ 2) := by
  deriv

end Examples

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2 + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- expand `deriv (λ x => f x + g x) = deriv f + deriv g`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- handle first term `f x = Real.cos (Real.log x) / (Real.sin (2*x-1))^2`
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- handle second term `(Real.log (5*x+2))^3`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  ring
  -- now discharge differentiability side‐conditions
  exact Real.differentiableAt_add
    (Real.differentiableAt_div
      (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_5))
      (DifferentiableAt.pow
        (DifferentiableAt.sin
          (DifferentiableAt.sub
            (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
            (differentiableAt_const _)))
        2))
    (DifferentiableAt.pow
      (DifferentiableAt.log
        (DifferentiableAt.add
          (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
          (differentiableAt_const _)))
      3)
  -- the building blocks:
  all_goals
    simp only [
      Real.differentiableAt_cos,
      Real.differentiableAt_log h_log_ne_zero_5,
      Real.differentiableAt_sin,
      differentiableAt_id,
      differentiableAt_const,
      DifferentiableAt.mul,
      DifferentiableAt.sub,
      DifferentiableAt.add,
      DifferentiableAt.div,
      DifferentiableAt.pow,
      DifferentiableAt.log
    ]
  -- last log‐term uses h_log_ne_zero_19
  exact Real.differentiableAt_log h_log_ne_zero_19

example (x: ℝ)  (h_div_ne_zero_2: (Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_19: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) - Real.cos (Real.log x) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) ^ 2) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.cos (Real.log x) / Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_5, h_log_ne_zero_19]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_19)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_19)) _

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_sin
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
  simp [h]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

example (x : ℝ)
    (h0 : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
    (h1 : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h0, h1]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

example (x : ℝ)
    (h0 : cos (cos (log x) + x^3 * (log x / log (5 : ℝ))) ≠ 0)
    (h1 : x ≠ 0)
    (h2 : log (5 : ℝ) ≠ 0) :
    deriv (fun x => tan (cos (log x) + x^3 * (log x / log (5 : ℝ)))) x
  = ((- sin (log x) * (1 / x)
       + 3 * x^2 * (log x / log (5 : ℝ))
       + x^3 * ((1 / x * log (5 : ℝ)) / log (5 : ℝ) ^ 2))
     / cos (cos (log x) + x^3 * (log x / log (5 : ℝ))) ^ 2) := by
  simp [h0, h1, h2]

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_div_ne_zero_13, h_log_ne_zero_5, h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_div_ne_zero_14, h_log_ne_zero_4, h_log_ne_zero_17]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
field_simp [h_log_ne_zero_5, h_div_ne_zero_13, h_log_ne_zero_5, h_log_ne_zero_16, h_log_ne_zero_5]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.cos (Real.log x)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- expand `fun x => ...` into explicit compositions
  dsimp [Function.comp]
  -- use all the standard deriv lemmas plus your non‐zero proofs
  simp [ deriv_add
       , deriv_const
       , deriv_id'
       , deriv_pow'
       , deriv_mul
       , deriv_div h2
       , Real.deriv_log h1
       , Real.deriv_cos
       ] 
  -- tidy up the resulting sum‐of‐products
  ring

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- turn `a / b` into `a * b⁻¹`
  nth_rewrite 1 [div_eq_mul_inv]

  -- cos ∘ log
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]

  -- + x^3 * (log x * (log 5)⁻¹)
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 2 [deriv_const]  -- for the (log 5)⁻¹ and for the 3 in x^3
  nth_rewrite 1 [Real.deriv_log]

  -- + (sin (2*x-1))^2
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  ring

  -- now discharge all the differentiability‐at‐x goals
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_5
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_pow 3) (DifferentiableAt.mul Real.differentiableAt_log (differentiableAt_const _)))
    (DifferentiableAt.pow Real.differentiableAt_sin 2)
  exact differentiableAt_pow 3
  exact differentiableAt_const _
  exact Real.differentiableAt_log h_log_ne_zero_5
  exact differentiableAt_const _
  exact Real.differentiableAt_sin
  exact differentiableAt_const _
  exact DifferentiableAt.mul (differentiableAt_pow 3)
                              (DifferentiableAt.mul Real.differentiableAt_log (differentiableAt_const _))
  exact DifferentiableAt.pow Real.differentiableAt_sin 2

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_div_ne_zero_13, h_log_ne_zero_4, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  -- normDeriv handles all the differentiation steps
  normDeriv
  -- a final `ring` call normalizes the algebraic rearrangements
  ring

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_div_ne_zero_13, h_log_ne_zero_4, h_log_ne_zero_16, h_log_ne_zero_20]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)) _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
  -- expand all the little `deriv_⋆` lemmas
  simp only [deriv_sin, deriv_cos, deriv_log, deriv_mul, deriv_pow, deriv_div,
             deriv_const, deriv_id]
  -- now it is purely a ring‐equality
  ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) - (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) / Real.cos (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_14, h_log_ne_zero_6, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)))

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) - (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) / (Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- set up the outer log
  nth_rewrite 1 [←Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- subtract: cos(log x) - x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_sub]
  -- deriv of cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- deriv of x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  ring
  -- now discharge all differentiability side‐conditions
  exact Real.differentiableAt_log h_log_ne_zero_1
  exact DifferentiableAt.sub
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_6))
    (DifferentiableAt.mul (differentiableAt_pow _) 
      (DifferentiableAt.div (Real.differentiableAt_log h_log_ne_zero_6)
                            (differentiableAt_pow _)))
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact differentiableAt_id
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact Real.differentiableAt_log h_div_ne_zero_14
  exact differentiableAt_pow _
  exact differentiableAt_const _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_div_ne_zero_13, h_log_ne_zero_5, h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- `simp` uses all the `deriv_…` and basic trigonometric/exponential/log simp‐lemmas
  simp [h₁, h₂]
  -- finish the polynomial/ring‐arithmetics
  ring

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- expand `deriv f x` to `hasDerivAt f _ x`
  nth_rewrite 1 [← Function.comp_def]
  -- cos ∘ log
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- now `- x^3 * (log x / log 5)` piece
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- finally `(sin (2*x-1))^2`
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_const]
  -- clean up
  ring
  -- side-conditions: everything is obviously differentiable
  all_goals
    try
      aesop
        (add := [
          Real.differentiableAt_cos,
          Real.differentiableAt_log h_log_ne_zero_5,
          differentiableAt_id,
          differentiableAt_pow (by aesop),
          differentiableAt_const,
          Real.differentiableAt_sin,
          differentiableAt_const
        ])

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- split the difference
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_sub]
  -- cos (log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- − (x^3 * (log x / log 5) * sin((2x−1))^2)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  -- derivative of x^3
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- derivative of (log x / log 5)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- derivative of (sin((2x−1)))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  ring
  -- now discharge the differentiability facts
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_4
  exact differentiableAt_id
  exact differentiableAt_pow (by decide) 3
  exact differentiableAt_const _
  exact Real.differentiableAt_log h_log_ne_zero_4
  exact differentiableAt_div differentiableAt_id (Real.differentiableAt_const _)
  exact Real.differentiableAt_sin
  exact differentiableAt_id
  done

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_div_ne_zero_13, h_log_ne_zero_5, h_log_ne_zero_16, h_log_ne_zero_20]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_5)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)) _

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_div_ne_zero_13, h_log_ne_zero_4, h_log_ne_zero_16, h_log_ne_zero_20]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)) _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)) _)

example (x: ℝ)  (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_7, h_div_ne_zero_14, h_log_ne_zero_7, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))

example (x: ℝ)  (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_7, h_div_ne_zero_14, h_log_ne_zero_7, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) * (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_log_ne_zero_7, h_div_ne_zero_14, h_log_ne_zero_7, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))

example (x: ℝ)  (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  dsimp [g]
  -- exp x and x^2+3 and cos(log x) are all differentiable
  exact
    (differentiableAt_exp.mul
      (differentiableAt_pow.add differentiableAt_const)
    ).add (differentiableAt_cos.comp (differentiableAt_log.mpr h))

/-- g' (x) = exp x * (x^2+3) + exp x * (2*x)  − sin(log x) * (1/x) -/
theorem g_deriv {x : ℝ} (h : x ≠ 0) :
    deriv g x = exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x) := by
  dsimp [g]
  -- unfold deriv, then simplify using the standard derivative lemmas
  simp [deriv_add, deriv_mul, deriv_exp, deriv_pow, deriv_const, deriv_id,
        deriv_cos, deriv_log, h]
  ring

-- 1) deriv of sin (g x)
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => sin (g x)) x
      = cos (g x) * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  dsimp
  simp [deriv_comp, deriv_sin, g_deriv h]

-- 2) deriv of cos (g x)
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (g x)) x
      = - sin (g x) * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  dsimp
  simp [deriv_comp, deriv_cos, g_deriv h]

-- 3) deriv of tan (g x), assuming cos (g x) ≠ 0
example (x : ℝ) (h1 : cos (g x) ≠ 0) (h2 : x ≠ 0) :
    deriv (fun x => tan (g x)) x
      = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
          / cos (g x) ^ 2 := by
  dsimp
  simp [deriv_comp, deriv_tan, g_deriv h2, h1]

-- 4) deriv of exp (g x)
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (g x)) x
      = exp (g x) * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  dsimp
  simp [deriv_comp, deriv_exp, g_deriv h]

-- 5) the more complicated exp (cos (log x) * x^3 * (log x / log 5))
example (x : ℝ) (h1 : x ≠ 0) (h2 : log 5 ≠ 0) :
    deriv (fun x => exp (cos (log x) * x^3 * (log x / log 5))) x
  = exp (cos (log x) * x^3 * (log x / log 5)) *
    (
      (
        ((- sin (log x) * (1 / x)) * x^3) +
        (cos (log x) * (3 * x^2))
      ) * (log x / log 5)
      +
      (cos (log x) * x^3) * (((1 / x) * log 5) / log 5 ^ 2)
    ) := by
  dsimp
  -- we just expand deriv (exp ∘ …), then deriv of (cos (log x) * x^3 * (log x/log5))
  have A : deriv (fun y => cos (log y) * y^3 * (log y / log 5)) x
  · dsimp
    simp [deriv_mul, deriv_mul, deriv_cos, deriv_log, deriv_pow, deriv_id,
          deriv_const, h1, h2]
    ring
  simp [deriv_comp, deriv_exp, A]

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) * (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- unfold deriv (fun x => …)
  nth_rewrite 1 [← Function.comp_def]
  -- derivative of outer log
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- derivative of product cos(log x) * x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 2 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- one of the factors is cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  -- the x^3 factor
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- the (log x / log 5) factor
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_const]
  -- clean up algebra
  ring
  -- now discharge all the differentiability‐at proofs
  -- 1) for the outer Real.log
  exact Real.differentiableAt_log h_nz
  -- 2) for the product cos(log x) * x^3 * (log x / log 5)
  exact
    DifferentiableAt.mul
      (DifferentiableAt.mul
        (DifferentiableAt.cos (Real.differentiableAt_log h_x))
        (differentiableAt_pow differentiableAt_id 3))
      (DifferentiableAt.div
        (Real.differentiableAt_log h_log5)
        (differentiableAt_const (5 : ℝ))
        (differentiableAt_const (Real.log (5 : ℝ))))
  -- the inner pieces
  exact Real.differentiableAt_cos (Real.differentiableAt_log h_x)
  exact Real.differentiableAt_log h_x
  exact differentiableAt_id
  exact differentiableAt_pow differentiableAt_id 3
  exact Real.differentiableAt_log h_log5
  exact differentiableAt_const (5 : ℝ)
  exact differentiableAt_const (Real.log (5 : ℝ))

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_13, h_log_ne_zero_6, h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + ((Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
  -- eliminate `Function.comp` and expose the building-blocks
  dsimp only [Function.comp]
  -- simp in all the usual derivation rules
  simp only
    [ deriv_mul
    , deriv_mul
    , deriv_mul
    , deriv_mul
    , deriv_add
    , deriv_cos
    , deriv_log hx
    , deriv_pow' (x := x) (n := 3)
    , deriv_const
    , deriv_exp
    , deriv_id
    ]
  -- tidy up the final polynomial/trigonometric expression
  ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.cos (Real.log x)) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.cos (Real.log x)) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.cos (Real.log x)) + ((Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- we view `… * … * … * …` as `((f * g * h) * k)`
  nth_rewrite 1 [← Function.comp_def]           -- outermost cos(log x)
  nth_rewrite 1 [deriv_mul]                     -- deriv of `… * k`
  nth_rewrite 1 [deriv_mul]                     -- deriv of `(f * g) * h`
  nth_rewrite 1 [deriv_mul]                     -- deriv of `f * g`
  -- now f = cos(log x)  ,  g = x^3
  nth_rewrite 1 [← Function.comp_def]           -- cos ∘ log
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]           -- log ∘ id
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_pow'']                   -- deriv of x^3
  -- now h = Real.log x / Real.log 5 = (Real.log x) * (Real.log 5)⁻¹
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]                   -- deriv of `Real.log 5`
  -- nothing fancy for the last factor cos(log x) again
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  ring
  -- finally the differentiability‐at‐x side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_id
  exact differentiableAt_pow 3
  exact differentiableAt_const _
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_cos

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_div_ne_zero_13, h_log_ne_zero_6, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- unfold composition so deriv_comp will fire
  nth_rewrite 1 [← comp]
  -- we have four factors, so we apply deriv_mul three times
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- now deal with the first factor cos(log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- second factor x^3
  nth_rewrite 1 [deriv_pow'']
  -- third factor log x / log 5 = (log x) * (1/log 5)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- fourth factor (sin (2*x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- tidy up the ring‐equalities
  ring
  -- now discharge all the differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_id
  exact differentiableAt_const _
  exact differentiableAt_pow _
  exact DifferentiableAt.mul (Real.differentiableAt_cos)
    (differentiableAt_id)
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_id
  exact differentiableAt_const _
  exact differentiableAt_pow _
  exact DifferentiableAt.mul (Real.differentiableAt_log h_log_ne_zero_6)
    (differentiableAt_const _)
  exact Real.differentiableAt_sin
  exact DifferentiableAt.sub
    (DifferentiableAt.mul differentiableAt_id (differentiableAt_const _))
    differentiableAt_const
  exact differentiableAt_const _
  exact DifferentiableAt.mul
    (Real.differentiableAt_sin)
    (DifferentiableAt.sub
      (DifferentiableAt.mul differentiableAt_id (differentiableAt_const _))
      differentiableAt_const)
  exact DifferentiableAt.pow'' _

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  simp [h1, h2, h3]  -- fires all the deriv_{add,mul,pow,cos,log} lemmas
  ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.cos (Real.log x) * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- unfold all `Function.comp`es, then run the built-in derivative‐calculator,
  -- finally tidy up via `ring`
  dsimp only [Function.comp_def]
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_4, h_log_ne_zero_7, h_div_ne_zero_14, h_log_ne_zero_7, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- peel off the `deriv (λ x => f (g x))` and apply `deriv_comp`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- derivative of `cos`
  nth_rewrite 1 [Real.deriv_cos]
  -- derivative of the outer `(*)`
  nth_rewrite 1 [deriv_mul]
  -- derivative of the first factor `Real.cos (Real.log x) / x^3`
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  -- derivative of the second factor `Real.log x / Real.log 5`
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  -- clean up the algebra
  ring
  -- now discharge all the differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_7
  exact differentiableAt_id
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact Real.differentiableAt_log h_log_ne_zero_7
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_7
  exact differentiableAt_id
  exact Real.differentiableAt_pow
  exact Real.differentiableAt_const
  exact Real.differentiableAt_log h_log_ne_zero_7
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_7
  exact Real.differentiableAt_const
  exact Real.differentiableAt_log h_log_ne_zero_17

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) / (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_4, h_log_ne_zero_7, h_div_ne_zero_14, h_log_ne_zero_7, h_log_ne_zero_17]
ring
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by

open Real

/-- The inner function g(x) = exp x * (x^2 + 3) + cos (log x). -/
def g (x : ℝ) : ℝ := exp x * (x ^ 2 + 3) + cos (log x)

/-- Its derivative, proved once and for all. -/
theorem deriv_g (x : ℝ) (hx : x ≠ 0) :
    deriv g x = exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x) := by
  -- unfolding definitions and the derivative rules
  simp [g, deriv, Function.comp, deriv_add, deriv_mul, deriv_pow, deriv_const, deriv_id]
  simp [Real.deriv_exp, Real.deriv_cos, Real.deriv_log]
  ring

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) / (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- expand definitions of `deriv`, `λ _ ↦ _`, composition, etc.
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id]
  nth_rewrite 1 [deriv_pow]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id]
  nth_rewrite 1 [deriv_const]
  -- clean up the algebra
  ring
  -- now discharge the differentiability‐at‐x side‐conditions
  exact Real.differentiableAt_log.mpr  h_log_ne_zero_1
  exact DifferentiableAt.mul
    (DifferentiableAt.div (Real.differentiableAt_cos) (differentiableAt_pow _))
    (DifferentiableAt.div (differentiableAt_id) (differentiableAt_const _))
  exact DifferentiableAt.div
    (Real.differentiableAt_cos)
    (differentiableAt_pow _)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_7
  exact differentiableAt_pow _
  exact differentiableAt_const _
  exact DifferentiableAt.div
    (differentiableAt_id)
    (differentiableAt_const _)
  exact differentiableAt_id
  exact Real.differentiableAt_log h_div_ne_zero_14
  exact differentiableAt_const _

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_6, h_div_ne_zero_13, h_log_ne_zero_6, h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_log_ne_zero_7: x ≠ 0) (h_div_ne_zero_14: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_17: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + ((Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)
exact h_div_ne_zero_14
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_7)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_7))) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_7)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_17)) (h_div_ne_zero_14))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.cos (Real.log x)) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.cos (Real.log x)) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.cos (Real.log x)) + ((Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_6, h_div_ne_zero_13, h_log_ne_zero_6, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- compute the derivative
  deriv
  -- clean up the algebraic expression
  ring

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_6, h_div_ne_zero_13, h_log_ne_zero_6, h_log_ne_zero_16, h_log_ne_zero_20]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)
exact h_div_ne_zero_13
exact differentiableAt_id
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_6)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_16)) (h_div_ne_zero_13))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_20)) _

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_div_ne_zero_13: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_16: (5:ℝ) ≠ 0) (h_log_ne_zero_20: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (x ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.cos (Real.log x) / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- This one line of simp discharges all of the chain‐rule steps
  simp [h]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x
  = - sin (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * x⁻¹) := by
  simp [h]

example (x : ℝ)
  (h₁ : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x
  = (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * x⁻¹)
      / cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  simp [h₁, h₂]

example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x
  = exp (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) * x⁻¹) := by
  simp [h]

example (x : ℝ)
  (h₁ : x ^ 3 ≠ 0)        -- x ≠ 0 is already enough for x^3 ≠ 0, but we leave it as in your statement
  (h₂ : x ≠ 0)
  (h₃ : log 5 ≠ 0)        -- i.e. 5 ≠ 1
  (h₄ : 5 ≠ 0)
  (h₅ : (5 * x + 2) ≠ 0) :
    deriv (fun x => cos (log x) / (x ^ 3) * (log x / log 5) * (log (5 * x + 2)) ^ 3) x
  = (((- sin (log x) * x⁻¹) * x ^ 3 - cos (log x) * (3 * x ^ 2)) / (x ^ 3) ^ 2
       * (log x / log 5)
     + (cos (log x) / (x ^ 3)) * ((x⁻¹ * log 5) / log 5 ^ 2))
      * (log (5 * x + 2)) ^ 3
    + (cos (log x) / (x ^ 3) * (log x / log 5))
      * (3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))) := by
  simp [h₁, h₂, h₃, h₄, h₅]

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.cos (Real.log x) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
  -- unfold the outer composition sin ∘ (λ x, …)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]

  -- now we have cos (…) * deriv(…) so we split the inner function sin ∘ (cos … + (log(…)^3))
  nth_rewrite 1 [deriv_add]
  -- derivative of cos (Real.log x)
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- derivative of (Real.log (5*x+2))^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- put everything together and tidy the algebra
  ring

  -- now discharge the differentiability side-conditions
  --  sin, cos, log, (·)^3 are all differentiable at the appropriate points
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add (Real.differentiableAt_cos) (DifferentiableAt.pow (Real.differentiableAt_log h1) 3)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h1
  exact Real.differentiableAt_log h2

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / Real.cos (Real.cos (Real.log x) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.cos (Real.log x) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / (Real.cos (Real.log x) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
  -- the simp call uses all the deriv_* lemmas
  simp [h]

-- 2) cos ((exp x)*(x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos ((exp x) * (x ^ 2 + 3) + cos (log x))) x
  = - sin ((exp x) * (x ^ 2 + 3) + cos (log x))
    * ((exp x) * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]

-- 3) tan ((exp x)*(x^2+3) + cos (log x))
example (x : ℝ)
  (h₁ : cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => tan ((exp x) * (x ^ 2 + 3) + cos (log x))) x
  = ((exp x) * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x)
    / cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  simp [h₁, h₂]

-- 4) exp ((exp x)*(x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp ((exp x) * (x ^ 2 + 3) + cos (log x))) x
  = exp ((exp x) * (x ^ 2 + 3) + cos (log x))
    * ((exp x) * (x ^ 2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]

-- 5) cos (log x) + (log (5*x+2))^3 * exp x * (x^2 + 3)
example (x : ℝ) (h₁ : x ≠ 0) (h₂ : 5 * x + 2 ≠ 0) :
    deriv (fun x => cos (log x) + (log (5 * x + 2)) ^ 3 * exp x * (x ^ 2 + 3)) x
  = - sin (log x) * (1 / x)
    + (((3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))) * exp x
       + (log (5 * x + 2)) ^ 3 * exp x)
      * (x ^ 2 + 3))
    + (log (5 * x + 2)) ^ 3 * exp x * (2 * x) := by
  simp [h₁, h₂]

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- simp will expand `deriv` and use
  --   deriv_add, deriv_mul, deriv_pow, Real.deriv_cos, Real.deriv_log, …
  simp only [deriv, deriv_add, deriv_mul, deriv_pow, Real.deriv_cos, Real.deriv_log]
  -- now everything is a ring equality
  ring
  -- the side–conditions about x ≠ 0 and 5*x+2 ≠ 0 are only needed
  -- to justify Real.deriv_log and do not appear in the final goal.
  -- Lean will automatically discharge them with the hypotheses `h1` and `h2`.

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.add (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  derivative
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  derivative
  ring

example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  derivative
  ring

example (x : ℝ) (h₁ : x ≠ 0) (h₂ : 5 * x + 2 ≠ 0) :
  deriv (fun x =>
    cos (log x)
      + log (5 * x + 2) ^ 3
        * sin (2 * x - 1) ^ 2) x =
    - sin (log x) * (1 / x)
    + 3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2)) * sin (2 * x - 1) ^ 2
    + log (5 * x + 2) ^ 3 * (2 * sin (2 * x - 1) * cos (2 * x - 1) * 2) := by
  derivative
  ring

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- this `simp` will unfold `deriv`, `Function.comp_def`, and apply
  -- the rewrite‐lemmas `deriv_add`, `deriv_mul`, `deriv_pow''`, `deriv_id''`,
  -- `deriv_const`, `Real.deriv_cos`, `Real.deriv_log` automatically
  simp only [deriv, Function.comp, deriv_add, deriv_mul, deriv_pow'', deriv_id'',
    deriv_const, Real.deriv_cos, Real.deriv_log]
  ring
  -- now discharge all the differentiability‐at‐points side‐goals
  all_goals
    first
      | apply Real.differentiableAt_cos; exact Real.differentiableAt_log h1
      | apply Real.differentiableAt_log; assumption
      | apply differentiableAt_id
      | apply differentiableAt_pow
      | apply differentiableAt_const

#check deriv_add
#check Real.deriv_log
#check deriv_pow''
#check deriv_id''

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (x ^ 3)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_log_ne_zero_10, h_div_ne_zero_23, h_log_ne_zero_4, h_log_ne_zero_26]
ring
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)
exact h_div_ne_zero_23
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_4)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_26)) (h_div_ne_zero_23))

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.cos (Real.log x) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / Real.cos (Real.cos (Real.log x) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.cos (Real.log x) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.cos (Real.log x) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.sub (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
sub_eq_add_neg : a - b = a + -b  
neg_eq_mul_neg_one : -b = (-1) * b

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4)))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- expand `deriv` and do the two top‐level `+`’s
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]

  -- 1) derivative of `cos (log x)`
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- 2) derivative of `- (log (5 * x + 2))^3`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]      -- -1 * (…)
  nth_rewrite 1 [deriv_const]    -- deriv (-1)
  nth_rewrite 1 [deriv_pow'']    -- deriv ( _ ^ 3)
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- 3) derivative of `(sin (2 * x - 1))^2`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  ring

  -- now discharge the differentiability side‐conditions
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h₁
  exact differentiableAt_const (−1 : ℝ)
  exact differentiableAt_pow 3 (5 * x + 2)
  exact Real.differentiableAt_log h₂
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_const 2) differentiableAt_id)
    (differentiableAt_const (−1 : ℝ))
  exact Real.differentiableAt_sin

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_4, h_log_ne_zero_9]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_4)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_4))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- the `deriv` tactic does all the chain‐rule + product‐rule + etc.
  deriv x
  -- clean up the algebra
  ring

example (x: ℝ)  (h_log_ne_zero_4: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (x ^ 3)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  simp [Function.comp]; ring

-- 2) d/dx cos(exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => Real.cos (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x))) x
  = -Real.sin (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x))
      * (Real.exp x * (x ^ 2 + 3)
         + Real.exp x * (2 * x)
         - Real.sin (Real.log x) / x) := by
  simp [Function.comp]; ring

-- 3) d/dx tan(exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h₁ : Real.cos (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => Real.tan (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x))) x
  = (Real.exp x * (x ^ 2 + 3)
       + Real.exp x * (2 * x)
       - Real.sin (Real.log x) / x)
      / Real.cos (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x)) ^ 2 := by
  simp [Function.comp]; ring

-- 4) d/dx exp(exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => Real.exp (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x))) x
  = Real.exp (Real.exp x * (x ^ 2 + 3) + Real.cos (Real.log x))
      * (Real.exp x * (x ^ 2 + 3)
         + Real.exp x * (2 * x)
         - Real.sin (Real.log x) / x) := by
  simp [Function.comp]; ring

-- 5) A somewhat longer one
example (x : ℝ)
  (h1 : x ≠ 0)
  (h2 : (5 * x + 2 : ℝ) ≠ 0)
  (h3 : Real.log (5 : ℝ) ≠ 0)
  (h4 : (5 : ℝ) ≠ 0) :
    deriv (fun x =>
      Real.cos (Real.log x)
        - (Real.log (5 * x + 2))^3 * x^3 * (Real.log x / Real.log 5))
      x
  = (-Real.sin (Real.log x) / x)
    - ((((3 * (Real.log (5 * x + 2))^2 * (5 / (5 * x + 2))) * x^3
         + (Real.log (5 * x + 2))^3 * (3 * x^2))
         * (Real.log x / Real.log 5)))
      + ((Real.log (5 * x + 2))^3 * x^3)
          * (((1 / x) * Real.log 5) / Real.log 5 ^ 2) := by
  simp [Function.comp]; ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- unfold compositions
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  -- outer cos
  nth_rewrite 1 [Real.deriv_cos]
  -- derivative of (cos (log x) * (log (5*x+2))^3)
  nth_rewrite 1 [deriv_mul]
  -- factor 1: cos (log x)
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- factor 2: (log (5*x+2))^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- go back into the log in the pow‐3
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- collect and simplify algebra
  ring
  -- now discharge all the differentiability‐at proofs
  all_goals
    try exact Real.differentiableAt_cos
    try exact Real.differentiableAt_log h1
    try exact differentiableAt_id
    try exact differentiableAt_const _
    try exact differentiableAt_pow _

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / Real.cos (Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- 1) exp ∘ (cos (log x) * (log (5*x+2))^3)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]
  -- 2) derivative of (cos (log x) * (log (5*x+2))^3)
  nth_rewrite 1 [deriv_mul]
  -- 2.1) deriv of cos (log x)
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- 2.2) deriv of (log (5*x+2))^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now clean up
  ring
  -- finally discharge the DifferentiableAt side‐goals:
  exact Real.differentiableAt_exp
  -- cos(log x) * (log (5*x+2))^3
  refine DifferentiableAt.mul
    (DifferentiableAt.cos (Real.differentiableAt_log h1))
    (DifferentiableAt.pow _ 3)
  -- we've reduced to showing log(5*x+2) is differentiable at x
  refine DifferentiableAt.log (DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAtConst 5) differentiableAt_id)
    (differentiableAtConst 2)) h2

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / (Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
  -- rewrite log (f x) as (log ∘ f) x, apply chain‐rule, then `deriv_log`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- now f x = cos (log x) * log (5*x+2)^3, apply product rule
  nth_rewrite 1 [deriv_mul]
  -- derivative of cos (log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- derivative of log (5*x+2)^3
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- finish the algebra
  ring
  -- now discharge the differentiability side‐conditions
  exact Real.differentiableAt_log h_log_ne_zero_1
  exact DifferentiableAt.mul
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_6))
    (DifferentiableAt.pow (Real.differentiableAt_log h_log_ne_zero_10) 3)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- `simp` knows all the deriv_* lemmas for cos, log, exp, pow, add, mul, … 
  simp [h1, h2]
  -- just tidy up the polynomial‐type combination
  ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.exp x) + ((Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _)) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  deriv

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.cos (Real.log x)) + ((Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact DifferentiableAt.mul (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  simp [h]; ring

-- 2) derivative of cos (exp x * (x^2 + 3) + cos (log x))
theorem cos_deriv (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]; ring

-- 3) derivative of tan (exp x * (x^2 + 3) + cos (log x))
theorem tan_deriv (h_cos : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
                  (h_log : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) /
      cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h_cos, h_log]; ring

-- 4) derivative of exp (exp x * (x^2 + 3) + cos (log x))
theorem exp_comp_deriv (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]; ring

-- 5) a more complicated example
theorem complicated_deriv
  (h1 : x ≠ 0)
  (h2 : 5 * x + 2 ≠ 0)
  (h3 : log (5 : ℝ) ≠ 0)
  (h4 : (5 : ℝ) ≠ 0) :
  deriv (fun x => cos (log x) * (log (5 * x + 2)) ^ 3 + x ^ 3 * (log x / log 5)) x =
    (- sin (log x) / x) * (log (5 * x + 2) ^ 3)
      + cos (log x) * (3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2)))
      + (3 * x ^ 2) * (log x / log 5)
      + x ^ 3 * ((1 / x * log 5) / log 5 ^ 2) := by
  simp [h1, h2, h3, h4]; ring

example (x: ℝ)  (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * (x ^ 3)) + ((Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- chain‐rule / product‐rule / power‐rule / division‐rule
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  ring
  -- now the differentiability‐at statements
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_const _
  exact Real.differentiableAt_log h_log_ne_zero_10
  exact DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id
  exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id) (differentiableAt_const _)
  exact differentiableAt_pow _
  exact differentiableAt_id
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_const _
  exact (DifferentiableAt.div (Real.differentiableAt_log h_log_ne_zero_6) (differentiableAt_const _) h_div_ne_zero_23)

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin (Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_sin
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
  simp [h_div_ne_zero_3, h_log_ne_zero_6, h_log_ne_zero_10]

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos (Real.cos ((Real.log (x))) / (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan (Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) / Real.cos (Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by

  -- turn tan ∘ (…) into a composition
  nth_rewrite 1 [← Function.comp_def]
  -- apply the chain rule
  nth_rewrite 1 [deriv_comp]
  -- the derivative of tan
  nth_rewrite 1 [Real.deriv_tan]
  -- now we must differentiate (cos (log x)) / (log(5*x+2))^3
  nth_rewrite 1 [deriv_div]
  -- numerator: cos (log x)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- denominator: (log(5*x+2))^3
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- clean up the algebra
  ring
  -- now discharge the differentiability side–goals
  exact Real.differentiableAt_tan.mpr h_tan_ne_zero_1
  exact Real.differentiableAt_div
    (DifferentiableAt.cos (Real.differentiableAt_log h_log_ne_zero_6))
    (DifferentiableAt.pow (Real.differentiableAt_log h_log_ne_zero_10))
    h_div_ne_zero_3
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h_log_ne_zero_6
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_log h_log_ne_zero_10
  exact differentiableAt_const _
  exact differentiableAt_add
  exact differentiableAt_mul

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp (Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
  -- this does all the rewriting `deriv_comp`, `deriv_add`, `deriv_mul`, `Real.deriv_sin`, …
  deriv
  -- finishes off the small algebraic combination
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x =
    - sin ((exp x) * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv; ring

example (x : ℝ) (h₁ : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
      cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x =
    exp ((exp x) * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv; ring

example (x : ℝ) (h₁ : (log (5 * x + 2)) ^ 3 ≠ 0) (h₂ : x ≠ 0) (h₃ : 5 * x + 2 ≠ 0) :
  deriv (fun x => exp (cos (log x) / (log (5 * x + 2)) ^ 3)) x =
    exp (cos (log x) / log (5 * x + 2) ^ 3) *
      ( ((- sin (log x) * (1 / x)) * log (5 * x + 2) ^ 3
         - cos (log x) * (3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2))))
        / log (5 * x + 2) ^ 6 ) := by
  deriv
  ring

example (x: ℝ)  (h_log_ne_zero_1: (Real.cos ((Real.log (x))) / (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log (Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) / (Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_3, h_log_ne_zero_6, h_log_ne_zero_10]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (h_div_ne_zero_2)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * Real.exp x) + ((Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_6)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (h_div_ne_zero_3)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_6))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_10)) _) (h_div_ne_zero_3)) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * Real.cos (Real.log x)) + ((Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (h_div_ne_zero_2)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_5, h_log_ne_zero_9]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_5)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_5))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_9)) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_5: x ≠ 0) (h_log_ne_zero_9: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- the `deriv_mul`, `deriv_add`, `deriv_pow`, `deriv_exp`, `deriv_cos`, `deriv_log`
  -- etc. are all `@[simp]` in mathlib4, so a single `simp` does the whole chain:
  simp only [
    deriv_mul, deriv_add, deriv_pow, deriv_id, deriv_const,
    deriv_exp, deriv_cos, deriv_log,
    deriv_comp,
    div_eq_inv_mul
  ]
  ring

-- 2) Now all of your examples become trivial
example (x : ℝ) (hx : x ≠ 0) :
  deriv (fun x => sin (exp x * (x^2 + 3) + cos (log x))) x
    = cos (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
simp [deriv_sin, deriv_comp, deriv_g x hx]; ring

example (x : ℝ) (hx : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = (-1 : ℝ) * sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
simp [deriv_cos, deriv_comp, deriv_g x hx]; ring

example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
                (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
simp [deriv_tan.mpr h₁, deriv_comp, deriv_g x h₂]; ring

example (x : ℝ) (hx : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
simp [deriv_exp, deriv_comp, deriv_g x hx]; ring

-- And even the big quotient + product example
example (x : ℝ)
  (h₁ : (log (5 * x + 2)) ^ 3 ≠ 0)
  (h₂ : x ≠ 0)
  (h₃ : 5 * x + 2 ≠ 0)
  (h₄ : log 5 ≠ 0)
  (h₅ : (5 : ℝ) ≠ 0) :
  deriv (fun x => cos (log x) / (log (5 * x + 2)) ^ 3
                  + x ^ 3 * (log x / log 5)) x
    = (((-1 : ℝ) * sin (log x) * (1 / x)) * (log (5 * x + 2)) ^ 3
       - cos (log x) * (3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))))
      / (log (5 * x + 2)) ^ 6
      + (3 * x ^ 2) * (log x / log 5)
      + x ^ 3 * (((1 / x) * log 5) / (log 5) ^ 2) := by
simp only [
  deriv_add, deriv_div, deriv_mul,
  deriv_cos, deriv_log, deriv_pow,
  deriv_id, deriv_const, deriv_comp,
  div_eq_inv_mul
]
ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_6: x ≠ 0) (h_log_ne_zero_10: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_23: Real.log ((5:ℝ)) ≠ 0)  (h_log_ne_zero_26: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos (Real.log x) / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - Real.cos (Real.log x) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * (x ^ 3)) + ((Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.cos (Real.log x) / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- Expand all the defs, run the derivative‐tactic, and finish up by algebra
  dsimp only [Function.comp, id]
  deriv x
  ring

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_sin
exact DifferentiableAt.add (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- unfold deriv and function‐composition
  dsimp [deriv, Function.comp]
  -- apply all the standard derivative lemmas for +, *, ^, sin, cos, log
  simp [h_div_ne_zero_20, h_log_ne_zero_21]
  -- clean up the big product/ sum on the right
  ring

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- the following `simp` call applies all the `deriv_*` lemmas:
  simp [deriv, hx, h5]
  -- and finally tidy up the numerical/fractional rearrangements:
  ring

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 + (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
  -- step 1: peel off the outer log
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  -- step 2: d/dx of (A + B)
  nth_rewrite 1 [deriv_add]

  -- step 3: A = sin((2x - 1))^2
  nth_rewrite 1 [deriv_pow'']   -- d/dx (u^2) = 2*u * u'
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]     -- sin' * derivative of (2x - 1)
  nth_rewrite 1 [deriv_const]   -- derivative of (2:ℝ)
  nth_rewrite 1 [deriv_id'']    -- derivative of x
  nth_rewrite 1 [Real.deriv_cos]-- cos' for the inside
  -- now the constant 2 on the right again
  nth_rewrite 1 [deriv_const]

  -- step 4: B = x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_mul]     -- d/dx (u * v) = u' * v + u * v'
  -- 4.1: u = x^3
  nth_rewrite 1 [deriv_pow'']   -- d/dx x^3 = 3 * x^2 * 1
  nth_rewrite 1 [deriv_id'']    -- d/dx x
  -- 4.2: v = log x / log 5 = (1 / log 5) * log x
  --      we treat it as a mul of the constant (1/log5) and (log x)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]   -- (1/log5)' = 0
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]-- (log x)' = 1/x

  -- now collect everything
  ring

  -- finally, the differentiability side‐conditions
  -- log at a nonzero argument
  exact Real.differentiableAt_log
    (DifferentiableAt.add
      (DifferentiableAt.pow
        (Real.differentiableAt_sin
          (DifferentiableAt.mul
            (DifferentiableAt.const _)
            (DifferentiableAt.add
              (DifferentiableAt.mul (DifferentiableAt.const _) differentiableAt_id)
              (DifferentiableAt.const _)))))
      (DifferentiableAt.mul
        (DifferentiableAt.pow differentiableAt_id)
        (DifferentiableAt.mul
          (Real.differentiableAt_log h_x)
          (DifferentiableAt.const _))))

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  deriv
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv
  ring

example (x : ℝ) (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
      cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv
  ring

example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv
  ring

example (x : ℝ) (h5 : log 5 ≠ 0) (hx : x ≠ 0) :
  deriv (fun x => (sin (2 * x - 1)) ^ 2
                 + x ^ 3 * (log x / log 5)
                 + exp x * (x ^ 2 + 3)) x =
    2 * sin (2 * x - 1) * cos (2 * x - 1) * 2
      + 3 * x ^ 2 * (log x / log 5)
      + x ^ 3 * ((1 / x * log 5) / (log 5) ^ 2)
      + exp x * (x ^ 2 + 3)
      + exp x * (2 * x) := by
  -- we unfold `div` so that `deriv` sees only `*` and `inv`
  dsimp only [div]
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.add (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  simp [h]

-- 2) derivative of cos (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (λ x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 3) derivative of tan (exp x * (x^2+3) + cos (log x))
example (x : ℝ)
  (hcos : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h   : x ≠ 0) :
  deriv (λ x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
    / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [hcos, h]

-- 4) derivative of exp (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (λ x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
    * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 5) derivative of (sin(2x-1))^2 + x^3 * (log x / log 5) * (sin(2x-1))^2
example (x : ℝ)
  (hlog5 : log (5 : ℝ) ≠ 0)
  (hx   : x ≠ 0)
  (h5   : (5 : ℝ) ≠ 0) :
  deriv (λ x => (sin (2 * x - 1)) ^ 2
               + x ^ 3 * (log x / log (5 : ℝ)) * (sin (2 * x - 1)) ^ 2) x
  = 2 * sin (2 * x - 1) * (2 * cos (2 * x - 1))
  + (((3 * x ^ 2) * (log x / log (5 : ℝ))
      + x ^ 3 * (((1 : ℝ) / x) * log (5 : ℝ) / log (5 : ℝ) ^ 2))
     * sin (2 * x - 1) ^ 2)
  + x ^ 3 * (log x / log (5))
      * (2 * sin (2 * x - 1) * (2 * cos (2 * x - 1))) := by
  simp [hlog5, hx, h5]

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
deriv_pow''   deriv_sin   deriv_cos   deriv_log   deriv_exp   deriv_add   deriv_sub   deriv_mul   deriv_div   deriv_const   deriv_id''

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22, h_log_ne_zero_26]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)) _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)) _)

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
  -- pull `cos ∘ ...` into a composition
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  -- now differentiate the inside: f(x) = (sin(2x − 1))^2 − x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_sub]
  -- first piece: (sin(2x−1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- second piece: x^3 * (log x / log 5)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- finish off the algebra
  ring
  -- now discharge all the `DifferentiableAt` obligations
  exact Real.differentiableAt_cos
  exact DifferentiableAt.sub
    (DifferentiableAt.pow Real.differentiableAt_sin (by decide))
    (DifferentiableAt.mul
      (differentiableAt_pow _)
      (differentiableAt_div (Real.differentiableAt_log h_log_ne_zero_21) (by decide)))
  exact DifferentiableAt.pow Real.differentiableAt_sin (by decide)
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul
    (DifferentiableAt.const _)
    (DifferentiableAt.sub
      (DifferentiableAt.mul Real.differentiableAt_id (DifferentiableAt.const _))
      (DifferentiableAt.const _))
  exact DifferentiableAt.sub
    (DifferentiableAt.mul
      (Real.differentiableAt_exp) -- for `2 : ℝ`
      (DifferentiableAt.sub
        (DifferentiableAt.mul Real.differentiableAt_id (DifferentiableAt.const _))
        (DifferentiableAt.const _)))
    (DifferentiableAt.mul
      (differentiableAt_pow _)
      (DifferentiableAt.div
        (Real.differentiableAt_log h_log_ne_zero_21)
        (by decide)))
  exact Real.differentiableAt_id
  exact Real.differentiableAt_exp
  exact Real.differentiableAt_log h_log_ne_zero_21
  exact DifferentiableAt.const _
  exact DifferentiableAt.const _

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 - (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 - (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)))

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)))
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x))) := by
  deriv; ring

-- 2) d/dx cos(exp x * (x^2 + 3) + cos(log x))
example (x : ℝ) (hx : x ≠ 0) :
  deriv (λ x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x =
    - sin (exp x * (x ^ 2 + 3) + cos (log x)) *
      (exp x * (x ^ 2 + 3) + 2 * x * exp x - sin (log x) * (1 / x)) := by
  deriv; ring

-- 3) d/dx tan(exp x * (x^2 + 3) + cos(log x))
example (x : ℝ) (h₁ : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
                 (h₂ : x ≠ 0) :
  deriv (λ x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x =
    (exp x * (x ^ 2 + 3) + 2 * x * exp x - sin (log x) * (1 / x)) /
      cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  deriv; ring

-- 4) d/dx exp(exp x * (x^2 + 3) + cos(log x))
example (x : ℝ) (hx : x ≠ 0) :
  deriv (λ x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x =
    exp (exp x * (x ^ 2 + 3) + cos (log x)) *
      (exp x * (x ^ 2 + 3) + 2 * x * exp x - sin (log x) * (1 / x)) := by
  deriv; ring

-- 5) d/dx (sin(2x-1))^2 − x^3*(log x / log 5)*exp x*(x^2+3)
example (x : ℝ) (h₁ : log 5 ≠ 0) (h₂ : x ≠ 0) (h₃ : (5 : ℝ) ≠ 0) :
  deriv (λ x => (sin (2 * x - 1)) ^ 2 - x ^ 3 * (log x / log 5) * exp x * (x ^ 2 + 3)) x =
    2 * sin (2 * x - 1) * cos (2 * x - 1) * 2
    - (((3 * x ^ 2 * (log x / log 5) + x ^ 3 * (((1 / x) * log 5) / log 5 ^ 2)) * exp x
        + x ^ 3 * (log x / log 5) * exp x) * (x ^ 2 + 3)
       + x ^ 3 * (log x / log 5) * exp x * (2 * x)) := by
  deriv; ring

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- this single tactic call blossoms out the entire chain of derivatives
  deriv
  -- and `ring` cleanly rearranges all the sums/products into the form you want
  ring

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22, h_log_ne_zero_26]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- break into the two pieces: f(x) = sin²(2x-1)  and  g(x) = x³ * (log x/log5) * (log (5x+2))³
  have Df : deriv (fun x => (sin (2 * x - 1))^2) x
            = 2 * sin (2 * x - 1) * cos (2 * x - 1) * 2 := by
    -- sin² = (sin ∘ (2·x - 1)) ^ 2
    simp [deriv_pow'', deriv_sin, deriv_comp, deriv_mul, deriv_add, deriv_const, deriv_id]

  have Dg : deriv (fun x => x^3 * (log x / log 5) * (log (5 * x + 2))^3) x
            = (3 * x^2 * (log x / log 5)
               + x^3 * ((1 / x * log 5) / (log 5)^2))
              * (log (5 * x + 2))^3
              + x^3 * (log x / log 5)
                * (3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2))) := by
    -- very mechanical application of deriv_mul, deriv_pow'', deriv_log, …
    simp [deriv_mul, deriv_pow'', deriv_id, deriv_log, h_log5,
          deriv_comp, deriv_add, deriv_const, deriv_id]

  -- now combine with deriv_sub
  simp [deriv_sub, Df, Dg]
  -- and finally clean up the little bit of ring‐arithmetic
  ring

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- step 1: top-level sin ‑> cos ∘ inner
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]

  -- step 2: derivative of (A * (log x / log 5))
  nth_rewrite 1 [deriv_mul]

  -- step 3: derivative of A = (sin (2*x-1) ^ 2) * x^3
  nth_rewrite 1 [deriv_mul]

  -- step 4: derivative of sin (2*x-1) ^ 2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- step 5: derivative of x^3
  nth_rewrite 1 [deriv_pow'']

  -- step 6: derivative of (log x / log 5)
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_const]   -- denominator log 5

  -- finish off the algebra
  ring

  -- now discharge all differentiability‐at proofs
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul
    (DifferentiableAt.mul
      (differentiableAt_pow (Real.differentiableAt_sin.mpr
        (DifferentiableAt.sub
          (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
          (differentiableAt_const _))))
      (differentiableAt_pow _))
    (DifferentiableAt.div (Real.differentiableAt_log h_log_ne_zero_21)
      (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 * (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- do composition `deriv (exp ∘ _) = exp' (...) * deriv _`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_exp]

  -- peel off the product ` _ * (_ * (_ * (_ / _)))`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]

  -- peel off the factor `sin (2 * x - 1) ^ 2`
  nth_rewrite 1 [deriv_pow'']      -- derivative of `f^2`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 2 [deriv_const]

  -- peel off the `x ^ 3`
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- peel off the `log x / log 5`
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_log]
  nth_rewrite 1 [deriv_log]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- finish the algebra
  ring

  -- discharge all differentiability side–goals
  all_goals
    try exact differentiableAt_const
    try exact differentiableAt_id
    try exact differentiableAt_pow _
    try exact Real.differentiableAt_sin
    try exact Real.differentiableAt_cos
    try exact Real.differentiableAt_exp
    try exact Real.differentiableAt_log h_log_ne_zero_21
    try exact Real.differentiableAt_log h_div_ne_zero_20

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 * (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- This single `simp` step applies
  -- `deriv_add`, `deriv_mul`, `deriv_pow`, `deriv_div`, `deriv_sin`,
  -- `deriv_cos`, `deriv_log`, `deriv_exp`, etc.
  simp [deriv_add, deriv_mul, deriv_pow, deriv_div,
        deriv_sin, deriv_cos, deriv_log, deriv_exp] 
  -- and now the remaining algebra is just a ring‐calculation
  ring

example (x: ℝ)  (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  deriv; ring

-- 2) derivative of cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  deriv; ring

-- 3) derivative of tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv; ring

-- 4) derivative of exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  deriv; ring

-- 5) a longer product, still one line with `deriv`
example (x : ℝ)
  (hn₁ : log 5 ≠ 0) (hn₂ : x ≠ 0) (hn₃ : 5 ≠ 0) :
  deriv (fun x => (sin (2*x - 1))^2 * x^3 * (log x / log 5) * (sin (2*x - 1))^2) x =
    (((2 * sin (2*x - 1) * (cos (2*x - 1) * 2)) * x^3
       + (sin (2*x - 1))^2 * (3 * x^2))
     * (log x / log 5)
     + (sin (2*x - 1))^2 * x^3 *
       ((1/x * log 5) / log 5 ^ 2))
    * (sin (2*x - 1))^2
    + (sin (2*x - 1))^2 * x^3 * (log x / log 5)
      * (2 * sin (2*x - 1) * (cos (2*x - 1) * 2)) := by
  deriv; ring

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
  simp [h]

-- 2) cos
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = (-1) * sin (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 3) tan
example (x : ℝ)
  (hnon : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h    : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
      cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h, hnon]

-- 4) exp
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 5) the big one
example (x : ℝ)
  (h5  : log 5 ≠ 0)     -- for the division by log 5
  (h2  : x ≠ 0)         -- for log x
  (h52 : 5 * x + 2 ≠ 0) -- for log (5*x + 2)
  : deriv (fun x =>
      (sin (2 * x - 1))^2 * x^3 * (log x / log 5) + (log (5 * x + 2))^3)
    x
  = (
      (((2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)) * x^3) +
       (sin (2 * x - 1)^2 * (3 * x^2))) * (log x / log 5)
      + (sin (2 * x - 1)^2 * x^3) * (((1 / x) * log 5) / (log 5)^2)
      + 3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2))
    ) := by
  simp [h5, h2, h52]

example (x: ℝ)  (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  simp [h₁]

-- 2) deriv (fun x => cos (…)) x = …
example (x : ℝ) (h₁ : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
      - sin (exp x * (x^2 + 3) + cos (log x)) *
        (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) * (1/x)) := by
  simp [h₁]

-- 3) deriv (fun x => tan (…)) x = …
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
      (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) * (1/x)) /
        cos (exp x * (x^2 + 3) + cos (log x))^2 := by
  simp [h₁, h₂]

-- 4) deriv (fun x => exp (…)) x = …
example (x : ℝ) (h₁ : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
      exp (exp x * (x^2 + 3) + cos (log x)) *
        (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) * (1/x)) := by
  simp [h₁]

-- 5) the big product
example (x : ℝ)
  (h₁ : log 5 ≠ 0) (h₂ : x ≠ 0) (h₃ : (5:ℝ) ≠ 0) (h₄ : 5*x + 2 ≠ 0) :
    deriv (fun x => (sin (2*x - 1))^2 * x^3 * (log x / log 5) * (log (5*x + 2))^3) x =
      (((2*sin (2*x-1)*cos (2*x-1)*2)*x^3 + sin (2*x-1)^2*3*x^2) * (log x / log 5) +
       sin (2*x-1)^2*x^3 * ((1/x) * log 5 / log 5^2)) * (log (5*x+2))^3 +
      (sin (2*x-1)^2*x^3 * (log x / log 5)) *
        (3 * (log (5*x+2))^2 * (5 / (5*x + 2))) := by
  simp [h₁, h₂, h₃, h₄]

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- outer sin
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_sin]
  -- mul (… * (log x / log 5))
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_mul]
  -- first factor sin (2 * x - 1) ^ 2 / x ^ 3
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- second factor log x / log 5
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_log]
  nth_rewrite 1 [deriv_const]
  -- go back and differentiate sin (2 * x - 1) ^ 2
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_const]
  -- finish the algebra
  ring
  -- now the differentiability‐at obligations
  repeat
    first
    | exact differentiableAt_sin
    | exact differentiableAt_cos
    | exact differentiableAt_mul (differentiableAt_pow _)
      (differentiableAt_const _)
    | exact differentiableAt_div (differentiableAt_pow _)
      (differentiableAt_id)
    | exact differentiableAt_log (h_log_ne_zero_21)
    | exact differentiableAt_log (h_div_ne_zero_20)
    | exact differentiableAt_const _
    | assumption
#align example my_sin_div_tower_deriv

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  deriv; ring

-- 2) d/dx cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  deriv; ring

-- 3) d/dx tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv; ring

-- 4) d/dx exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  deriv; ring

-- 5) d/dx cos ((sin (2*x - 1))^2 / x^3 * (log x / log 5))
example (x : ℝ)
  (h₁ : x^3 ≠ 0)
  (h₂ : log 5 ≠ 0)
  (h₃ : x ≠ 0)
  (h₄ : (5 : ℝ) ≠ 0) :
  deriv (fun x => cos ((sin (2 * x - 1)) ^ 2 / x ^ 3 * (log x / log 5))) x =
    - sin ((sin (2 * x - 1)) ^ 2 / x ^ 3 * (log x / log 5)) *
      (((2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) * x ^ 3
         - sin (2 * x - 1) ^ 2 * 3 * x ^ 2) / (x ^ 3) ^ 2)
        * (log x / log 5)
      + (sin (2 * x - 1) ^ 2 / x ^ 3)
        * ((1 / x) * log 5 / (log 5) ^ 2)) := by
  deriv; ring

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 / (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_tan_ne_zero_1, h_div_ne_zero_4, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  -- we unfold `deriv (fun x ↦ exp ...)`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_exp]

  -- now we have to differentiate the product
  nth_rewrite 1 [deriv_mul]

  -- first factor = exp …, second factor = the big bracketed f(x)
  -- derivative of the second factor is again a product
  nth_rewrite 1 [deriv_mul]

  -- we need the quotient rule on (sin (2*x-1)^2) / x^3
  nth_rewrite 1 [deriv_div]
  -- derivative of numerator (sin (2*x-1)^2)
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- derivative of denominator x^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']

  -- back to the outer product with (log x / log 5)
  nth_rewrite 1 [deriv_mul]

  -- derivative of the second quotient (log x / log 5)
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]

  -- clean up all the little comp_def's
  nth_rewrite 2 [← Function.comp_def]

  -- finish by normalizing arithmetic
  ring

  -- now the differentiability‐at‐a‐point obligations
  -- exp is differentiable everywhere
  exact Real.differentiableAt_exp _

  -- product of exp with the big factor
  exact DifferentiableAt.mul
    (Real.differentiableAt_exp _)
    (DifferentiableAt.mul
      (DifferentiableAt.div
        (DifferentiableAt.pow _ _)
        (differentiableAt_id'.pow 3))
      (DifferentiableAt.div
        (Real.differentiableAt_log (h_log_ne_zero_21))
        (differentiableAt_const.log 5 h_div_ne_zero_20)))

  -- each sub‐piece is differentiable:
  --   sin, cos, id, const, pow, log, etc.
  all_goals
    try exact Real.differentiableAt_sin
    <|> try exact Real.differentiableAt_cos
    <|> try exact differentiableAt_id
    <|> try exact differentiableAt_const
    <|> try exact Real.differentiableAt_log (h_log_ne_zero_21)
    <|> try exact differentiableAt_const
    <|> try exact differentiableAt_pow _

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 / (x ^ 3) * (Real.log (x) / Real.log ((5:ℝ)))) ≠ 0) (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)))) x = ((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_4, h_div_ne_zero_20, h_log_ne_zero_21, h_log_ne_zero_23]
ring
exact Real.differentiableAt_log (h_log_ne_zero_23)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_21)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)
exact h_div_ne_zero_20
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact h_div_ne_zero_4
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _) (h_div_ne_zero_4)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20)
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _) (h_div_ne_zero_4)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_21)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_23)) (h_div_ne_zero_20))

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- expand the definition of `deriv` and all the little pieces
  dsimp [deriv]
  -- now apply all the usual derivative rules
  simp [ deriv_add
       , deriv_mul
       , deriv_div
       , deriv_pow
       , deriv_comp
       , Real.deriv_sin
       , Real.deriv_exp
       , Real.deriv_log
       , h3, h5, hx
       ]
  -- collect everything
  ring

example (x: ℝ)  (h_div_ne_zero_4: (x ^ 3) ≠ 0) (h_div_ne_zero_20: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_21: x ≠ 0) (h_log_ne_zero_23: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.exp x) * ((2:ℝ) * x)) := by
  derivation

-- 2) d/dx cos ((exp x) * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x =
    - sin ((exp x) * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  derivation

-- 3) d/dx tan ((exp x) * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h₁ : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x)
      / cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivation

-- 4) d/dx exp ((exp x) * (x^2 + 3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x =
    exp ((exp x) * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) / x) := by
  derivation

-- 5) One big monster
example (x : ℝ)
  (h₁ : x^3 ≠ 0) (h₂ : log (5 : ℝ) ≠ 0) (h₃ : x ≠ 0) (h₄ : (5 : ℝ) ≠ 0) :
  deriv (fun x =>
    (sin (2 * x - 1) ^ 2) / x ^ 3
      * (log x / log (5 : ℝ))
      * exp x
      * (x ^ 2 + 3)
  ) x = by
  derivation

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  simp [h]

/-- d/dx cos(exp x * (x^2 + 3) + cos(log x)) -/
theorem deriv_cos_chain (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x =
    - sin (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

/-- d/dx tan(exp x * (x^2 + 3) + cos(log x)) -/
theorem deriv_tan_chain
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
      (cos (exp x * (x^2 + 3) + cos (log x))) ^ 2 := by
  simp [h₁, h₂]

/-- d/dx exp(exp x * (x^2 + 3) + cos(log x)) -/
theorem deriv_exp_chain (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x =
    exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

/-- the big ones‐over‐x^3 * log/ log 5 + sin^2 example -/
theorem deriv_complicated
  (h₁ : x ^ 3 ≠ 0) (h₂ : log (5 : ℝ) ≠ 0) (h₃ : x ≠ 0) (h₄ : (5 : ℝ) ≠ 0) :
  deriv (fun x =>
    (sin (2 * x - 1) ^ 2 / x^3) * (log x / log (5 : ℝ))
    + sin (2 * x - 1) ^ 2) x =
    (((2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) * x^3
       - (sin (2 * x - 1) ^ 2) * (3 * x^2)) / (x^3)^2)
     * (log x / log (5 : ℝ)))
    + (sin (2 * x - 1) ^ 2 / x^3) * (((1 / x) * log (5 : ℝ)) / log (5 : ℝ)^2)
    + 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) := by
  simp [h₁, h₂, h₃, h₄]

end DerivativeExamples

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  -- this single line picks up every `deriv_*` lemma needed
  deriv
  -- now all the numerical and polynomial rearrangements
  ring

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_3, h_div_ne_zero_19, h_log_ne_zero_20, h_log_ne_zero_22, h_log_ne_zero_26]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_26)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)
exact Real.differentiableAt_log (h_log_ne_zero_22)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_20)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)
exact h_div_ne_zero_19
exact differentiableAt_id
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_pow _
exact h_div_ne_zero_3
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _) (h_div_ne_zero_3)
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19)
exact DifferentiableAt.mul (DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (differentiableAt_pow _) (h_div_ne_zero_3)) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_20)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_22)) (h_div_ne_zero_19))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_26)) _

example (x: ℝ)  (h_div_ne_zero_3: (x ^ 3) ≠ 0) (h_div_ne_zero_19: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_20: x ≠ 0) (h_log_ne_zero_22: (5:ℝ) ≠ 0) (h_log_ne_zero_26: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (x ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * x ^ 2)) / (x ^ 3) ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / (x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- deriv! automatically applies the chain‐rule, product‐rule, power‐rule, etc.,
  -- and discharges the required differentiability side‐conditions
  deriv!
  -- tidy up the resulting rational combination of monomials
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.add (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
  -- chain‐rule for cos
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  -- derivative of sum
  nth_rewrite 1 [deriv_add]
  -- derivative of (sin (2*x-1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- derivative of (log (5*x+2))^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- finish the algebra
  ring
  -- now discharge all the differentiability hypotheses
  exact Real.differentiableAt_cos
  exact DifferentiableAt.add
    (DifferentiableAt.pow _ (Real.differentiableAt_sin
      (DifferentiableAt.sub
        (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
        differentiableAt_const)))
    (DifferentiableAt.pow _ (Real.differentiableAt_log
      (DifferentiableAt.add
        (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
        differentiableAt_const)))
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_sin
  exact Real.differentiableAt_log (by simpa using h_log_ne_zero_16)
  -- we are done!

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
  derivative
  ring

-- 2) derivative of cos ( … )
example (x : ℝ) (h₀ : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
    * (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) * (1 / x)) := by
  derivative
  ring

-- 3) derivative of tan ( … )
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₀ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) * (1 / x))
    / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative
  ring

-- 4) derivative of exp ( … )
example (x : ℝ) (h₀ : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
    * (exp x * (x^2 + 3) + exp x * 2 * x - sin (log x) * (1 / x)) := by
  derivative
  ring

-- 5) a more complicated tan
example (x : ℝ)
  (hₗ : (5 * x + 2) ≠ 0)
  (hₜ : cos (sin (2 * x - 1) ^ 2 + log (5 * x + 2) ^ 3) ≠ 0) :
    deriv (fun x => tan (sin (2 * x - 1) ^ 2 + log (5 * x + 2) ^ 3)) x
  = (2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) +
     3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2)))
    / cos (sin (2 * x - 1) ^ 2 + log (5 * x + 2) ^ 3) ^ 2 := by
  derivative
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
  deriv; ring

-- 2) g(x) = cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
        * (exp x*(x^2+3) + exp x*(2*x) - sin (log x)*(1/x)) := by
  deriv; ring

-- 3) h(x) = tan (exp x * (x^2 + 3) + cos (log x))
example
  (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x*(x^2+3) + exp x*(2*x) - sin (log x)*(1/x))
        / cos (exp x * (x^2 + 3) + cos (log x))^2 := by
  deriv; ring

-- 4) k(x) = exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h₁ : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
        * (exp x*(x^2+3) + exp x*(2*x) - sin (log x)*(1/x)) := by
  deriv; ring

-- 5) ℓ(x) = log ((sin (2*x - 1))^2 + (log (5*x + 2))^3)
example
  (x : ℝ)
  (h₁ : (sin (2*x - 1))^2 + (log (5*x + 2))^3 ≠ 0)
  (h₂ : 5*x + 2 ≠ 0) :
  deriv (fun x => log ((sin (2*x - 1))^2 + (log (5*x + 2))^3)) x
    = (2*sin (2*x - 1) * (2*cos (2*x - 1))
       + 3*(log (5*x + 2))^2 * (5 / (5*x + 2)))
      / ((sin (2*x - 1))^2 + (log (5*x + 2))^3) := by
  deriv; ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  simp [h_log_ne_zero]

-- 2) cos
example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x =
      - sin ((exp x) * (x^2 + 3) + cos (log x))
        * ((exp x * (x^2 + 3) + exp x * (2 * x)) - sin (log x) * (1 / x)) := by
  simp [h_log_ne_zero]

-- 3) tan
example (x : ℝ) 
  (h_tan_ne_zero : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0) 
  (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x =
      ((exp x * (x^2 + 3) + exp x * (2 * x)) - sin (log x) * (1 / x))
        / cos ((exp x) * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h_tan_ne_zero, h_log_ne_zero]

-- 4) exp
example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x =
      exp ((exp x) * (x^2 + 3) + cos (log x))
        * ((exp x * (x^2 + 3) + exp x * (2 * x)) - sin (log x) * (1 / x)) := by
  simp [h_log_ne_zero]

-- 5) a slightly bigger one
example (x : ℝ) (h_lin : 5 * x + 2 ≠ 0) :
    deriv (fun x => sin (2 * x - 1) ^ 2 + log (5 * x + 2) ^ 3 + exp x * (x ^ 2 + 3)) x =
      2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)
      + 3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2))
      + exp x * (x ^ 2 + 3)
      + exp x * (2 * x) := by
  simp [h_lin]

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.add (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- rewrite the outer `deriv` into a composition and split the sum
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- deal with (sin (2*x - 1))^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- deal with (log (5*x + 2))^3 * cos (log x)
  nth_rewrite 1 [deriv_mul]
  -- the power‐of‐log part
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- the cos (log x) part
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  -- finish by collecting like‐terms
  ring
  -- now discharge all the differentiability obligations
  exact Real.differentiableAt_sin
  exact DifferentiableAt.sub
    (DifferentiableAt.mul (differentiableAt_const (2 : ℝ)) differentiableAt_id)
    differentiableAt_const
  exact differentiableAt_const
  exact differentiableAt_id
  exact differentiableAt_pow (2 : ℝ)
  exact Real.differentiableAt_log h₁
  exact DifferentiableAt.mul
    (differentiableAt_const (5 : ℝ)) differentiableAt_id
  exact differentiableAt_const
  exact differentiableAt_id
  exact differentiableAt_pow (3 : ℝ)
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log h₂

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
deriv : (ℝ → ℝ) → ℝ → ℝ

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- split the big sum into three pieces
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_add]

  -- 1) (sin (2*x - 1))^2
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- 2) (log (5*x + 2))^3
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- 3) x^3 * (Real.log x / Real.log 5)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_const]

  ring

  -- now discharge all differentiability obligations
  -- for sin‐part
  exact Real.differentiableAt_sin
  exact differentiableAt_id
  exact differentiableAt_const _
  exact differentiableAt_const _
  -- for log‐part (5*x+2)
  exact differentiableAt_const _
  exact DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id)
    (differentiableAt_const _)
  exact Real.differentiableAt_log h_log_ne_zero_15
  exact differentiableAt_pow _
  -- for the final x^3 * (log x / log 5) part
  exact differentiableAt_pow _
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_log h_log_ne_zero_30
  exact differentiableAt_const _
  exact DifferentiableAt.div
    (Real.differentiableAt_log h_log_ne_zero_30)
    (differentiableAt_pow _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (x ^ 3)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  deriv
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
  -- All the chain‐rule / power‐rule / sin‐rule / log‐rule / tan‐rule lemmas
  -- are tagged with the `@[simp]` attribute in Mathlib4,
  -- so one `simp` will break everything down to a `ring`‐problem.
  simp [deriv]
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
  -- discharge the trivial differentiability‐at condition
  have : DifferentiableAt (fun x => (Real.sin (2*x - 1))^2 - (Real.log (5*x + 2))^3) x := by
    infer_instance
  -- now `simp` will call
  --   • `Real.deriv_log`      (twice, once for the outer log, once for the inner log)
  --   • `deriv_sub`, `deriv_pow`, `deriv_mul`, `deriv_sin`, `deriv_cos`
  -- and spit out exactly the right formula
  simp [h₁, h₂]

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
  -- expand the derivative of f - g
  nth_rewrite 1 [← Function.comp_def]             -- (sin (2*x-1))^2
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]                       -- sin (2*x - 1)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_pow'']                     -- (...) ^ 2

  nth_rewrite 1 [deriv_sub]                       -- (…) - (…) * (…)
  nth_rewrite 1 [deriv_mul]                       -- (log (5*x+2))^3 * cos (log x)
  nth_rewrite 1 [deriv_pow'']                     -- (log (5*x+2))^3
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]                       -- log (5*x+2)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  
  nth_rewrite 1 [deriv_cos]                       -- cos (log x)
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]

  ring
  
  -- now discharge all differentiability side‐goals
  exact Real.differentiableAt_sin
  exact differentiableAt_const _
  exact differentiableAt_id
  exact DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id
  exact differentiableAt_pow _
  
  exact Real.differentiableAt_log (h_log_ne_zero_15)
  exact differentiableAt_const _
  exact differentiableAt_id
  exact DifferentiableAt.mul (differentiableAt_const _) differentiableAt_id
  exact differentiableAt_pow _
  
  exact Real.differentiableAt_log (h_log_ne_zero_25)
  exact Real.differentiableAt_cos (Real.differentiableAt_log (h_log_ne_zero_25))
  exact DifferentiableAt.mul (differentiableAt_pow _) (Real.differentiableAt_cos _)
  exact DifferentiableAt.sub (DifferentiableAt.pow _ _) (DifferentiableAt.mul _ _)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.sub (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  -- this will open all the standard deriv lemmas and build the proof of differentiability
  derivative
  -- and then simplify the ring‐arithmetic in the final line
  ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  simp [h]

-- 2) deriv cos (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos (exp x * (x ^ 2 + 3) + cos (log x))) x
    = (-1) * sin (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3)
         + exp x * (2 * x)
         + (-1) * sin (log x) * (1 / x)) := by
  simp [h]

-- 3) deriv tan (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h₁ : cos (exp x * (x ^ 2 + 3) + cos (log x)) ≠ 0)
                  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x ^ 2 + 3) + cos (log x))) x
    = (exp x * (x ^ 2 + 3)
         + exp x * (2 * x)
         + (-1) * sin (log x) * (1 / x))
      / cos (exp x * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  simp [h₁, h₂]

-- 4) deriv exp (exp x * (x^2+3) + cos (log x))
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp (exp x * (x ^ 2 + 3) + cos (log x))) x
    = exp (exp x * (x ^ 2 + 3) + cos (log x))
      * (exp x * (x ^ 2 + 3)
         + exp x * (2 * x)
         + (-1) * sin (log x) * (1 / x)) := by
  simp [h]

-- 5) The big final example
example (x : ℝ)
  (h₁ : (5 * x + 2) ≠ 0)
  (h₂ : log 5 ≠ 0)
  (h₃ : x ≠ 0)
  (h₄ : (5 : ℝ) ≠ 0) :
  deriv (fun x =>
    (sin (2 * x - 1)) ^ 2
    - (log (5 * x + 2)) ^ 3
    + x ^ 3 * (log x / log 5)
  ) x
    = (2 : ℝ) * sin (2 * x - 1) * (cos (2 * x - 1) * (2 : ℝ))
      - (3 : ℝ) * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))
      + (3 : ℝ) * x ^ 2 * (log x / log 5)
      + x ^ 3 * (((1 : ℝ) / x) * log 5 / log 5 ^ 2) := by
  simp [h₁, h₂, h₃, h₄]

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (x ^ 3)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) := by
  deriv
  ring

-- 2) derivative of cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => cos ((exp x) * (x^2 + 3) + cos (log x))) x
  = - sin ((exp x) * (x^2 + 3) + cos (log x))
    * ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv
  ring

-- 3) derivative of tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h_tan_ne_zero : cos ((exp x) * (x^2 + 3) + cos (log x)) ≠ 0)
  (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => tan ((exp x) * (x^2 + 3) + cos (log x))) x
  = ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x))
    / cos ((exp x) * (x^2 + 3) + cos (log x))^2 := by
  deriv
  ring

-- 4) derivative of exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
    deriv (fun x => exp ((exp x) * (x^2 + 3) + cos (log x))) x
  = exp ((exp x) * (x^2 + 3) + cos (log x))
    * ((exp x * (x^2 + 3)) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv
  ring

-- 5) a more elaborate example
example (x : ℝ)
  (h1 : 5 * x + 2 ≠ 0) (h2 : log 5 ≠ 0) (h3 : x ≠ 0) (h4 : 5 ≠ 0) :
    deriv (fun x => (sin (2 * x - 1))^2
                   - (log (5 * x + 2))^3 * x^3 * (log x / log 5)) x
  = 2 * sin (2 * x - 1) * cos (2 * x - 1) * 2
    - (
        ((3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2)) * x^3)
         + (log (5 * x + 2))^3 * (3 * x^2))
        * (log x / log 5)
      - ((log (5 * x + 2))^3 * x^3) * ((1 / x * log 5) / log 5)
      ) := by
  deriv
  ring

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- turn `deriv (λ x, cos (…)) x` into `deriv cos (… ) * deriv (… )` etc.
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  -- now we have `(-sin (…)) * deriv (…)`
  nth_rewrite 1 [deriv_mul]
  -- the inner function is `A * B` with
  --   A = (sin (2*x - 1))^2   and   B = (log (5*x + 2))^3
  nth_rewrite 1 [deriv_pow'']
  -- differentiate A = (sin (u))^2
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_sub]
  nth_rewrite 1 [deriv_const]
  -- now differentiate B = (log (v))^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- all the pieces are in place, finish by a `ring`‐calculation
  ring
  -- finally discharge all differentiability side‐conditions
  -- cos ∘ (…)
  exact Real.differentiableAt_cos
  -- sin ∘ (…)
  exact Real.differentiableAt_sin
  -- 2*x - 1
  exact differentiableAt_id.sub differentiableAt_const
  -- (sin …) ^ 2
  exact differentiableAt_pow (Real.differentiableAt_sin)
  -- log (5*x+2)
  exact Real.differentiableAt_log h
  -- (log …) ^ 3
  exact differentiableAt_pow (Real.differentiableAt_log h)
  -- product of the two factors
  exact DifferentiableAt.mul
    (differentiableAt_pow (Real.differentiableAt_sin))
    (differentiableAt_pow (Real.differentiableAt_log h))

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  -- `dsimp [deriv]` unfolds `deriv f x = _`, then `simp [h]` discharges all
  -- the individual chain‐rule, product‐rule, etc., lemmas.
  dsimp only [deriv]
  simp [h]

-- 2) d/dx cos((eˣ)*(x²+3) + cos(log x))
example {x : ℝ} (h : x ≠ 0) :
  deriv (fun x => cos ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = - sin ((exp x) * (x ^ 2 + 3) + cos (log x))
      * ((exp x * (x ^ 2 + 3)) + exp x * (2 * x) - sin (log x) / x) := by
  dsimp only [deriv]
  simp [h]

-- 3) d/dx tan((eˣ)*(x²+3) + cos(log x))
example {x : ℝ}
  (h_cos : cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ≠ 0)
  (h :   x ≠ 0) :
  deriv (fun x => tan ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = ((exp x * (x ^ 2 + 3)) + exp x * (2 * x) - sin (log x) / x)
      / cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ^ 2 := by
  dsimp only [deriv]
  simp [h_cos, h]

-- 4) d/dx exp((eˣ)*(x²+3) + cos(log x))
example {x : ℝ} (h : x ≠ 0) :
  deriv (fun x => exp ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = exp ((exp x) * (x ^ 2 + 3) + cos (log x))
      * ((exp x * (x ^ 2 + 3)) + exp x * (2 * x) - sin (log x) / x) := by
  dsimp only [deriv]
  simp [h]

-- 5) A more complicated sum of two terms
example {x : ℝ} (h : (5 * x + 2) ≠ 0) :
  deriv (fun x =>
    (sin (2 * x - 1) ^ 2) * log (5 * x + 2) ^ 3 + exp x * (x ^ 2 + 3)) x
    = 2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2) * log (5 * x + 2) ^ 3
      + sin (2 * x - 1) ^ 2 * (3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2)))
      + exp x * (x ^ 2 + 3)
      + exp x * (2 * x) := by
  dsimp only [deriv]
  simp [h]

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_25)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25))

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  simp [h]; ring

-- 2) deriv (λ x ↦ cos (…)) x = …
example {x : ℝ} (h : x ≠ 0) :
    deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
  = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]; ring

-- 3) deriv (λ x ↦ tan (…)) x = …    (assume cos (…) ≠ 0)
example {x : ℝ}
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
  = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x)
      / (cos (exp x * (x^2 + 3) + cos (log x))) ^ 2 := by
  simp [h₁, h₂]; ring

-- 4) deriv (λ x ↦ exp (…)) x = …
example {x : ℝ} (h : x ≠ 0) :
    deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
  = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) / x) := by
  simp [h]; ring

-- 5) more involved product of three factors
example {x : ℝ}
  (h₁ : (5 * x + 2) ≠ 0)
  (h₂ : x ≠ 0) :
    deriv (fun x => sin (2 * x - 1) ^ 2
                    * log (5 * x + 2) ^ 3
                    * cos (log x)) x
  = (
      (2 * sin (2 * x - 1) * (2 * cos (2 * x - 1)) * log (5 * x + 2) ^ 3
       + sin (2 * x - 1) ^ 2 * 3 * log (5 * x + 2) ^ 2 * (5 / (5 * x + 2)))
      * cos (log x)
    ) + sin (2 * x - 1) ^ 2 * log (5 * x + 2) ^ 3 * (-sin (log x) / x) := by
  simp [h₁, h₂]; ring

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  -- step 1: split the outer “+”
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  -- step 2: handle the first summand (sin^2 * log^3)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  -- step 3: handle the second term inside that product (sin^2 * deriv log^3)
  nth_rewrite 1 [deriv_add]          -- re–split the inner “+” in 2*x - 1, but really this is the same id/const
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- now collect and clean up
  ring
  -- finally discharge all the differentiability‐at obligations
  all_goals
    try
      exact Real.differentiableAt_sin
    <|> try
      exact Real.differentiableAt_cos
    <|> try
      exact Real.differentiableAt_log (h_log_ne_zero_15)
    <|> try
      exact differentiableAt_id
    <|> try
      exact differentiableAt_const _
    <|> try
      exact DifferentiableAt.add?  -- etc, if you need to build up from the above

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- split the top‐level `+`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]

  -- first summand: (sin (2*x-1))^2 * (log (5*x+2))^3
  nth_rewrite 1 [deriv_mul]
  -- power‐2
  nth_rewrite 1 [deriv_pow'']
  -- inner = sin (2*x -1)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [Real.deriv_sin]
  -- power‐3 on the log
  nth_rewrite 1 [deriv_pow'']
  -- inner = log (5*x +2)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- second summand: x^3 * (log x / log 5)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]
  -- deriv x^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  -- deriv (log x / log 5) = deriv (log x * (log 5)⁻¹)
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_const]

  -- finish the algebra
  ring

  -- now discharge all the differentiability‐at proofs
  -- for sin, cos, log, powers, products, sums, constants, id
  exact differentiableAt_sin
  exact differentiableAt.cos (differentiableAt_id)
  exact differentiableAt.log (h_log_ne_zero_30)
  exact differentiableAt_id
  exact differentiableAt_const
  exact differentiableAt_pow _ 
  exact differentiableAt_const
  exact differentiableAt_mul (differentiableAt_pow _) (differentiableAt_const)
  exact differentiableAt_pow _
  exact differentiableAt_const
  exact differentiableAt_mul (differentiableAt.pow 1 (differentiableAt_log)) (differentiableAt_const)
  exact differentiableAt_add
  exact differentiableAt_mul (differentiableAt_pow _) 
                             (differentiableAt_pow _)
  exact differentiableAt_add
  exact differentiableAt_mul (differentiableAt_pow _) 
                             (differentiableAt_add (differentiableAt_log _) (differentiableAt_const))

example (x: ℝ)  (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- expand the top‐level multiplication
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_mul]        -- (f * g)' = f' * g + f * g'
  nth_rewrite 1 [deriv_mul]        -- now split off the next * x^3
  nth_rewrite 1 [deriv_mul]        -- now split off the next * (log x / log 5)
  nth_rewrite 1 [deriv_mul]        -- finally split off the sin² * log³ part

  -- expand (sin (2x-1))^2
  nth_rewrite 1 [deriv_pow'']      -- (u^2)' = 2*u * u'
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- expand log (5x+2)^3
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- expand (log x / log 5)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  ring

  -- now supply all the differentiability hypotheses
  exact Real.differentiableAt_sin
  exact DifferentiableAt.add (differentiableAt_id) (differentiableAt_const _)
  exact Real.differentiableAt_sin
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_log (h₁)
  exact differentiableAt_const _
  exact differentiableAt_id
  exact differentiableAt_pow 3
  exact Real.differentiableAt_log (h₁)
  exact differentiableAt_const _
  exact differentiableAt_id
  exact differentiableAt_pow 2
  exact Real.differentiableAt_log (h₃)
  exact differentiableAt_const _
  exact differentiableAt_id
  exact differentiableAt_pow 3
  exact Real.differentiableAt_log (h₃)
  exact differentiableAt_const _
  exact differentiableAt_const _

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
  -- unfold sin ∘ (…)
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- now the division rule
  nth_rewrite 1 [deriv_div]
  -- two applications of the pow rule
  nth_rewrite 2 [deriv_pow'']
  -- go under the two remaining compositions
  -- for (sin (2*x - 1))^2
  nth_rewrite 4 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_const]
  -- for log (5*x + 2)^3
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  -- clean up the algebra
  ring
  -- discharge differentiability goals
  exact Real.differentiableAt_sin
  exact Real.differentiableAt_div
    (Real.differentiableAt_pow
      (DifferentiableAt.comp Real.differentiableAt_sin
        (DifferentiableAt.add
          (DifferentiableAt.mul (differentiableAt_const (2:ℝ)) differentiableAt_id)
          (differentiableAt_const (-(1:ℝ))))) 2)
    (h_div_ne_zero_3)
  exact Real.differentiableAt_pow (Real.differentiableAt_log (h_log_ne_zero_16)) 3
  exact Real.differentiableAt_log (h_log_ne_zero_16)
  exact DifferentiableAt.add
    (DifferentiableAt.mul (differentiableAt_const (5:ℝ)) differentiableAt_id)
    (differentiableAt_const (2:ℝ))

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
  -- all the heavy rewriting is packed into the following simp call
  simp [h_log_ne_zero]

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
  deriv (fun x ↦ cos ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = - sin ((exp x) * (x ^ 2 + 3) + cos (log x))
      * ( (exp x * (x ^ 2 + 3)) + (exp x * (2 * x)) - sin (log x) * (1 / x) ) :=
by
  simp [h_log_ne_zero]

example (x : ℝ) 
  (h_tan_ne_zero : cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ≠ 0)
  (h_log_ne_zero : x ≠ 0) :
  deriv (fun x ↦ tan ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = ( (exp x * (x ^ 2 + 3)) + (exp x * (2 * x)) - sin (log x) * (1 / x) )
      / cos ((exp x) * (x ^ 2 + 3) + cos (log x)) ^ 2 :=
by
  simp [h_tan_ne_zero, h_log_ne_zero]

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
  deriv (fun x ↦ exp ((exp x) * (x ^ 2 + 3) + cos (log x))) x
    = exp ((exp x) * (x ^ 2 + 3) + cos (log x))
      * ( (exp x * (x ^ 2 + 3)) + (exp x * (2 * x)) - sin (log x) * (1 / x) ) :=
by
  simp [h_log_ne_zero]

example (x : ℝ)
  (h_div_ne_zero : (log (5 * x + 2)) ^ 3 ≠ 0)
  (h_log_ne_zero : 5 * x + 2 ≠ 0) :
  deriv (fun x ↦ cos ((sin (2 * x - 1)) ^ 2 / (log (5 * x + 2)) ^ 3)) x
    = - sin ((sin (2 * x - 1)) ^ 2 / (log (5 * x + 2)) ^ 3)
      * ( ((2 * sin (2 * x - 1) * (cos (2 * x - 1) * 2)) * (log (5 * x + 2)) ^ 3
          - (sin (2 * x - 1)) ^ 2 * (3 * (log (5 * x + 2)) ^ 2 * (5 / (5 * x + 2))))
        / (log (5 * x + 2)) ^ 6 ) :=
by
  simp [h_div_ne_zero, h_log_ne_zero]

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 / (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) / Real.cos (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_tan]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_tan.mpr (h_tan_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) := by
  simp [deriv_comp, deriv_add, deriv_mul, deriv_pow, deriv_exp, deriv_sin, deriv_cos, deriv_log, h_log]
  ring

-- 2) d/dx cos (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h_log : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) * (1 / x)) := by
  simp [deriv_comp, deriv_add, deriv_mul, deriv_pow, deriv_exp, deriv_cos, deriv_sin, deriv_log, h_log]
  ring

-- 3) d/dx tan (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ)
  (h_tan : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h_log : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [deriv_comp, deriv_add, deriv_mul, deriv_pow, deriv_exp, deriv_tan, deriv_cos, deriv_log,
        h_log, h_tan]
  ring

-- 4) d/dx exp (exp x * (x^2 + 3) + cos (log x))
example (x : ℝ) (h_log : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + 2 * x * exp x - sin (log x) * (1 / x)) := by
  simp [deriv_comp, deriv_add, deriv_mul, deriv_pow, deriv_exp, deriv_cos, deriv_log, h_log]
  ring

-- 5) d/dx exp ((sin (2*x - 1))^2 / (log (5*x + 2))^3)
example (x : ℝ)
  (h_div : (log (5*x + 2)) ^ 3 ≠ 0)
  (h_log : 5*x + 2 ≠ 0) :
  deriv (fun x => exp ((sin (2*x - 1))^2 / (log (5*x + 2))^3)) x
    = exp ((sin (2*x - 1))^2 / (log (5*x + 2))^3)
      * (((2 * sin (2*x - 1) * (2 * cos (2*x - 1))) * (log (5*x + 2))^3
         - (sin (2*x - 1))^2 * (3 * (log (5*x + 2))^2 * (5 / (5*x + 2))))
        / (log (5*x + 2))^6) := by
  simp [ deriv_comp, deriv_exp, deriv_div, deriv_pow, deriv_add, deriv_mul,
         deriv_sin, deriv_cos, deriv_log,
         h_div, h_log ]
  ring

example (x: ℝ)  (h_log_ne_zero_1: ((Real.sin (((2:ℝ) * x - (1:ℝ)))) ^ 2 / (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) / (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_3, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact h_div_ne_zero_3
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (h_div_ne_zero_3)

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
  derivative
  ring

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * Real.exp x) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
  simp [deriv_sin, deriv_cos, deriv_log, deriv_exp,
        deriv_mul, deriv_pow, deriv_add, deriv_const, deriv_id] 
  ring

-- 2) cos ( … )
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => cos ((exp x)*(x^2 + 3) + cos (log x))) x
  = - sin ((exp x)*(x^2 + 3) + cos (log x)) *
      ((exp x)*(x^2 + 3) + exp x*(2*x) - sin (log x)*(1/x)) := by
  simp [deriv_cos, deriv_sin, deriv_log, deriv_exp,
        deriv_mul, deriv_pow, deriv_add, deriv_const, deriv_id] 
  ring

-- 3) tan ( … )
example (x : ℝ)
  (h1 : cos ((exp x)*(x^2 + 3) + cos (log x)) ≠ 0)
  (h2 : x ≠ 0) :
    deriv (fun x => tan ((exp x)*(x^2 + 3) + cos (log x))) x
  = ((exp x)*(x^2 + 3) + exp x*(2*x) - sin (log x)*(1/x))
      / (cos ((exp x)*(x^2 + 3) + cos (log x)))^2 := by
  simp [deriv_tan, deriv_cos, deriv_sin, deriv_log, deriv_exp,
        deriv_mul, deriv_pow, deriv_add, deriv_const, deriv_id]
  ring

-- 4) exp ( … )
example (x : ℝ) (h : x ≠ 0) :
    deriv (fun x => exp ((exp x)*(x^2 + 3) + cos (log x))) x
  = exp ((exp x)*(x^2 + 3) + cos (log x)) *
      ((exp x)*(x^2 + 3) + exp x*(2*x) - sin (log x)*(1/x)) := by
  simp [deriv_exp, deriv_cos, deriv_log, deriv_mul,
        deriv_pow, deriv_add, deriv_const, deriv_id]
  ring

-- 5) the big quotient‐product
example (x : ℝ)
  (h1 : (log ((5:ℝ)*x + 2))^3 ≠ 0)
  (h2 : (5:ℝ)*x + 2 ≠ 0) :
  deriv (fun x => (sin (2*x - 1))^2
                   / (log (5*x + 2))^3
                   * exp x
                   * (x^2 + 3)) x
  = (((2:ℝ)*sin (2*x - 1)*cos (2*x - 1)*2) * (log (5*x + 2))^3
     - sin (2*x - 1)^2 * (3*(log (5*x + 2))^2 * (5/(5*x + 2))))
     / (log (5*x + 2))^6
    * (exp x) * (x^2 + 3)
  + (sin (2*x - 1)^2
     / (log (5*x + 2))^3 * exp x) * (2*x) := by
  simp [deriv_div, deriv_mul, deriv_pow, deriv_log, deriv_sin, deriv_cos,
        deriv_exp, deriv_const, deriv_id, deriv_add, deriv_sub]
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  -- expand definitions and apply the sum‐, quotient‐, power‐, log‐,
  -- mul‐ and sin‐derivative rules in sequence
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [Real.deriv_sin]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 2 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_cos]
  nth_rewrite 1 [Real.deriv_log]
  ring
  -- now discharge all the differentiability‐at arguments
  exact Real.differentiableAt_sin
  exact Real.differentiableAt_cos
  exact Real.differentiableAt_log (h_log_ne_zero_15)
  exact differentiableAt_id
  exact differentiableAt_const _
  exact Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id
  exact Real.differentiableAt_log (h_log_ne_zero_25)
  exact DifferentiableAt.pow (Real.differentiableAt_log (Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id)) _
  exact DifferentiableAt.pow (Real.differentiableAt_log (Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id)) _
  exact DifferentiableAt.div
    (DifferentiableAt.pow (Real.differentiableAt_log (Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id)) _)
    (DifferentiableAt.pow (Real.differentiableAt_log (Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id)) _)
  exact DifferentiableAt.add
    (DifferentiableAt.div
      (DifferentiableAt.pow (Real.differentiableAt_log (Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id)) _)
      (DifferentiableAt.pow (Real.differentiableAt_log (Real.differentiableAt_mul (differentiableAt_const _) differentiableAt_id)) _))
    (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_25)))

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_log_ne_zero_25: x ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * Real.cos (Real.log x)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
  -- expose the definitions and derivatives
  dsimp only
  -- apply all the `deriv_*` lemmas, discharging side‐conditions by our hypotheses
  simp [h_div_ne_zero_2, h_log_ne_zero_15, h_log_ne_zero_25]
  -- finish the remaining algebra
  ring

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_2, h_log_ne_zero_15]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_15)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _
exact h_div_ne_zero_2
exact DifferentiableAt.div (DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_15)) _) (h_div_ne_zero_2)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_2: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_15: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 + (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- expand the definition of `deriv`, apply the sum‐, quotient‐, power‐,
  -- log‐, mul‐, const‐ and sin/cos‐derivative lemmas
  simp only [Function.comp_def,
    deriv_add, deriv_div, deriv_pow'', deriv_log, deriv_mul,
    deriv_id'', deriv_const, deriv_sub, Real.deriv_sin, Real.deriv_cos]
  -- do the rational/algebraic cleanup
  ring
  -- discharge all the nonzero denom‐hypotheses
  field_simp [h₁, h₂, h₃, h₄, h₅]

example (x: ℝ)  (h_div_ne_zero_3: (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3 ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) (h_div_ne_zero_29: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_30: x ≠ 0) (h_log_ne_zero_32: (5:ℝ) ≠ 0): deriv (λ x ↦ (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2 / (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (x ^ 3) * (Real.log x / Real.log (5:ℝ))) x = (((((((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) - (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2) * (x ^ 3)) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((3:ℝ) * x ^ 2))) * (Real.log x / Real.log (5:ℝ))) + ((Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2 / Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * (x ^ 3)) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) := by
  -- 1) get rid of `Function.comp_def` in the goal
  dsimp only [Function.comp_def]
  -- 2) simp all the derivative‐lemmas, using your nonzero hypotheses
  simp_all [h₁, h₂, h₃, h₄, h₅]
  -- 3) finish the algebra
  ring

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((x ^ 3) * (Real.log (x) / Real.log ((5:ℝ))) + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
  derivation
  ring

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_log_ne_zero_1: ((x ^ 3) * (Real.log (x) / Real.log ((5:ℝ))) + (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) / ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) + Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_9, h_log_ne_zero_10, h_log_ne_zero_12, h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact Real.differentiableAt_log (h_log_ne_zero_12)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)
exact h_div_ne_zero_9
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_8: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_9: x ≠ 0) (h_log_ne_zero_11: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
  simp [h]

-- 2) deriv of cos (…)
example (x : ℝ) (h : x ≠ 0) :
    deriv (λ x => cos (exp x * (x^2 + 3) + cos (log x))) x =
      - sin (exp x * (x^2 + 3) + cos (log x)) *
        (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 3) deriv of tan (…), need also cos ≠ 0
example (x : ℝ)
  (h1 : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h2 : x ≠ 0) :
    deriv (λ x => tan (exp x * (x^2 + 3) + cos (log x))) x =
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) /
      cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  simp [h1, h2]

-- 4) deriv of exp (…)
example (x : ℝ) (h : x ≠ 0) :
    deriv (λ x => exp (exp x * (x^2 + 3) + cos (log x))) x =
      exp (exp x * (x^2 + 3) + cos (log x)) *
      (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  simp [h]

-- 5) the big example
example (x : ℝ)
  (h₁ : log 5 ≠ 0) (h₂ : x ≠ 0) (h₃ : 5 ≠ 0) (h₄ : 5 * x + 2 ≠ 0) :
    deriv (λ x =>
      x^3 * (log x / log 5) +
      (log (5 * x + 2))^3 * exp x * (x^2 + 3)
    ) x =
    3 * x^2 * (log x / log 5)
    + x^3 * ((1 / x * log 5) / log 5 ^ 2)
    + (3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2)) * exp x
       + (log (5 * x + 2))^3 * exp x) * (x^2 + 3)
    + (log (5 * x + 2))^3 * exp x * (2 * x) := by
  simp [h₁, h₂, h₃, h₄]

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
  simp [ deriv_add
       , deriv_mul
       , deriv_div
       , deriv_pow
       , deriv_log
       , deriv_cos
       , deriv_id
       , h_div_ne_zero_9
       , h_log_ne_zero_10
       , h_log_ne_zero_16
       ]
  ring

example (x: ℝ)  (h_div_ne_zero_8: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_9: x ≠ 0) (h_log_ne_zero_11: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x))) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
field_simp [h_div_ne_zero_8, h_log_ne_zero_9, h_log_ne_zero_11, h_log_ne_zero_16, h_log_ne_zero_9]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_9))
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)
exact h_div_ne_zero_8
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_9)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)) (h_div_ne_zero_8)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_9)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)) (h_div_ne_zero_8))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_9)))

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
  derivative λ x => f1 x
  · simp only [mul_comm, mul_left_comm] -- clean up the ordering of multiplications
  ring

-- 2) g(x) = cos (exp x * (x^2 + 3) + cos (log x))
def f2 (x : ℝ) := cos (exp x * (x^2 + 3) + cos (log x))

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
  deriv f2 x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  derivative λ x => f2 x
  · ring

-- 3) h(x) = tan (exp x * (x^2 + 3) + cos (log x))
def f3 (x : ℝ) := tan (exp x * (x^2 + 3) + cos (log x))

example (x : ℝ) (h_tan_ne_zero : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0) 
               (h_log_ne_zero : x ≠ 0) :
  deriv f3 x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  derivative λ x => f3 x
  · ring

-- 4) k(x) = exp (exp x * (x^2 + 3) + cos (log x))
def f4 (x : ℝ) := exp (exp x * (x^2 + 3) + cos (log x))

example (x : ℝ) (h_log_ne_zero : x ≠ 0) :
  deriv f4 x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  derivative λ x => f4 x
  · ring

-- 5) m(x) = x^3 * (log x / log 5) + log (5*x + 2)^3 + sin (2*x - 1)^2
def f5 (x : ℝ) := x^3 * (log x / log 5)
                + (log (5*x + 2))^3
                + (sin (2*x - 1))^2

example (x : ℝ)
  (h_div_ne_zero : log 5 ≠ 0)
  (h_log_ne_zero : x ≠ 0)
  (h_log_ne_zero' : (5*x + 2) ≠ 0) :
  deriv f5 x
    = (3 * x^2) * (log x / log 5)
      + x^3 * (((1 / x) * log 5) / (log 5)^2)
      + 3 * (log (5*x + 2))^2 * (5 / (5*x + 2))
      + 2 * sin (2*x - 1) * (cos (2*x - 1) * 2) := by
  derivative λ x => f5 x
  · ring

example (x: ℝ)  (h_div_ne_zero_8: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_9: x ≠ 0) (h_log_ne_zero_11: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) + (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) + (((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)))) := by
  simp [ deriv_add
       , deriv_mul
       , deriv_div
       , Real.deriv_pow
       , Real.deriv_log h_log_ne_zero_9
       , Real.deriv_log h_div_ne_zero_8
       , Real.deriv_log h_log_ne_zero_16
       , Real.deriv_sin
       , Real.deriv_cos ]

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((x ^ 3) * (Real.log (x) / Real.log ((5:ℝ))) - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
  -- the `deriv` tactic does all the chain‐rule bookkeeping
  deriv
  -- and this just cleans up the numerical coefficients and powers
  ring

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) := by
  -- 1) build the derivative of the *inside* 
  have D_inside : 
    HasDerivAt 
      (fun y => (y ^ 3) * (log y / log 5) 
                - (log ((5 : ℝ) * y + 2)) ^ 3)
      ( ((3 : ℝ) * x ^ 2) * (log x / log 5)
        + x ^ 3 * ((1 / x * log 5) / (log 5) ^ 2)
        - (3 : ℝ) * (log ((5 : ℝ) * x + 2)) ^ 2 
                   * (5 : ℝ) / ((5 : ℝ) * x + 2)) 
      x := by
    -- derivative of (y^3) * (log y / log 5)
    apply hasDerivAt.sub
    · apply hasDerivAt.mul
      · -- y ↦ y^3
        have := (hasDerivAt_pow 3 (hasDerivAt_id x)).2
        exact this
      · -- y ↦ log y / log 5
        apply hasDerivAt.div
        · exact hasDerivAt_log h_x
        · exact hasDerivAt_const _ _
    · -- derivative of (log((5*y + 2)))^3
      apply hasDerivAt_pow 3
      -- composition: y ↦ log((5*y+2)), then raise to 3
      exact hasDerivAt.comp 
        (hasDerivAt_log h_linear) 
        (hasDerivAt_id x)

  -- 2) now apply the chain rule for exp ◦ inside
  exact (deriv_exp.comp x D_inside).2.1

example (x: ℝ)  (h_log_ne_zero_1: ((x ^ 3) * (Real.log (x) / Real.log ((5:ℝ))) - (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) / ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) - Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_9, h_log_ne_zero_10, h_log_ne_zero_12, h_log_ne_zero_16]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact Real.differentiableAt_exp
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact Real.differentiableAt_log (h_log_ne_zero_12)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)
exact h_div_ne_zero_9
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)
exact DifferentiableAt.mul (Real.differentiableAt_exp) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_8: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_9: x ≠ 0) (h_log_ne_zero_11: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.exp x) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [Real.deriv_exp]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
ring
exact differentiableAt_id
exact differentiableAt_pow _
exact differentiableAt_const _
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_exp
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _) (Real.differentiableAt_exp)
exact DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _)
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)
exact h_div_ne_zero_8
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_9)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)) (h_div_ne_zero_8)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_9)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)) (h_div_ne_zero_8))
exact DifferentiableAt.mul (DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _) (Real.differentiableAt_exp)) (DifferentiableAt.add (differentiableAt_pow _) (differentiableAt_const _))

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + Real.cos (Real.log x)) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x) := by
 simp [h]

-- 2) derivative of cos (…)
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => cos ((exp x * (x^2 + 3)) + cos (log x))) x =
    - sin ((exp x * (x^2 + 3)) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x) :=
by simp [h]

-- 3) derivative of tan (…), assuming the inner cos ≠ 0
example (x : ℝ)
  (h1 : x ≠ 0)
  (h2 : cos ((exp x * (x^2 + 3)) + cos (log x)) ≠ 0) :
  deriv (fun x => tan ((exp x * (x^2 + 3)) + cos (log x))) x =
    (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x)
      / cos ((exp x * (x^2 + 3)) + cos (log x))^2 :=
by simp [h1, h2]

-- 4) derivative of exp (…)
example (x : ℝ) (h : x ≠ 0) :
  deriv (fun x => exp ((exp x * (x^2 + 3)) + cos (log x))) x =
    exp ((exp x * (x^2 + 3)) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2*x) - sin (log x) / x) :=
by simp [h]

-- 5) the more complicated one with log 5 and a subtraction of (log (…) )^3
example (x : ℝ)
  (h5 : log (5 : ℝ) ≠ 0)
  (h₀ : x ≠ 0)
  (h' : (5 : ℝ) * x + 2 ≠ 0) :
  deriv (fun x => x^3 * (log x / log 5)
                - (log ((5:ℝ) * x + 2))^3
                + cos (log x)) x =
    3 * x^2   * (log x / log 5)
  + x^3       * ((1 / x * log 5) / (log 5)^2)
  - 3 * (log (5*x + 2))^2 * (5   / (5*x + 2))
  - sin (log x) / x :=
by simp [h5, h₀, h']

example (x: ℝ)  (h_div_ne_zero_8: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_9: x ≠ 0) (h_log_ne_zero_11: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0) : deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * Real.cos (Real.log x)) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * Real.cos (Real.log x)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((-1:ℝ) * Real.sin (Real.log x) * ((1:ℝ) / x)))) := by
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [Real.deriv_log]
ring
exact Real.differentiableAt_cos
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_9))
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_9)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)
exact h_div_ne_zero_8
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_9)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)) (h_div_ne_zero_8)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_9)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_11)) (h_div_ne_zero_8))
exact DifferentiableAt.mul (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _) (DifferentiableAt.cos (Real.differentiableAt_log (h_log_ne_zero_9)))

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) + (2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ)) := by
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 3 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_sin]
nth_rewrite 1 [deriv_sub]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_9, h_log_ne_zero_10, h_log_ne_zero_12, h_log_ne_zero_16]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_sin
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_16)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)
exact Real.differentiableAt_log (h_log_ne_zero_12)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_10)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)
exact h_div_ne_zero_9
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _
exact DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_10)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_12)) (h_div_ne_zero_9))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_16)) _)
exact DifferentiableAt.pow (DifferentiableAt.sin (DifferentiableAt.sub (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _))) _

example (x: ℝ)  (h_div_ne_zero_8: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_9: x ≠ 0) (h_log_ne_zero_11: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) - (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.sin ((2:ℝ) * x - (1:ℝ))) ^ 2) x = (((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2)) - ((((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))) * (Real.sin ((2:ℝ) * x - (1:ℝ)) ^ 2)) + ((Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((2:ℝ) * Real.sin ((2:ℝ) * x - (1:ℝ)) * (Real.cos ((2:ℝ) * x - (1:ℝ)) * (2:ℝ))))) := by
  deriv
  ring

-- 2) cos
example (x : ℝ) (h₁ : x ≠ 0) :
  deriv (fun x => cos (exp x * (x^2 + 3) + cos (log x))) x
    = - sin (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv
  ring

-- 3) tan
example (x : ℝ)
  (h₁ : cos (exp x * (x^2 + 3) + cos (log x)) ≠ 0)
  (h₂ : x ≠ 0) :
  deriv (fun x => tan (exp x * (x^2 + 3) + cos (log x))) x
    = (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x))
      / cos (exp x * (x^2 + 3) + cos (log x)) ^ 2 := by
  deriv
  ring

-- 4) exp
example (x : ℝ) (h₁ : x ≠ 0) :
  deriv (fun x => exp (exp x * (x^2 + 3) + cos (log x))) x
    = exp (exp x * (x^2 + 3) + cos (log x))
      * (exp x * (x^2 + 3) + exp x * (2 * x) - sin (log x) * (1 / x)) := by
  deriv
  ring

-- 5) the big one
example (x : ℝ)
  (h₁ : log 5 ≠ 0) (h₂ : x ≠ 0) (h₃ : (5 : ℝ) ≠ 0) (h₄ : 5 * x + 2 ≠ 0) :
  deriv (fun x =>
    x^3 * (log x / log 5) -
    (log (5 * x + 2)) ^ 3 * (sin (2 * x - 1)) ^ 2
  ) x
    = 3 * x^2 * (log x / log 5)
      + x^3 * (((1 / x) * log 5) / log 5^2)
      - ( 3 * (log (5 * x + 2))^2 * (5 / (5 * x + 2)) * (sin (2 * x - 1))^2
          + (log (5 * x + 2))^3 * (2 * sin (2 * x - 1) * (2 * cos (2 * x - 1))) ) := by
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.sin ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- 1) peel off the outer `sin`
  nth_rewrite 1 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_sin]
  -- 2) now differentiate a triple product f * g * h
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_mul]
  -- 3) in the third factor differentiate (log(5x+2))^3
  nth_rewrite 1 [Real.deriv_pow]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']
  -- 4) back to the second factor differentiate (x^3) * (log x / log 5)
  nth_rewrite 2 [← comp_def]
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [Real.deriv_pow]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]
  -- 5) clean up
  ring
  -- 6) the differentiability proofs
  exact Real.differentiableAt_sin
  exact DifferentiableAt.mul
    (DifferentiableAt.mul
      (Real.differentiableAt_pow (by norm_num : DifferentiableAt (fun y : ℝ => y ^ 3) _))
      (DifferentiableAt.div
        (Real.differentiableAt_log h_log_ne_zero_11)
        (differentiableAt_const _)))
    (DifferentiableAt.pow (Real.differentiableAt_log h_log_ne_zero_17) 3)
  exact Real.differentiableAt_pow (by norm_num : DifferentiableAt (fun y : ℝ => y ^ 3) _)
  exact DifferentiableAt.div
    (Real.differentiableAt_log h_log_ne_zero_11)
    (differentiableAt_const _)
  exact Real.differentiableAt_log h_log_ne_zero_11
  exact differentiableAt_const (5:ℝ)
  exact Real.differentiableAt_log h_log_ne_zero_17
  exact differentiableAt_const (5:ℝ)
  exact differentiableAt_id
  exact differentiableAt_const (2:ℝ)

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = (-1:ℝ) * Real.sin ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_cos]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_cos
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_tan_ne_zero_1: Real.cos ((x ^ 3) * (Real.log (x) / Real.log ((5:ℝ))) * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.tan ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / Real.cos ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) ^ 2 := by
  deriv
  ring

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.exp ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = Real.exp ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) := by
  -- `simp` knows `deriv (fun x => exp …) = exp … * (deriv of the exponent)`
  -- and it also knows all the derivation rules for `*`, `^`, `log` etc.,
  -- as well as discharging the `DifferentiableAt` side‐conditions.
  simp [h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]

example (x: ℝ)  (h_log_ne_zero_1: ((x ^ 3) * (Real.log (x) / Real.log ((5:ℝ))) * (Real.log (((5:ℝ) * x + (2:ℝ)))) ^ 3) ≠ 0) (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ Real.log ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3)) x = ((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) / ((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) := by
nth_rewrite 1 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_div]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_pow'']
nth_rewrite 2 [← Function.comp_def]
nth_rewrite 1 [deriv_comp]
nth_rewrite 1 [Real.deriv_log]
nth_rewrite 1 [deriv_add]
nth_rewrite 1 [deriv_mul]
nth_rewrite 1 [deriv_const]
nth_rewrite 1 [deriv_id'']
nth_rewrite 1 [deriv_const]
field_simp [h_log_ne_zero_1, h_div_ne_zero_10, h_log_ne_zero_11, h_log_ne_zero_13, h_log_ne_zero_17]
ring
exact differentiableAt_const _
exact differentiableAt_id
exact DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_17)
exact DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)
exact DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)
exact Real.differentiableAt_log (h_log_ne_zero_13)
exact differentiableAt_const _
exact Real.differentiableAt_log (h_log_ne_zero_11)
exact DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)
exact h_div_ne_zero_10
exact differentiableAt_id
exact differentiableAt_pow _
exact DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10)
exact DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))
exact DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _
exact Real.differentiableAt_log (h_log_ne_zero_1)
exact DifferentiableAt.mul (DifferentiableAt.mul (differentiableAt_pow _) (DifferentiableAt.div (Real.differentiableAt_log (h_log_ne_zero_11)) (DifferentiableAt.log (differentiableAt_const _) (h_log_ne_zero_13)) (h_div_ne_zero_10))) (DifferentiableAt.pow (DifferentiableAt.log (DifferentiableAt.add (DifferentiableAt.mul (differentiableAt_const _) (differentiableAt_id)) (differentiableAt_const _)) (h_log_ne_zero_17)) _)

example (x: ℝ)  (h_div_ne_zero_9: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_10: x ≠ 0) (h_log_ne_zero_12: (5:ℝ) ≠ 0) (h_log_ne_zero_16: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 + (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ))))) + (Real.exp x * (x ^ 2 + (3:ℝ))) + (Real.exp x * ((2:ℝ) * x)) := by
by deriv

example (x: ℝ)  (h_div_ne_zero_10: Real.log ((5:ℝ)) ≠ 0) (h_log_ne_zero_11: x ≠ 0) (h_log_ne_zero_13: (5:ℝ) ≠ 0) (h_log_ne_zero_17: ((5:ℝ) * x + (2:ℝ)) ≠ 0): deriv (λ x ↦ (x ^ 3) * (Real.log x / Real.log (5:ℝ)) * (Real.log ((5:ℝ) * x + (2:ℝ))) ^ 3 * (Real.exp x) * (x ^ 2 + (3:ℝ))) x = (((((((((3:ℝ) * x ^ 2) * (Real.log x / Real.log (5:ℝ))) + ((x ^ 3) * ((((1:ℝ) / x) * Real.log (5:ℝ)) / Real.log (5:ℝ) ^ 2))) * (Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3)) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ))) * ((3:ℝ) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 2 * ((5:ℝ) / ((5:ℝ) * x + (2:ℝ)))))) * Real.exp x) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3) * Real.exp x)) * (x ^ 2 + (3:ℝ))) + (((x ^ 3) * (Real.log x / Real.log (5:ℝ)) * Real.log ((5:ℝ) * x + (2:ℝ)) ^ 3 * Real.exp x) * ((2:ℝ) * x)) := by
  -- reduce `deriv (λ x => … x) = deriv (… ∘ id) x` so we can start `deriv_mul`
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [deriv_comp]

  -- five‐fold product rule: first split off `(x^2+3)` 
  nth_rewrite 1 [deriv_mul]
  -- next split off `exp x`
  nth_rewrite 1 [deriv_mul]
  -- next split off `(log (5*x+2))^3`
  nth_rewrite 1 [deriv_mul]
  -- next split off `(log x / log 5)`
  nth_rewrite 1 [deriv_mul]
  -- finally split off `x^3`
  nth_rewrite 1 [deriv_mul]

  -- now compute the easy derivatives one by one
  -- deriv (x^2 + 3) = 2*x
  nth_rewrite 1 [deriv_add]
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- deriv exp x = exp x
  nth_rewrite 1 [Real.deriv_exp]

  -- deriv ((log (5*x+2))^3) = 3*(log …)^2 * (deriv (log (5*x+2)))
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_comp]
  nth_rewrite 1 [← Function.comp_def]
  nth_rewrite 1 [Real.deriv_log]
  nth_rewrite 1 [deriv_mul]
  nth_rewrite 1 [deriv_const]
  nth_rewrite 1 [deriv_id'']

  -- deriv (log x / log 5) = (1/x * log 5) / (log 5)^2
  nth_rewrite 1 [deriv_div]
  nth_rewrite 1 [deriv_id'']
  nth_rewrite 1 [deriv_const]

  -- deriv x^3 = 3*x^2
  nth_rewrite 1 [deriv_pow'']
  nth_rewrite 1 [deriv_id'']

  -- everything is now a big sum of products of known numbers, logs, etc.
  ring

  -- finally the differentiability‐at proofs in the same order as above:
  -- id, pow, const, log, log, exp, pow, comp(log), mul, id, const, mul, ...
  exact differentiableAt_pow (differentiableAt_id) (by decide : (3:ℝ) ≠ 0)
  exact differentiableAt_id
  exact differentiableAt_const _
  exact differentiableAt_log (h_x : x ≠ 0)
  exact differentiableAt_const _
  exact differentiableAt_const _
  exact differentiableAt_exp
  exact DifferentiableAt.pow' (differentiableAt_log (h_lin : (5*x + 2) ≠ 0)) 3
  exact DifferentiableAt.comp differentiableAt_log (differentiableAt_mul differentiableAt_const (differentiableAt_id))
  exact (Real.differentiableAt_log (h_lin : (5*x + 2) ≠ 0))
  exact Real.differentiableAt_pow
  exact Real.differentiableAt_id
  exact Real.differentiableAt_const
  exact Real.differentiableAt_div.mpr ⟨by simp [h_x], by simp [h_log5]⟩
  exact Real.differentiableAt_pow

